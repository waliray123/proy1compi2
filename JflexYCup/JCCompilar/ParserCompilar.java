
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Compilar;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Analizadores.ErrorCom;
import Objetos.Pista;
import Objetos.Expresion;
import Objetos.Instruccion;
import Objetos.Parametro;
import Objetos.Condicion;
import Objetos.Instrucciones.Asignacion;
import Objetos.Instrucciones.Dimension;
import Objetos.Instrucciones.Declaracion;
import Objetos.Instrucciones.Funcion;
import Objetos.Instrucciones.DeclDim;
import Objetos.Instrucciones.CondSi;
import Objetos.Instrucciones.Para;
import Objetos.Instrucciones.Mientras;
import Objetos.Instrucciones.CasoC;
import Objetos.Instrucciones.SwitchC;
import Objetos.Instrucciones.IncrDecr;
import java.util.Stack;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCompilar extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCompilar() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCompilar(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCompilar(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\002\002\004\000\002\062\002\000\002\002" +
    "\005\000\002\063\002\000\002\002\005\000\002\064\002" +
    "\000\002\002\005\000\002\065\002\000\002\002\005\000" +
    "\002\066\002\000\002\002\005\000\002\067\002\000\002" +
    "\002\005\000\002\070\002\000\002\002\005\000\002\071" +
    "\002\000\002\002\005\000\002\072\002\000\002\002\005" +
    "\000\002\073\002\000\002\002\005\000\002\074\002\000" +
    "\002\002\005\000\002\075\002\000\002\002\005\000\002" +
    "\076\002\000\002\002\005\000\002\002\002\000\002\077" +
    "\002\000\002\003\006\000\002\100\002\000\002\004\006" +
    "\000\002\004\002\000\002\101\002\000\002\005\006\000" +
    "\002\005\002\000\002\102\002\000\002\006\005\000\002" +
    "\103\002\000\002\006\004\000\002\104\002\000\002\007" +
    "\010\000\002\105\002\000\002\106\002\000\002\107\002" +
    "\000\002\007\017\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\110\002\000\002\010\006\000\002\010\002\000\002\111" +
    "\002\000\002\112\002\000\002\023\007\000\002\023\002" +
    "\000\002\113\002\000\002\015\005\000\002\015\002\000" +
    "\002\114\002\000\002\012\005\000\002\115\002\000\002" +
    "\116\002\000\002\117\002\000\002\012\013\000\002\120" +
    "\002\000\002\012\005\000\002\121\002\000\002\012\005" +
    "\000\002\122\002\000\002\012\005\000\002\123\002\000" +
    "\002\012\005\000\002\124\002\000\002\012\005\000\002" +
    "\125\002\000\002\126\002\000\002\012\010\000\002\127" +
    "\002\000\002\012\005\000\002\130\002\000\002\131\002" +
    "\000\002\024\007\000\002\024\002\000\002\132\002\000" +
    "\002\014\005\000\002\014\002\000\002\133\002\000\002" +
    "\047\005\000\002\134\002\000\002\135\002\000\002\136" +
    "\002\000\002\047\013\000\002\137\002\000\002\047\005" +
    "\000\002\140\002\000\002\047\005\000\002\141\002\000" +
    "\002\047\005\000\002\142\002\000\002\047\005\000\002" +
    "\143\002\000\002\047\005\000\002\144\002\000\002\145" +
    "\002\000\002\047\010\000\002\146\002\000\002\047\005" +
    "\000\002\047\003\000\002\147\002\000\002\150\002\000" +
    "\002\050\007\000\002\050\002\000\002\151\002\000\002" +
    "\051\005\000\002\152\002\000\002\051\005\000\002\153" +
    "\002\000\002\051\005\000\002\051\002\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\154\002\000\002" +
    "\011\005\000\002\011\002\000\002\155\002\000\002\017" +
    "\006\000\002\017\002\000\002\020\004\000\002\156\002" +
    "\000\002\020\005\000\002\021\004\000\002\021\002\000" +
    "\002\157\002\000\002\022\006\000\002\022\002\000\002" +
    "\160\002\000\002\025\006\000\002\161\002\000\002\025" +
    "\006\000\002\162\002\000\002\163\002\000\002\164\002" +
    "\000\002\025\014\000\002\165\002\000\002\166\002\000" +
    "\002\026\007\000\002\026\002\000\002\167\002\000\002" +
    "\027\011\000\002\170\002\000\002\027\010\000\002\171" +
    "\002\000\002\027\007\000\002\172\002\000\002\030\006" +
    "\000\002\173\002\000\002\030\005\000\002\030\002\000" +
    "\002\031\004\000\002\031\002\000\002\174\002\000\002" +
    "\032\007\000\002\175\002\000\002\032\007\000\002\032" +
    "\003\000\002\176\002\000\002\177\002\000\002\200\002" +
    "\000\002\033\013\000\002\033\004\000\002\201\002\000" +
    "\002\202\002\000\002\203\002\000\002\033\013\000\002" +
    "\037\003\000\002\037\002\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\204\002\000\002\035\005\000" +
    "\002\035\002\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\205" +
    "\002\000\002\206\002\000\002\207\002\000\002\040\017" +
    "\000\002\041\003\000\002\041\003\000\002\210\002\000" +
    "\002\042\006\000\002\211\002\000\002\042\006\000\002" +
    "\212\002\000\002\213\002\000\002\214\002\000\002\042" +
    "\014\000\002\061\003\000\002\061\002\000\002\215\002" +
    "\000\002\216\002\000\002\043\010\000\002\043\003\000" +
    "\002\043\003\000\002\217\002\000\002\044\007\000\002" +
    "\220\002\000\002\044\007\000\002\221\002\000\002\044" +
    "\007\000\002\222\002\000\002\223\002\000\002\045\012" +
    "\000\002\224\002\000\002\045\007\000\002\225\002\000" +
    "\002\045\005\000\002\226\002\000\002\045\006\000\002" +
    "\227\002\000\002\045\007\000\002\230\002\000\002\046" +
    "\007\000\002\231\002\000\002\046\005\000\002\046\003" +
    "\000\002\046\003\000\002\052\004\000\002\052\004\000" +
    "\002\232\002\000\002\053\007\000\002\233\002\000\002" +
    "\234\002\000\002\053\012\000\002\235\002\000\002\053" +
    "\007\000\002\236\002\000\002\053\007\000\002\237\002" +
    "\000\002\054\006\000\002\240\002\000\002\054\005\000" +
    "\002\054\002\000\002\056\004\000\002\056\002\000\002" +
    "\241\002\000\002\055\005\000\002\242\002\000\002\243" +
    "\002\000\002\244\002\000\002\055\013\000\002\245\002" +
    "\000\002\055\005\000\002\246\002\000\002\055\005\000" +
    "\002\247\002\000\002\055\005\000\002\250\002\000\002" +
    "\055\005\000\002\251\002\000\002\055\005\000\002\252" +
    "\002\000\002\253\002\000\002\055\010\000\002\254\002" +
    "\000\002\055\005\000\002\255\002\000\002\256\002\000" +
    "\002\060\007\000\002\060\002\000\002\257\002\000\002" +
    "\057\005\000\002\260\002\000\002\057\005\000\002\261" +
    "\002\000\002\057\005\000\002\057\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d5\000\076\002\uffe6\004\022\006\026\007\uffdb\011" +
    "\011\012\020\013\053\014\037\015\004\016\015\017\046" +
    "\020\052\021\021\022\047\023\024\024\033\025\032\026" +
    "\050\027\045\030\043\031\007\032\017\040\031\041\025" +
    "\042\014\043\040\044\013\045\051\106\034\107\030\001" +
    "\002\000\022\073\uff14\074\uff14\107\uff14\110\uff14\111\uff14" +
    "\112\uff14\113\uff14\114\uff14\001\002\000\076\002\uffec\004" +
    "\uffec\006\uffec\007\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045" +
    "\uffec\106\uffec\107\uffec\001\002\000\076\002\uffee\004\uffee" +
    "\006\uffee\007\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\106\uffee\107\uffee\001\002\000\004\074\uff23\001\002\000" +
    "\076\002\uffe8\004\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\106\uffe8\107\uffe8\001\002\000\004" +
    "\074\u01c8\001\002\000\076\002\ufff8\004\ufff8\006\ufff8\007" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\106\ufff8\107" +
    "\ufff8\001\002\000\006\010\uffd0\107\uffd0\001\002\000\006" +
    "\010\uffd2\107\uffd2\001\002\000\076\002\ufffe\004\ufffe\006" +
    "\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe" +
    "\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\106" +
    "\ufffe\107\ufffe\001\002\000\004\002\u01c3\001\002\000\004" +
    "\074\uff1a\001\002\000\076\002\uff56\004\uff56\006\uff56\007" +
    "\uff56\011\uff56\012\uff56\013\uff56\014\uff56\015\uff56\016\uff56" +
    "\017\uff56\020\uff56\021\uff56\022\uff56\023\uff56\024\uff56\025" +
    "\uff56\026\uff56\027\uff56\030\uff56\031\uff56\032\uff56\040\uff56" +
    "\041\uff56\042\uff56\043\uff56\044\uff56\045\uff56\106\uff56\107" +
    "\uff56\001\002\000\004\074\uff2c\001\002\000\004\107\u01b0" +
    "\001\002\000\004\007\u017c\001\002\000\076\002\uff28\004" +
    "\uff28\006\uff28\007\uff28\011\uff28\012\uff28\013\uff28\014\uff28" +
    "\015\uff28\016\uff28\017\uff28\020\uff28\021\uff28\022\uff28\023" +
    "\uff28\024\uff28\025\uff28\026\uff28\027\uff28\030\uff28\031\uff28" +
    "\032\uff28\040\uff28\041\uff28\042\uff28\043\uff28\044\uff28\045" +
    "\uff28\106\uff28\107\uff28\001\002\000\006\010\uffd3\107\uffd3" +
    "\001\002\000\020\007\uffdd\032\u0174\041\025\042\014\043" +
    "\040\044\013\045\051\001\002\000\004\107\u016f\001\002" +
    "\000\016\046\u015b\047\u015d\050\uff73\074\uff63\076\uff6f\105" +
    "\uff71\001\002\000\076\002\uff11\004\uff11\006\uff11\007\uff11" +
    "\011\uff11\012\uff11\013\uff11\014\uff11\015\uff11\016\uff11\017" +
    "\uff11\020\uff11\021\uff11\022\uff11\023\uff11\024\uff11\025\uff11" +
    "\026\uff11\027\uff11\030\uff11\031\uff11\032\uff11\040\uff11\041" +
    "\uff11\042\uff11\043\uff11\044\uff11\045\uff11\106\uff11\107\uff11" +
    "\001\002\000\004\074\uff21\001\002\000\030\025\uff1c\027" +
    "\uff1c\030\uff1c\073\uff1c\074\uff1c\107\uff1c\110\uff1c\111\uff1c" +
    "\112\uff1c\113\uff1c\114\uff1c\001\002\000\076\002\000\004" +
    "\000\006\000\007\000\011\000\012\000\013\000\014\000" +
    "\015\000\016\000\017\000\020\000\021\000\022\000\023" +
    "\000\024\000\025\000\026\000\027\000\030\000\031\000" +
    "\032\000\040\000\041\000\042\000\043\000\044\000\045" +
    "\000\106\000\107\000\001\002\000\076\002\ufff6\004\ufff6" +
    "\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\106\ufff6\107\ufff6\001\002\000\076\002\ufff4\004\ufff4\006" +
    "\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\106" +
    "\ufff4\107\ufff4\001\002\000\004\074\uff16\001\002\000\006" +
    "\010\uffd1\107\uffd1\001\002\000\076\002\uffea\004\uffea\006" +
    "\uffea\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\106" +
    "\uffea\107\uffea\001\002\000\076\002\ufff0\004\ufff0\006\ufff0" +
    "\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\040" +
    "\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\106\ufff0" +
    "\107\ufff0\001\002\000\004\074\uff25\001\002\000\076\002" +
    "\ufff2\004\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\106\ufff2\107\ufff2\001\002\000\004\074\uff27" +
    "\001\002\000\076\002\uff12\004\uff12\006\uff12\007\uff12\011" +
    "\uff12\012\uff12\013\uff12\014\uff12\015\uff12\016\uff12\017\uff12" +
    "\020\uff12\021\uff12\022\uff12\023\uff12\024\uff12\025\uff12\026" +
    "\uff12\027\uff12\030\uff12\031\uff12\032\uff12\040\uff12\041\uff12" +
    "\042\uff12\043\uff12\044\uff12\045\uff12\106\uff12\107\uff12\001" +
    "\002\000\076\002\uff29\004\uff29\006\uff29\007\uff29\011\uff29" +
    "\012\uff29\013\uff29\014\uff29\015\uff29\016\uff29\017\uff29\020" +
    "\uff29\021\uff29\022\uff29\023\uff29\024\uff29\025\uff29\026\uff29" +
    "\027\uff29\030\uff29\031\uff29\032\uff29\040\uff29\041\uff29\042" +
    "\uff29\043\uff29\044\uff29\045\uff29\106\uff29\107\uff29\001\002" +
    "\000\004\074\uff1e\001\002\000\006\010\uffcf\107\uffcf\001" +
    "\002\000\004\074\uff3c\001\002\000\004\074\062\001\002" +
    "\000\076\002\ufffa\004\ufffa\006\ufffa\007\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\106\ufffa\107\ufffa\001\002\000" +
    "\076\002\ufffc\004\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\106\ufffc\107\ufffc\001\002\000\076" +
    "\002\uffe6\004\022\006\026\007\uffdb\011\011\012\020\013" +
    "\053\014\037\015\004\016\015\017\046\020\052\021\021" +
    "\022\047\023\024\024\033\025\032\026\050\027\045\030" +
    "\043\031\007\032\017\040\031\041\025\042\014\043\040" +
    "\044\013\045\051\106\034\107\030\001\002\000\004\002" +
    "\ufffb\001\002\000\076\002\uffe6\004\022\006\026\007\uffdb" +
    "\011\011\012\020\013\053\014\037\015\004\016\015\017" +
    "\046\020\052\021\021\022\047\023\024\024\033\025\032" +
    "\026\050\027\045\030\043\031\007\032\017\040\031\041" +
    "\025\042\014\043\040\044\013\045\051\106\034\107\030" +
    "\001\002\000\004\002\ufff9\001\002\000\024\063\uff58\073" +
    "\uff58\074\uff58\107\uff58\110\uff58\111\uff58\112\uff58\113\uff58" +
    "\114\uff58\001\002\000\024\063\065\073\uff4b\074\uff4b\107" +
    "\uff4b\110\uff4b\111\uff4b\112\uff4b\113\uff4b\114\uff4b\001\002" +
    "\000\022\073\071\074\074\107\076\110\070\111\100\112" +
    "\075\113\077\114\072\001\002\000\022\073\uff4c\074\uff4c" +
    "\107\uff4c\110\uff4c\111\uff4c\112\uff4c\113\uff4c\114\uff4c\001" +
    "\002\000\004\075\067\001\002\000\076\002\uff57\004\uff57" +
    "\006\uff57\007\uff57\011\uff57\012\uff57\013\uff57\014\uff57\015" +
    "\uff57\016\uff57\017\uff57\020\uff57\021\uff57\022\uff57\023\uff57" +
    "\024\uff57\025\uff57\026\uff57\027\uff57\030\uff57\031\uff57\032" +
    "\uff57\040\uff57\041\uff57\042\uff57\043\uff57\044\uff57\045\uff57" +
    "\106\uff57\107\uff57\001\002\000\152\002\uffbc\004\uffbc\006" +
    "\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\067" +
    "\uffbc\070\uffbc\071\uffbc\072\uffbc\075\uffbc\077\uffbc\101\uffbc" +
    "\103\uffbc\104\uffbc\106\uffbc\107\uffbc\001\002\000\022\073" +
    "\uffb1\074\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1" +
    "\114\uffb1\001\002\000\152\002\uffb6\004\uffb6\006\uffb6\007" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070" +
    "\uffb6\071\uffb6\072\uffb6\075\uffb6\077\uffb6\101\uffb6\103\uffb6" +
    "\104\uffb6\106\uffb6\107\uffb6\001\002\000\034\057\152\060" +
    "\151\061\146\062\154\064\147\065\150\066\153\067\155" +
    "\070\145\071\144\072\157\075\uff51\103\uff51\001\002\000" +
    "\022\073\uffb4\074\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4" +
    "\113\uffb4\114\uffb4\001\002\000\152\002\uffbe\004\uffbe\006" +
    "\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\072\uffbe\075\uffbe\077\uffbe\101\uffbe" +
    "\103\uffbe\104\uffbe\106\uffbe\107\uffbe\001\002\000\154\002" +
    "\uffc4\004\uffc4\006\uffc4\007\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\075\uffc4" +
    "\076\116\077\uffc4\101\uffc4\103\uffc4\104\uffc4\106\uffc4\107" +
    "\uffc4\001\002\000\152\002\uffb8\004\uffb8\006\uffb8\007\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8" +
    "\071\uffb8\072\uffb8\075\uffb8\077\uffb8\101\uffb8\103\uffb8\104" +
    "\uffb8\106\uffb8\107\uffb8\001\002\000\152\002\uffba\004\uffba" +
    "\006\uffba\007\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\064\uffba\065\uffba\066\uffba" +
    "\067\uffba\070\uffba\071\uffba\072\uffba\075\uffba\077\uffba\101" +
    "\uffba\103\uffba\104\uffba\106\uffba\107\uffba\001\002\000\152" +
    "\002\uffa9\004\uffa9\006\uffa9\007\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\051\107\052\102\053\104\054\110\055" +
    "\105\056\103\057\uffa9\060\uffa9\061\uffa9\062\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\075" +
    "\uffa9\077\uffa9\101\uffa9\103\uffa9\104\uffa9\106\uffa9\107\uffa9" +
    "\001\002\000\030\025\uff86\027\uff86\030\uff86\073\uff86\074" +
    "\uff86\107\uff86\110\uff86\111\uff86\112\uff86\113\uff86\114\uff86" +
    "\001\002\000\030\025\uff83\027\uff83\030\uff83\073\uff83\074" +
    "\uff83\107\uff83\110\uff83\111\uff83\112\uff83\113\uff83\114\uff83" +
    "\001\002\000\030\025\uff85\027\uff85\030\uff85\073\uff85\074" +
    "\uff85\107\uff85\110\uff85\111\uff85\112\uff85\113\uff85\114\uff85" +
    "\001\002\000\030\025\uff82\027\uff82\030\uff82\073\uff82\074" +
    "\uff82\107\uff82\110\uff82\111\uff82\112\uff82\113\uff82\114\uff82" +
    "\001\002\000\136\002\uffb9\004\uffb9\006\uffb9\007\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\072\uffb9\075\uffb9\077\uffb9\101\uffb9\103\uffb9\104" +
    "\uffb9\106\uffb9\107\uffb9\001\002\000\030\025\uff87\027\uff87" +
    "\030\uff87\073\uff87\074\uff87\107\uff87\110\uff87\111\uff87\112" +
    "\uff87\113\uff87\114\uff87\001\002\000\030\025\uff84\027\uff84" +
    "\030\uff84\073\uff84\074\uff84\107\uff84\110\uff84\111\uff84\112" +
    "\uff84\113\uff84\114\uff84\001\002\000\022\073\uffab\074\uffab" +
    "\107\uffab\110\uffab\111\uffab\112\uffab\113\uffab\114\uffab\001" +
    "\002\000\022\073\071\074\074\107\076\110\070\111\100" +
    "\112\075\113\077\114\072\001\002\000\136\002\uffaa\004" +
    "\uffaa\006\uffaa\007\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\064\uffaa\065\uffaa" +
    "\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\075\uffaa\077" +
    "\uffaa\101\uffaa\103\uffaa\104\uffaa\106\uffaa\107\uffaa\001\002" +
    "\000\152\002\uffa9\004\uffa9\006\uffa9\007\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\051\107\052\102\053\104\054" +
    "\110\055\105\056\103\057\uffa9\060\uffa9\061\uffa9\062\uffa9" +
    "\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072" +
    "\uffa9\075\uffa9\077\uffa9\101\uffa9\103\uffa9\104\uffa9\106\uffa9" +
    "\107\uffa9\001\002\000\136\002\uffb7\004\uffb7\006\uffb7\007" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\075\uffb7\077\uffb7\101\uffb7\103" +
    "\uffb7\104\uffb7\106\uffb7\107\uffb7\001\002\000\022\073\uffc2" +
    "\074\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\114" +
    "\uffc2\001\002\000\152\002\uffa9\004\uffa9\006\uffa9\007\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\051\107\052\102" +
    "\053\104\054\110\055\105\056\103\057\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\071\uffa9\072\uffa9\075\uffa9\077\uffa9\101\uffa9\103\uffa9\104" +
    "\uffa9\106\uffa9\107\uffa9\001\002\000\136\002\uffc3\004\uffc3" +
    "\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\064\uffc3\065\uffc3\066" +
    "\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\075\uffc3\077\uffc3" +
    "\101\uffc3\103\uffc3\104\uffc3\106\uffc3\107\uffc3\001\002\000" +
    "\022\073\071\074\074\107\076\110\070\111\100\112\075" +
    "\113\077\114\072\001\002\000\004\077\uffc1\001\002\000" +
    "\004\077\124\001\002\000\154\002\uffac\004\uffac\006\uffac" +
    "\007\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\064\uffac\065\uffac\066\uffac\067\uffac" +
    "\070\uffac\071\uffac\072\uffac\075\uffac\076\126\077\uffac\101" +
    "\uffac\103\uffac\104\uffac\106\uffac\107\uffac\001\002\000\152" +
    "\002\uffc0\004\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\075" +
    "\uffc0\077\uffc0\101\uffc0\103\uffc0\104\uffc0\106\uffc0\107\uffc0" +
    "\001\002\000\022\073\uffaf\074\uffaf\107\uffaf\110\uffaf\111" +
    "\uffaf\112\uffaf\113\uffaf\114\uffaf\001\002\000\022\073\071" +
    "\074\074\107\076\110\070\111\100\112\075\113\077\114" +
    "\072\001\002\000\004\077\uffae\001\002\000\004\077\132" +
    "\001\002\000\152\002\uffad\004\uffad\006\uffad\007\uffad\011" +
    "\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad" +
    "\062\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071" +
    "\uffad\072\uffad\075\uffad\077\uffad\101\uffad\103\uffad\104\uffad" +
    "\106\uffad\107\uffad\001\002\000\152\002\uffa9\004\uffa9\006" +
    "\uffa9\007\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\051" +
    "\107\052\102\053\104\054\110\055\105\056\103\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\071\uffa9\072\uffa9\075\uffa9\077\uffa9\101\uffa9" +
    "\103\uffa9\104\uffa9\106\uffa9\107\uffa9\001\002\000\136\002" +
    "\uffbf\004\uffbf\006\uffbf\007\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\064\uffbf" +
    "\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\075" +
    "\uffbf\077\uffbf\101\uffbf\103\uffbf\104\uffbf\106\uffbf\107\uffbf" +
    "\001\002\000\152\002\uffa9\004\uffa9\006\uffa9\007\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\051\107\052\102\053" +
    "\104\054\110\055\105\056\103\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\072\uffa9\075\uffa9\077\uffa9\101\uffa9\103\uffa9\104\uffa9" +
    "\106\uffa9\107\uffa9\001\002\000\136\002\uffbd\004\uffbd\006" +
    "\uffbd\007\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\067\uffbd\070\uffbd\071\uffbd\072\uffbd\075\uffbd\077\uffbd\101" +
    "\uffbd\103\uffbd\104\uffbd\106\uffbd\107\uffbd\001\002\000\022" +
    "\073\071\074\074\107\076\110\070\111\100\112\075\113" +
    "\077\114\072\001\002\000\004\075\141\001\002\000\152" +
    "\002\uffb3\004\uffb3\006\uffb3\007\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\064\uffb3" +
    "\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\075" +
    "\uffb3\077\uffb3\101\uffb3\103\uffb3\104\uffb3\106\uffb3\107\uffb3" +
    "\001\002\000\152\002\uffa9\004\uffa9\006\uffa9\007\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\051\107\052\102\053" +
    "\104\054\110\055\105\056\103\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\072\uffa9\075\uffa9\077\uffa9\101\uffa9\103\uffa9\104\uffa9" +
    "\106\uffa9\107\uffa9\001\002\000\136\002\uffb2\004\uffb2\006" +
    "\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\057" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2" +
    "\067\uffb2\070\uffb2\071\uffb2\072\uffb2\075\uffb2\077\uffb2\101" +
    "\uffb2\103\uffb2\104\uffb2\106\uffb2\107\uffb2\001\002\000\032" +
    "\025\uff41\027\uff41\030\uff41\063\uff41\073\uff41\074\uff41\107" +
    "\uff41\110\uff41\111\uff41\112\uff41\113\uff41\114\uff41\001\002" +
    "\000\032\025\uff3e\027\uff3e\030\uff3e\063\uff3e\073\uff3e\074" +
    "\uff3e\107\uff3e\110\uff3e\111\uff3e\112\uff3e\113\uff3e\114\uff3e" +
    "\001\002\000\032\025\uff46\027\uff46\030\uff46\063\uff46\073" +
    "\uff46\074\uff46\107\uff46\110\uff46\111\uff46\112\uff46\113\uff46" +
    "\114\uff46\001\002\000\032\025\uff48\027\uff48\030\uff48\063" +
    "\uff48\073\uff48\074\uff48\107\uff48\110\uff48\111\uff48\112\uff48" +
    "\113\uff48\114\uff48\001\002\000\032\025\uff47\027\uff47\030" +
    "\uff47\063\uff47\073\uff47\074\uff47\107\uff47\110\uff47\111\uff47" +
    "\112\uff47\113\uff47\114\uff47\001\002\000\032\025\uff49\027" +
    "\uff49\030\uff49\063\uff49\073\uff49\074\uff49\107\uff49\110\uff49" +
    "\111\uff49\112\uff49\113\uff49\114\uff49\001\002\000\032\025" +
    "\uff4a\027\uff4a\030\uff4a\063\uff4a\073\uff4a\074\uff4a\107\uff4a" +
    "\110\uff4a\111\uff4a\112\uff4a\113\uff4a\114\uff4a\001\002\000" +
    "\032\025\uff40\027\uff40\030\uff40\063\uff40\073\uff40\074\uff40" +
    "\107\uff40\110\uff40\111\uff40\112\uff40\113\uff40\114\uff40\001" +
    "\002\000\032\025\uff45\027\uff45\030\uff45\063\uff45\073\uff45" +
    "\074\uff45\107\uff45\110\uff45\111\uff45\112\uff45\113\uff45\114" +
    "\uff45\001\002\000\032\025\uff3d\027\uff3d\030\uff3d\063\uff3d" +
    "\073\uff3d\074\uff3d\107\uff3d\110\uff3d\111\uff3d\112\uff3d\113" +
    "\uff3d\114\uff3d\001\002\000\024\063\uff50\073\uff50\074\uff50" +
    "\107\uff50\110\uff50\111\uff50\112\uff50\113\uff50\114\uff50\001" +
    "\002\000\032\025\uff3f\027\uff3f\030\uff3f\063\uff3f\073\uff3f" +
    "\074\uff3f\107\uff3f\110\uff3f\111\uff3f\112\uff3f\113\uff3f\114" +
    "\uff3f\001\002\000\024\063\uff55\073\uff55\074\uff55\107\uff55" +
    "\110\uff55\111\uff55\112\uff55\113\uff55\114\uff55\001\002\000" +
    "\024\063\065\073\uff4b\074\uff4b\107\uff4b\110\uff4b\111\uff4b" +
    "\112\uff4b\113\uff4b\114\uff4b\001\002\000\022\073\uff54\074" +
    "\uff54\107\uff54\110\uff54\111\uff54\112\uff54\113\uff54\114\uff54" +
    "\001\002\000\022\073\071\074\074\107\076\110\070\111" +
    "\100\112\075\113\077\114\072\001\002\000\020\066\uff53" +
    "\067\uff53\070\uff53\071\uff53\072\uff53\075\uff53\103\uff53\001" +
    "\002\000\020\066\153\067\155\070\145\071\144\072\157" +
    "\075\uff42\103\uff42\001\002\000\006\075\uff52\103\uff52\001" +
    "\002\000\024\063\uff44\073\uff44\074\uff44\107\uff44\110\uff44" +
    "\111\uff44\112\uff44\113\uff44\114\uff44\001\002\000\024\063" +
    "\065\073\uff4b\074\uff4b\107\uff4b\110\uff4b\111\uff4b\112\uff4b" +
    "\113\uff4b\114\uff4b\001\002\000\006\075\uff43\103\uff43\001" +
    "\002\000\024\063\065\073\uff4b\074\uff4b\107\uff4b\110\uff4b" +
    "\111\uff4b\112\uff4b\113\uff4b\114\uff4b\001\002\000\022\073" +
    "\uff4f\074\uff4f\107\uff4f\110\uff4f\111\uff4f\112\uff4f\113\uff4f" +
    "\114\uff4f\001\002\000\022\073\071\074\074\107\076\110" +
    "\070\111\100\112\075\113\077\114\072\001\002\000\020" +
    "\066\uff4e\067\uff4e\070\uff4e\071\uff4e\072\uff4e\075\uff4e\103" +
    "\uff4e\001\002\000\020\066\153\067\155\070\145\071\144" +
    "\072\157\075\uff42\103\uff42\001\002\000\006\075\uff4d\103" +
    "\uff4d\001\002\000\152\002\uffa9\004\uffa9\006\uffa9\007\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\051\107\052\102" +
    "\053\104\054\110\055\105\056\103\057\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\071\uffa9\072\uffa9\075\uffa9\077\uffa9\101\uffa9\103\uffa9\104" +
    "\uffa9\106\uffa9\107\uffa9\001\002\000\136\002\uffb5\004\uffb5" +
    "\006\uffb5\007\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\075\uffb5\077\uffb5" +
    "\101\uffb5\103\uffb5\104\uffb5\106\uffb5\107\uffb5\001\002\000" +
    "\022\073\071\074\074\107\076\110\070\111\100\112\075" +
    "\113\077\114\072\001\002\000\136\002\uffb0\004\uffb0\006" +
    "\uffb0\007\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\057" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\064\uffb0\065\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\075\uffb0\077\uffb0\101" +
    "\uffb0\103\uffb0\104\uffb0\106\uffb0\107\uffb0\001\002\000\152" +
    "\002\uffa9\004\uffa9\006\uffa9\007\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\051\107\052\102\053\104\054\110\055" +
    "\105\056\103\057\uffa9\060\uffa9\061\uffa9\062\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\075" +
    "\uffa9\077\uffa9\101\uffa9\103\uffa9\104\uffa9\106\uffa9\107\uffa9" +
    "\001\002\000\136\002\uffbb\004\uffbb\006\uffbb\007\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\045\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\075\uffbb\077\uffbb\101\uffbb\103\uffbb\104" +
    "\uffbb\106\uffbb\107\uffbb\001\002\000\004\074\207\001\002" +
    "\000\016\041\025\042\014\043\040\044\013\045\051\107" +
    "\uff2d\001\002\000\004\107\212\001\002\000\004\107\uff2e" +
    "\001\002\000\010\050\uff36\076\uff32\105\uff34\001\002\000" +
    "\004\103\214\001\002\000\024\063\uff3b\073\uff3b\074\uff3b" +
    "\107\uff3b\110\uff3b\111\uff3b\112\uff3b\113\uff3b\114\uff3b\001" +
    "\002\000\024\063\065\073\uff4b\074\uff4b\107\uff4b\110\uff4b" +
    "\111\uff4b\112\uff4b\113\uff4b\114\uff4b\001\002\000\004\103" +
    "\217\001\002\000\004\107\220\001\002\000\006\046\221" +
    "\047\223\001\002\000\004\075\uff38\001\002\000\004\075" +
    "\uff3a\001\002\000\004\075\uff37\001\002\000\004\075\225" +
    "\001\002\000\076\002\uff39\004\uff39\006\uff39\007\uff39\011" +
    "\uff39\012\uff39\013\uff39\014\uff39\015\uff39\016\uff39\017\uff39" +
    "\020\uff39\021\uff39\022\uff39\023\uff39\024\uff39\025\uff39\026" +
    "\uff39\027\uff39\030\uff39\031\uff39\032\uff39\040\uff39\041\uff39" +
    "\042\uff39\043\uff39\044\uff39\045\uff39\106\uff39\107\uff39\001" +
    "\002\000\004\076\235\001\002\000\004\105\233\001\002" +
    "\000\004\050\231\001\002\000\022\073\071\074\074\107" +
    "\076\110\070\111\100\112\075\113\077\114\072\001\002" +
    "\000\004\103\uff35\001\002\000\022\073\071\074\074\107" +
    "\076\110\070\111\100\112\075\113\077\114\072\001\002" +
    "\000\004\103\uff33\001\002\000\022\073\uff31\074\uff31\107" +
    "\uff31\110\uff31\111\uff31\112\uff31\113\uff31\114\uff31\001\002" +
    "\000\022\073\071\074\074\107\076\110\070\111\100\112" +
    "\075\113\077\114\072\001\002\000\004\077\uff30\001\002" +
    "\000\004\077\241\001\002\000\006\076\243\105\uff68\001" +
    "\002\000\004\105\250\001\002\000\022\073\uff6b\074\uff6b" +
    "\107\uff6b\110\uff6b\111\uff6b\112\uff6b\113\uff6b\114\uff6b\001" +
    "\002\000\022\073\071\074\074\107\076\110\070\111\100" +
    "\112\075\113\077\114\072\001\002\000\004\077\uff6a\001" +
    "\002\000\004\077\247\001\002\000\004\105\uff69\001\002" +
    "\000\022\073\071\074\074\107\076\110\070\111\100\112" +
    "\075\113\077\114\072\001\002\000\004\103\uff2f\001\002" +
    "\000\004\074\253\001\002\000\044\025\uff5f\027\uff5f\030" +
    "\uff5f\041\025\042\014\043\040\044\013\045\051\073\uff5f" +
    "\074\uff5f\075\uff5d\107\uff5f\110\uff5f\111\uff5f\112\uff5f\113" +
    "\uff5f\114\uff5f\001\002\000\004\075\u0138\001\002\000\004" +
    "\107\u0135\001\002\000\030\025\263\027\264\030\267\073" +
    "\260\074\265\107\270\110\257\111\273\112\266\113\271" +
    "\114\261\001\002\000\146\002\uffa0\004\uffa0\006\uffa0\007" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070" +
    "\uffa0\071\uffa0\072\uffa0\075\uffa0\077\uffa0\104\uffa0\106\uffa0" +
    "\107\uffa0\001\002\000\030\025\uff95\027\uff95\030\uff95\073" +
    "\uff95\074\uff95\107\uff95\110\uff95\111\uff95\112\uff95\113\uff95" +
    "\114\uff95\001\002\000\146\002\uff9a\004\uff9a\006\uff9a\007" +
    "\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\051\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070" +
    "\uff9a\071\uff9a\072\uff9a\075\uff9a\077\uff9a\104\uff9a\106\uff9a" +
    "\107\uff9a\001\002\000\006\075\uff5b\104\u012c\001\002\000" +
    "\004\074\uff0c\001\002\000\004\074\uff09\001\002\000\030" +
    "\025\uff98\027\uff98\030\uff98\073\uff98\074\uff98\107\uff98\110" +
    "\uff98\111\uff98\112\uff98\113\uff98\114\uff98\001\002\000\146" +
    "\002\uffa2\004\uffa2\006\uffa2\007\uffa2\011\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\064\uffa2" +
    "\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\075" +
    "\uffa2\077\uffa2\104\uffa2\106\uffa2\107\uffa2\001\002\000\004" +
    "\074\uff07\001\002\000\152\002\uffa8\004\uffa8\006\uffa8\007" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070" +
    "\uffa8\071\uffa8\072\uffa8\074\uff0e\075\uffa8\076\313\077\uffa8" +
    "\104\uffa8\106\uffa8\107\uffa8\001\002\000\146\002\uff9c\004" +
    "\uff9c\006\uff9c\007\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c" +
    "\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\075\uff9c\077\uff9c" +
    "\104\uff9c\106\uff9c\107\uff9c\001\002\000\104\002\uff93\004" +
    "\uff93\006\uff93\007\uff93\011\uff93\012\uff93\013\uff93\014\uff93" +
    "\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93" +
    "\032\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\075\uff93\077\uff93\104\uff93\106\uff93\107\uff93\001\002" +
    "\000\146\002\uff9e\004\uff9e\006\uff9e\007\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072" +
    "\uff9e\075\uff9e\077\uff9e\104\uff9e\106\uff9e\107\uff9e\001\002" +
    "\000\146\002\uff88\004\uff88\006\uff88\007\uff88\011\uff88\012" +
    "\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\040\uff88\041\uff88\042\uff88" +
    "\043\uff88\044\uff88\045\uff88\051\107\052\102\053\104\054" +
    "\110\055\105\056\103\057\152\060\151\061\146\062\154" +
    "\064\147\065\150\066\153\067\155\070\145\071\144\072" +
    "\157\075\uff88\077\uff88\104\uff88\106\uff88\107\uff88\001\002" +
    "\000\030\025\uff8e\027\uff8e\030\uff8e\073\uff8e\074\uff8e\107" +
    "\uff8e\110\uff8e\111\uff8e\112\uff8e\113\uff8e\114\uff8e\001\002" +
    "\000\030\025\uff8a\027\uff8a\030\uff8a\073\uff8a\074\uff8a\107" +
    "\uff8a\110\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a\001\002" +
    "\000\030\025\uff8c\027\uff8c\030\uff8c\073\uff8c\074\uff8c\107" +
    "\uff8c\110\uff8c\111\uff8c\112\uff8c\113\uff8c\114\uff8c\001\002" +
    "\000\104\002\uff9d\004\uff9d\006\uff9d\007\uff9d\011\uff9d\012" +
    "\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027" +
    "\uff9d\030\uff9d\031\uff9d\032\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\075\uff9d\077\uff9d\104\uff9d\106" +
    "\uff9d\107\uff9d\001\002\000\030\025\263\027\264\030\267" +
    "\073\260\074\265\107\270\110\257\111\273\112\266\113" +
    "\271\114\261\001\002\000\104\002\uff8b\004\uff8b\006\uff8b" +
    "\007\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b" +
    "\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\040" +
    "\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\075\uff8b" +
    "\077\uff8b\104\uff8b\106\uff8b\107\uff8b\001\002\000\030\025" +
    "\263\027\264\030\267\073\260\074\265\107\270\110\257" +
    "\111\273\112\266\113\271\114\261\001\002\000\104\002" +
    "\uff89\004\uff89\006\uff89\007\uff89\011\uff89\012\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\075\uff89\077\uff89\104\uff89\106\uff89\107\uff89" +
    "\001\002\000\030\025\263\027\264\030\267\073\260\074" +
    "\265\107\270\110\257\111\273\112\266\113\271\114\261" +
    "\001\002\000\104\002\uff8d\004\uff8d\006\uff8d\007\uff8d\011" +
    "\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d" +
    "\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026" +
    "\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\043\uff8d\044\uff8d\045\uff8d\075\uff8d\077\uff8d\104" +
    "\uff8d\106\uff8d\107\uff8d\001\002\000\146\002\uff88\004\uff88" +
    "\006\uff88\007\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015" +
    "\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88" +
    "\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032" +
    "\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88" +
    "\051\107\052\102\053\104\054\110\055\105\056\103\057" +
    "\152\060\151\061\146\062\154\064\147\065\150\066\153" +
    "\067\155\070\145\071\144\072\157\075\uff88\077\uff88\104" +
    "\uff88\106\uff88\107\uff88\001\002\000\104\002\uff9b\004\uff9b" +
    "\006\uff9b\007\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\075\uff9b\077\uff9b\104\uff9b\106\uff9b\107\uff9b\001\002\000" +
    "\004\074\331\001\002\000\146\002\uff88\004\uff88\006\uff88" +
    "\007\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016" +
    "\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88" +
    "\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\051\107" +
    "\052\102\053\104\054\110\055\105\056\103\057\152\060" +
    "\151\061\146\062\154\064\147\065\150\066\153\067\155" +
    "\070\145\071\144\072\157\075\uff88\077\uff88\104\uff88\106" +
    "\uff88\107\uff88\001\002\000\030\025\uffa6\027\uffa6\030\uffa6" +
    "\073\uffa6\074\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113" +
    "\uffa6\114\uffa6\001\002\000\030\025\263\027\264\030\267" +
    "\073\260\074\265\107\270\110\257\111\273\112\266\113" +
    "\271\114\261\001\002\000\004\077\uffa5\001\002\000\004" +
    "\077\317\001\002\000\150\002\uff8f\004\uff8f\006\uff8f\007" +
    "\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\040\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f" +
    "\061\uff8f\062\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070" +
    "\uff8f\071\uff8f\072\uff8f\075\uff8f\076\321\077\uff8f\104\uff8f" +
    "\106\uff8f\107\uff8f\001\002\000\146\002\uffa4\004\uffa4\006" +
    "\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\051" +
    "\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067" +
    "\uffa4\070\uffa4\071\uffa4\072\uffa4\075\uffa4\077\uffa4\104\uffa4" +
    "\106\uffa4\107\uffa4\001\002\000\030\025\uff92\027\uff92\030" +
    "\uff92\073\uff92\074\uff92\107\uff92\110\uff92\111\uff92\112\uff92" +
    "\113\uff92\114\uff92\001\002\000\030\025\263\027\264\030" +
    "\267\073\260\074\265\107\270\110\257\111\273\112\266" +
    "\113\271\114\261\001\002\000\004\077\uff91\001\002\000" +
    "\004\077\325\001\002\000\146\002\uff90\004\uff90\006\uff90" +
    "\007\uff90\011\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016" +
    "\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90" +
    "\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\051\uff90" +
    "\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060" +
    "\uff90\061\uff90\062\uff90\064\uff90\065\uff90\066\uff90\067\uff90" +
    "\070\uff90\071\uff90\072\uff90\075\uff90\077\uff90\104\uff90\106" +
    "\uff90\107\uff90\001\002\000\146\002\uff88\004\uff88\006\uff88" +
    "\007\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016" +
    "\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88" +
    "\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\051\107" +
    "\052\102\053\104\054\110\055\105\056\103\057\152\060" +
    "\151\061\146\062\154\064\147\065\150\066\153\067\155" +
    "\070\145\071\144\072\157\075\uff88\077\uff88\104\uff88\106" +
    "\uff88\107\uff88\001\002\000\104\002\uffa3\004\uffa3\006\uffa3" +
    "\007\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\040" +
    "\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\075\uffa3" +
    "\077\uffa3\104\uffa3\106\uffa3\107\uffa3\001\002\000\104\002" +
    "\uffa7\004\uffa7\006\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\075\uffa7\077\uffa7\104\uffa7\106\uffa7\107\uffa7" +
    "\001\002\000\036\041\025\042\014\043\040\044\013\045" +
    "\051\073\uff03\074\uff03\075\uff01\107\uff03\110\uff03\111\uff03" +
    "\112\uff03\113\uff03\114\uff03\001\002\000\004\075\u0115\001" +
    "\002\000\022\073\343\074\346\107\350\110\342\111\352" +
    "\112\347\113\351\114\344\001\002\000\004\107\335\001" +
    "\002\000\006\075\uff05\104\uff05\001\002\000\006\075\ufeff" +
    "\104\337\001\002\000\036\041\025\042\014\043\040\044" +
    "\013\045\051\073\uff03\074\uff03\075\uff01\107\uff03\110\uff03" +
    "\111\uff03\112\uff03\113\uff03\114\uff03\001\002\000\004\075" +
    "\uff04\001\002\000\004\075\uff00\001\002\000\052\051\ufef6" +
    "\052\ufef6\053\ufef6\054\ufef6\055\ufef6\056\ufef6\057\ufef6\060" +
    "\ufef6\061\ufef6\062\ufef6\064\ufef6\065\ufef6\066\ufef6\067\ufef6" +
    "\070\ufef6\071\ufef6\072\ufef6\075\ufef6\077\ufef6\104\ufef6\001" +
    "\002\000\022\073\ufeeb\074\ufeeb\107\ufeeb\110\ufeeb\111\ufeeb" +
    "\112\ufeeb\113\ufeeb\114\ufeeb\001\002\000\052\051\ufef0\052" +
    "\ufef0\053\ufef0\054\ufef0\055\ufef0\056\ufef0\057\ufef0\060\ufef0" +
    "\061\ufef0\062\ufef0\064\ufef0\065\ufef0\066\ufef0\067\ufef0\070" +
    "\ufef0\071\ufef0\072\ufef0\075\ufef0\077\ufef0\104\ufef0\001\002" +
    "\000\006\075\ufeff\104\337\001\002\000\022\073\ufeee\074" +
    "\ufeee\107\ufeee\110\ufeee\111\ufeee\112\ufeee\113\ufeee\114\ufeee" +
    "\001\002\000\052\051\ufef8\052\ufef8\053\ufef8\054\ufef8\055" +
    "\ufef8\056\ufef8\057\ufef8\060\ufef8\061\ufef8\062\ufef8\064\ufef8" +
    "\065\ufef8\066\ufef8\067\ufef8\070\ufef8\071\ufef8\072\ufef8\075" +
    "\ufef8\077\ufef8\104\ufef8\001\002\000\054\051\ufefe\052\ufefe" +
    "\053\ufefe\054\ufefe\055\ufefe\056\ufefe\057\ufefe\060\ufefe\061" +
    "\ufefe\062\ufefe\064\ufefe\065\ufefe\066\ufefe\067\ufefe\070\ufefe" +
    "\071\ufefe\072\ufefe\075\ufefe\076\370\077\ufefe\104\ufefe\001" +
    "\002\000\052\051\ufef2\052\ufef2\053\ufef2\054\ufef2\055\ufef2" +
    "\056\ufef2\057\ufef2\060\ufef2\061\ufef2\062\ufef2\064\ufef2\065" +
    "\ufef2\066\ufef2\067\ufef2\070\ufef2\071\ufef2\072\ufef2\075\ufef2" +
    "\077\ufef2\104\ufef2\001\002\000\052\051\ufef4\052\ufef4\053" +
    "\ufef4\054\ufef4\055\ufef4\056\ufef4\057\ufef4\060\ufef4\061\ufef4" +
    "\062\ufef4\064\ufef4\065\ufef4\066\ufef4\067\ufef4\070\ufef4\071" +
    "\ufef4\072\ufef4\075\ufef4\077\ufef4\104\ufef4\001\002\000\052" +
    "\051\107\052\102\053\104\054\110\055\105\056\103\057" +
    "\152\060\151\061\146\062\154\064\147\065\150\066\153" +
    "\067\155\070\145\071\144\072\157\075\ufedf\077\ufedf\104" +
    "\ufedf\001\002\000\022\073\ufee5\074\ufee5\107\ufee5\110\ufee5" +
    "\111\ufee5\112\ufee5\113\ufee5\114\ufee5\001\002\000\022\073" +
    "\ufee1\074\ufee1\107\ufee1\110\ufee1\111\ufee1\112\ufee1\113\ufee1" +
    "\114\ufee1\001\002\000\022\073\ufee3\074\ufee3\107\ufee3\110" +
    "\ufee3\111\ufee3\112\ufee3\113\ufee3\114\ufee3\001\002\000\010" +
    "\075\ufef3\077\ufef3\104\ufef3\001\002\000\022\073\343\074" +
    "\346\107\350\110\342\111\352\112\347\113\351\114\344" +
    "\001\002\000\010\075\ufee2\077\ufee2\104\ufee2\001\002\000" +
    "\022\073\343\074\346\107\350\110\342\111\352\112\347" +
    "\113\351\114\344\001\002\000\010\075\ufee0\077\ufee0\104" +
    "\ufee0\001\002\000\022\073\343\074\346\107\350\110\342" +
    "\111\352\112\347\113\351\114\344\001\002\000\010\075" +
    "\ufee4\077\ufee4\104\ufee4\001\002\000\052\051\107\052\102" +
    "\053\104\054\110\055\105\056\103\057\152\060\151\061" +
    "\146\062\154\064\147\065\150\066\153\067\155\070\145" +
    "\071\144\072\157\075\ufedf\077\ufedf\104\ufedf\001\002\000" +
    "\010\075\ufef1\077\ufef1\104\ufef1\001\002\000\022\073\ufefc" +
    "\074\ufefc\107\ufefc\110\ufefc\111\ufefc\112\ufefc\113\ufefc\114" +
    "\ufefc\001\002\000\052\051\107\052\102\053\104\054\110" +
    "\055\105\056\103\057\152\060\151\061\146\062\154\064" +
    "\147\065\150\066\153\067\155\070\145\071\144\072\157" +
    "\075\ufedf\077\ufedf\104\ufedf\001\002\000\010\075\ufefd\077" +
    "\ufefd\104\ufefd\001\002\000\022\073\343\074\346\107\350" +
    "\110\342\111\352\112\347\113\351\114\344\001\002\000" +
    "\004\077\ufefb\001\002\000\004\077\376\001\002\000\054" +
    "\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055\ufee6\056\ufee6\057" +
    "\ufee6\060\ufee6\061\ufee6\062\ufee6\064\ufee6\065\ufee6\066\ufee6" +
    "\067\ufee6\070\ufee6\071\ufee6\072\ufee6\075\ufee6\076\u0100\077" +
    "\ufee6\104\ufee6\001\002\000\052\051\ufefa\052\ufefa\053\ufefa" +
    "\054\ufefa\055\ufefa\056\ufefa\057\ufefa\060\ufefa\061\ufefa\062" +
    "\ufefa\064\ufefa\065\ufefa\066\ufefa\067\ufefa\070\ufefa\071\ufefa" +
    "\072\ufefa\075\ufefa\077\ufefa\104\ufefa\001\002\000\022\073" +
    "\ufee9\074\ufee9\107\ufee9\110\ufee9\111\ufee9\112\ufee9\113\ufee9" +
    "\114\ufee9\001\002\000\022\073\343\074\346\107\350\110" +
    "\342\111\352\112\347\113\351\114\344\001\002\000\004" +
    "\077\ufee8\001\002\000\004\077\u0104\001\002\000\052\051" +
    "\ufee7\052\ufee7\053\ufee7\054\ufee7\055\ufee7\056\ufee7\057\ufee7" +
    "\060\ufee7\061\ufee7\062\ufee7\064\ufee7\065\ufee7\066\ufee7\067" +
    "\ufee7\070\ufee7\071\ufee7\072\ufee7\075\ufee7\077\ufee7\104\ufee7" +
    "\001\002\000\052\051\107\052\102\053\104\054\110\055" +
    "\105\056\103\057\152\060\151\061\146\062\154\064\147" +
    "\065\150\066\153\067\155\070\145\071\144\072\157\075" +
    "\ufedf\077\ufedf\104\ufedf\001\002\000\010\075\ufef9\077\ufef9" +
    "\104\ufef9\001\002\000\052\051\107\052\102\053\104\054" +
    "\110\055\105\056\103\057\152\060\151\061\146\062\154" +
    "\064\147\065\150\066\153\067\155\070\145\071\144\072" +
    "\157\075\ufedf\077\ufedf\104\ufedf\001\002\000\010\075\ufef7" +
    "\077\ufef7\104\ufef7\001\002\000\022\073\343\074\346\107" +
    "\350\110\342\111\352\112\347\113\351\114\344\001\002" +
    "\000\004\075\u010b\001\002\000\052\051\ufeed\052\ufeed\053" +
    "\ufeed\054\ufeed\055\ufeed\056\ufeed\057\ufeed\060\ufeed\061\ufeed" +
    "\062\ufeed\064\ufeed\065\ufeed\066\ufeed\067\ufeed\070\ufeed\071" +
    "\ufeed\072\ufeed\075\ufeed\077\ufeed\104\ufeed\001\002\000\052" +
    "\051\107\052\102\053\104\054\110\055\105\056\103\057" +
    "\152\060\151\061\146\062\154\064\147\065\150\066\153" +
    "\067\155\070\145\071\144\072\157\075\ufedf\077\ufedf\104" +
    "\ufedf\001\002\000\010\075\ufeec\077\ufeec\104\ufeec\001\002" +
    "\000\004\075\uff02\001\002\000\052\051\107\052\102\053" +
    "\104\054\110\055\105\056\103\057\152\060\151\061\146" +
    "\062\154\064\147\065\150\066\153\067\155\070\145\071" +
    "\144\072\157\075\ufedf\077\ufedf\104\ufedf\001\002\000\010" +
    "\075\ufeef\077\ufeef\104\ufeef\001\002\000\022\073\343\074" +
    "\346\107\350\110\342\111\352\112\347\113\351\114\344" +
    "\001\002\000\010\075\ufeea\077\ufeea\104\ufeea\001\002\000" +
    "\052\051\107\052\102\053\104\054\110\055\105\056\103" +
    "\057\152\060\151\061\146\062\154\064\147\065\150\066" +
    "\153\067\155\070\145\071\144\072\157\075\ufedf\077\ufedf" +
    "\104\ufedf\001\002\000\010\075\ufef5\077\ufef5\104\ufef5\001" +
    "\002\000\104\002\uff0d\004\uff0d\006\uff0d\007\uff0d\011\uff0d" +
    "\012\uff0d\013\uff0d\014\uff0d\015\uff0d\016\uff0d\017\uff0d\020" +
    "\uff0d\021\uff0d\022\uff0d\023\uff0d\024\uff0d\025\uff0d\026\uff0d" +
    "\027\uff0d\030\uff0d\031\uff0d\032\uff0d\040\uff0d\041\uff0d\042" +
    "\uff0d\043\uff0d\044\uff0d\045\uff0d\075\uff0d\077\uff0d\104\uff0d" +
    "\106\uff0d\107\uff0d\001\002\000\004\074\u0117\001\002\000" +
    "\036\041\025\042\014\043\040\044\013\045\051\073\uff03" +
    "\074\uff03\075\uff01\107\uff03\110\uff03\111\uff03\112\uff03\113" +
    "\uff03\114\uff03\001\002\000\004\075\u0119\001\002\000\104" +
    "\002\uff06\004\uff06\006\uff06\007\uff06\011\uff06\012\uff06\013" +
    "\uff06\014\uff06\015\uff06\016\uff06\017\uff06\020\uff06\021\uff06" +
    "\022\uff06\023\uff06\024\uff06\025\uff06\026\uff06\027\uff06\030" +
    "\uff06\031\uff06\032\uff06\040\uff06\041\uff06\042\uff06\043\uff06" +
    "\044\uff06\045\uff06\075\uff06\077\uff06\104\uff06\106\uff06\107" +
    "\uff06\001\002\000\146\002\uff88\004\uff88\006\uff88\007\uff88" +
    "\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88" +
    "\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\044\uff88\045\uff88\051\107\052\102" +
    "\053\104\054\110\055\105\056\103\057\152\060\151\061" +
    "\146\062\154\064\147\065\150\066\153\067\155\070\145" +
    "\071\144\072\157\075\uff88\077\uff88\104\uff88\106\uff88\107" +
    "\uff88\001\002\000\104\002\uffa1\004\uffa1\006\uffa1\007\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\075\uffa1\077\uffa1" +
    "\104\uffa1\106\uffa1\107\uffa1\001\002\000\030\025\263\027" +
    "\264\030\267\073\260\074\265\107\270\110\257\111\273" +
    "\112\266\113\271\114\261\001\002\000\004\075\u011e\001" +
    "\002\000\146\002\uff97\004\uff97\006\uff97\007\uff97\011\uff97" +
    "\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97" +
    "\027\uff97\030\uff97\031\uff97\032\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\051\uff97\052\uff97\053\uff97" +
    "\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062" +
    "\uff97\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97\071\uff97" +
    "\072\uff97\075\uff97\077\uff97\104\uff97\106\uff97\107\uff97\001" +
    "\002\000\146\002\uff88\004\uff88\006\uff88\007\uff88\011\uff88" +
    "\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020" +
    "\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\040\uff88\041\uff88\042" +
    "\uff88\043\uff88\044\uff88\045\uff88\051\107\052\102\053\104" +
    "\054\110\055\105\056\103\057\152\060\151\061\146\062" +
    "\154\064\147\065\150\066\153\067\155\070\145\071\144" +
    "\072\157\075\uff88\077\uff88\104\uff88\106\uff88\107\uff88\001" +
    "\002\000\104\002\uff96\004\uff96\006\uff96\007\uff96\011\uff96" +
    "\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96" +
    "\027\uff96\030\uff96\031\uff96\032\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\075\uff96\077\uff96\104\uff96" +
    "\106\uff96\107\uff96\001\002\000\004\074\u0122\001\002\000" +
    "\036\041\025\042\014\043\040\044\013\045\051\073\uff03" +
    "\074\uff03\075\uff01\107\uff03\110\uff03\111\uff03\112\uff03\113" +
    "\uff03\114\uff03\001\002\000\004\075\u0124\001\002\000\104" +
    "\002\uff08\004\uff08\006\uff08\007\uff08\011\uff08\012\uff08\013" +
    "\uff08\014\uff08\015\uff08\016\uff08\017\uff08\020\uff08\021\uff08" +
    "\022\uff08\023\uff08\024\uff08\025\uff08\026\uff08\027\uff08\030" +
    "\uff08\031\uff08\032\uff08\040\uff08\041\uff08\042\uff08\043\uff08" +
    "\044\uff08\045\uff08\075\uff08\077\uff08\104\uff08\106\uff08\107" +
    "\uff08\001\002\000\004\074\u0126\001\002\000\004\115\u0127" +
    "\001\002\000\004\104\uff0b\001\002\000\004\104\u0129\001" +
    "\002\000\036\041\025\042\014\043\040\044\013\045\051" +
    "\073\uff03\074\uff03\075\uff01\107\uff03\110\uff03\111\uff03\112" +
    "\uff03\113\uff03\114\uff03\001\002\000\004\075\u012b\001\002" +
    "\000\104\002\uff0a\004\uff0a\006\uff0a\007\uff0a\011\uff0a\012" +
    "\uff0a\013\uff0a\014\uff0a\015\uff0a\016\uff0a\017\uff0a\020\uff0a" +
    "\021\uff0a\022\uff0a\023\uff0a\024\uff0a\025\uff0a\026\uff0a\027" +
    "\uff0a\030\uff0a\031\uff0a\032\uff0a\040\uff0a\041\uff0a\042\uff0a" +
    "\043\uff0a\044\uff0a\045\uff0a\075\uff0a\077\uff0a\104\uff0a\106" +
    "\uff0a\107\uff0a\001\002\000\044\025\uff5f\027\uff5f\030\uff5f" +
    "\041\025\042\014\043\040\044\013\045\051\073\uff5f\074" +
    "\uff5f\075\uff5d\107\uff5f\110\uff5f\111\uff5f\112\uff5f\113\uff5f" +
    "\114\uff5f\001\002\000\004\075\uff5e\001\002\000\004\075" +
    "\uff5c\001\002\000\146\002\uff88\004\uff88\006\uff88\007\uff88" +
    "\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88" +
    "\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\044\uff88\045\uff88\051\107\052\102" +
    "\053\104\054\110\055\105\056\103\057\152\060\151\061" +
    "\146\062\154\064\147\065\150\066\153\067\155\070\145" +
    "\071\144\072\157\075\uff88\077\uff88\104\uff88\106\uff88\107" +
    "\uff88\001\002\000\104\002\uff99\004\uff99\006\uff99\007\uff99" +
    "\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\075\uff99\077\uff99" +
    "\104\uff99\106\uff99\107\uff99\001\002\000\030\025\263\027" +
    "\264\030\267\073\260\074\265\107\270\110\257\111\273" +
    "\112\266\113\271\114\261\001\002\000\104\002\uff94\004" +
    "\uff94\006\uff94\007\uff94\011\uff94\012\uff94\013\uff94\014\uff94" +
    "\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045" +
    "\uff94\075\uff94\077\uff94\104\uff94\106\uff94\107\uff94\001\002" +
    "\000\146\002\uff88\004\uff88\006\uff88\007\uff88\011\uff88\012" +
    "\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\040\uff88\041\uff88\042\uff88" +
    "\043\uff88\044\uff88\045\uff88\051\107\052\102\053\104\054" +
    "\110\055\105\056\103\057\152\060\151\061\146\062\154" +
    "\064\147\065\150\066\153\067\155\070\145\071\144\072" +
    "\157\075\uff88\077\uff88\104\uff88\106\uff88\107\uff88\001\002" +
    "\000\104\002\uff9f\004\uff9f\006\uff9f\007\uff9f\011\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\075\uff9f\077\uff9f\104\uff9f\106" +
    "\uff9f\107\uff9f\001\002\000\006\075\uff61\104\uff61\001\002" +
    "\000\006\075\uff5b\104\u012c\001\002\000\004\075\uff60\001" +
    "\002\000\076\002\uff1d\004\uff1d\006\uff1d\007\uff1d\011\uff1d" +
    "\012\uff1d\013\uff1d\014\uff1d\015\uff1d\016\uff1d\017\uff1d\020" +
    "\uff1d\021\uff1d\022\uff1d\023\uff1d\024\uff1d\025\uff1d\026\uff1d" +
    "\027\uff1d\030\uff1d\031\uff1d\032\uff1d\040\uff1d\041\uff1d\042" +
    "\uff1d\043\uff1d\044\uff1d\045\uff1d\106\uff1d\107\uff1d\001\002" +
    "\000\004\074\u013a\001\002\000\044\025\uff5f\027\uff5f\030" +
    "\uff5f\041\025\042\014\043\040\044\013\045\051\073\uff5f" +
    "\074\uff5f\075\uff5d\107\uff5f\110\uff5f\111\uff5f\112\uff5f\113" +
    "\uff5f\114\uff5f\001\002\000\004\075\u013c\001\002\000\076" +
    "\002\uff26\004\uff26\006\uff26\007\uff26\011\uff26\012\uff26\013" +
    "\uff26\014\uff26\015\uff26\016\uff26\017\uff26\020\uff26\021\uff26" +
    "\022\uff26\023\uff26\024\uff26\025\uff26\026\uff26\027\uff26\030" +
    "\uff26\031\uff26\032\uff26\040\uff26\041\uff26\042\uff26\043\uff26" +
    "\044\uff26\045\uff26\106\uff26\107\uff26\001\002\000\076\002" +
    "\uffe6\004\022\006\026\007\uffdb\011\011\012\020\013\053" +
    "\014\037\015\004\016\015\017\046\020\052\021\021\022" +
    "\047\023\024\024\033\025\032\026\050\027\045\030\043" +
    "\031\007\032\017\040\031\041\025\042\014\043\040\044" +
    "\013\045\051\106\034\107\030\001\002\000\004\002\ufff1" +
    "\001\002\000\004\074\u0140\001\002\000\044\025\uff5f\027" +
    "\uff5f\030\uff5f\041\025\042\014\043\040\044\013\045\051" +
    "\073\uff5f\074\uff5f\075\uff5d\107\uff5f\110\uff5f\111\uff5f\112" +
    "\uff5f\113\uff5f\114\uff5f\001\002\000\004\075\u0142\001\002" +
    "\000\076\002\uff24\004\uff24\006\uff24\007\uff24\011\uff24\012" +
    "\uff24\013\uff24\014\uff24\015\uff24\016\uff24\017\uff24\020\uff24" +
    "\021\uff24\022\uff24\023\uff24\024\uff24\025\uff24\026\uff24\027" +
    "\uff24\030\uff24\031\uff24\032\uff24\040\uff24\041\uff24\042\uff24" +
    "\043\uff24\044\uff24\045\uff24\106\uff24\107\uff24\001\002\000" +
    "\076\002\uffe6\004\022\006\026\007\uffdb\011\011\012\020" +
    "\013\053\014\037\015\004\016\015\017\046\020\052\021" +
    "\021\022\047\023\024\024\033\025\032\026\050\027\045" +
    "\030\043\031\007\032\017\040\031\041\025\042\014\043" +
    "\040\044\013\045\051\106\034\107\030\001\002\000\004" +
    "\002\uffef\001\002\000\076\002\uffe6\004\022\006\026\007" +
    "\uffdb\011\011\012\020\013\053\014\037\015\004\016\015" +
    "\017\046\020\052\021\021\022\047\023\024\024\033\025" +
    "\032\026\050\027\045\030\043\031\007\032\017\040\031" +
    "\041\025\042\014\043\040\044\013\045\051\106\034\107" +
    "\030\001\002\000\004\002\uffe9\001\002\000\004\074\u0148" +
    "\001\002\000\022\073\071\074\074\107\076\110\070\111" +
    "\100\112\075\113\077\114\072\001\002\000\004\075\u014a" +
    "\001\002\000\076\002\uff15\004\uff15\006\uff15\007\uff15\011" +
    "\uff15\012\uff15\013\uff15\014\uff15\015\uff15\016\uff15\017\uff15" +
    "\020\uff15\021\uff15\022\uff15\023\uff15\024\uff15\025\uff15\026" +
    "\uff15\027\uff15\030\uff15\031\uff15\032\uff15\040\uff15\041\uff15" +
    "\042\uff15\043\uff15\044\uff15\045\uff15\106\uff15\107\uff15\001" +
    "\002\000\076\002\uffe6\004\022\006\026\007\uffdb\011\011" +
    "\012\020\013\053\014\037\015\004\016\015\017\046\020" +
    "\052\021\021\022\047\023\024\024\033\025\032\026\050" +
    "\027\045\030\043\031\007\032\017\040\031\041\025\042" +
    "\014\043\040\044\013\045\051\106\034\107\030\001\002" +
    "\000\004\002\ufff3\001\002\000\076\002\uffe6\004\022\006" +
    "\026\007\uffdb\011\011\012\020\013\053\014\037\015\004" +
    "\016\015\017\046\020\052\021\021\022\047\023\024\024" +
    "\033\025\032\026\050\027\045\030\043\031\007\032\017" +
    "\040\031\041\025\042\014\043\040\044\013\045\051\106" +
    "\034\107\030\001\002\000\004\002\ufff5\001\002\000\076" +
    "\002\uffe6\004\022\006\026\007\uffdb\011\011\012\020\013" +
    "\053\014\037\015\004\016\015\017\046\020\052\021\021" +
    "\022\047\023\024\024\033\025\032\026\050\027\045\030" +
    "\043\031\007\032\017\040\031\041\025\042\014\043\040" +
    "\044\013\045\051\106\034\107\030\001\002\000\004\002" +
    "\uffff\001\002\000\030\025\263\027\264\030\267\073\260" +
    "\074\265\107\270\110\257\111\273\112\266\113\271\114" +
    "\261\001\002\000\076\002\uff1b\004\uff1b\006\uff1b\007\uff1b" +
    "\011\uff1b\012\uff1b\013\uff1b\014\uff1b\015\uff1b\016\uff1b\017" +
    "\uff1b\020\uff1b\021\uff1b\022\uff1b\023\uff1b\024\uff1b\025\uff1b" +
    "\026\uff1b\027\uff1b\030\uff1b\031\uff1b\032\uff1b\040\uff1b\041" +
    "\uff1b\042\uff1b\043\uff1b\044\uff1b\045\uff1b\106\uff1b\107\uff1b" +
    "\001\002\000\004\074\u0154\001\002\000\004\115\u0155\001" +
    "\002\000\004\104\uff20\001\002\000\004\104\u0157\001\002" +
    "\000\044\025\uff5f\027\uff5f\030\uff5f\041\025\042\014\043" +
    "\040\044\013\045\051\073\uff5f\074\uff5f\075\uff5d\107\uff5f" +
    "\110\uff5f\111\uff5f\112\uff5f\113\uff5f\114\uff5f\001\002\000" +
    "\004\075\u0159\001\002\000\076\002\uff1f\004\uff1f\006\uff1f" +
    "\007\uff1f\011\uff1f\012\uff1f\013\uff1f\014\uff1f\015\uff1f\016" +
    "\uff1f\017\uff1f\020\uff1f\021\uff1f\022\uff1f\023\uff1f\024\uff1f" +
    "\025\uff1f\026\uff1f\027\uff1f\030\uff1f\031\uff1f\032\uff1f\040" +
    "\uff1f\041\uff1f\042\uff1f\043\uff1f\044\uff1f\045\uff1f\106\uff1f" +
    "\107\uff1f\001\002\000\004\074\u016c\001\002\000\076\002" +
    "\uff10\004\uff10\006\uff10\007\uff10\011\uff10\012\uff10\013\uff10" +
    "\014\uff10\015\uff10\016\uff10\017\uff10\020\uff10\021\uff10\022" +
    "\uff10\023\uff10\024\uff10\025\uff10\026\uff10\027\uff10\030\uff10" +
    "\031\uff10\032\uff10\040\uff10\041\uff10\042\uff10\043\uff10\044" +
    "\uff10\045\uff10\106\uff10\107\uff10\001\002\000\004\076\u0164" +
    "\001\002\000\076\002\uff0f\004\uff0f\006\uff0f\007\uff0f\011" +
    "\uff0f\012\uff0f\013\uff0f\014\uff0f\015\uff0f\016\uff0f\017\uff0f" +
    "\020\uff0f\021\uff0f\022\uff0f\023\uff0f\024\uff0f\025\uff0f\026" +
    "\uff0f\027\uff0f\030\uff0f\031\uff0f\032\uff0f\040\uff0f\041\uff0f" +
    "\042\uff0f\043\uff0f\044\uff0f\045\uff0f\106\uff0f\107\uff0f\001" +
    "\002\000\004\105\u0162\001\002\000\004\050\u0160\001\002" +
    "\000\030\025\263\027\264\030\267\073\260\074\265\107" +
    "\270\110\257\111\273\112\266\113\271\114\261\001\002" +
    "\000\076\002\uff72\004\uff72\006\uff72\007\uff72\011\uff72\012" +
    "\uff72\013\uff72\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72" +
    "\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72\027" +
    "\uff72\030\uff72\031\uff72\032\uff72\040\uff72\041\uff72\042\uff72" +
    "\043\uff72\044\uff72\045\uff72\106\uff72\107\uff72\001\002\000" +
    "\030\025\263\027\264\030\267\073\260\074\265\107\270" +
    "\110\257\111\273\112\266\113\271\114\261\001\002\000" +
    "\076\002\uff70\004\uff70\006\uff70\007\uff70\011\uff70\012\uff70" +
    "\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70\020\uff70\021" +
    "\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70" +
    "\030\uff70\031\uff70\032\uff70\040\uff70\041\uff70\042\uff70\043" +
    "\uff70\044\uff70\045\uff70\106\uff70\107\uff70\001\002\000\022" +
    "\073\uff6e\074\uff6e\107\uff6e\110\uff6e\111\uff6e\112\uff6e\113" +
    "\uff6e\114\uff6e\001\002\000\022\073\071\074\074\107\076" +
    "\110\070\111\100\112\075\113\077\114\072\001\002\000" +
    "\004\077\uff6d\001\002\000\004\077\u0168\001\002\000\006" +
    "\076\243\105\uff68\001\002\000\004\105\u016a\001\002\000" +
    "\030\025\263\027\264\030\267\073\260\074\265\107\270" +
    "\110\257\111\273\112\266\113\271\114\261\001\002\000" +
    "\076\002\uff6c\004\uff6c\006\uff6c\007\uff6c\011\uff6c\012\uff6c" +
    "\013\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021" +
    "\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c" +
    "\030\uff6c\031\uff6c\032\uff6c\040\uff6c\041\uff6c\042\uff6c\043" +
    "\uff6c\044\uff6c\045\uff6c\106\uff6c\107\uff6c\001\002\000\044" +
    "\025\uff5f\027\uff5f\030\uff5f\041\025\042\014\043\040\044" +
    "\013\045\051\073\uff5f\074\uff5f\075\uff5d\107\uff5f\110\uff5f" +
    "\111\uff5f\112\uff5f\113\uff5f\114\uff5f\001\002\000\004\075" +
    "\u016e\001\002\000\076\002\uff62\004\uff62\006\uff62\007\uff62" +
    "\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62\016\uff62\017" +
    "\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024\uff62\025\uff62" +
    "\026\uff62\027\uff62\030\uff62\031\uff62\032\uff62\040\uff62\041" +
    "\uff62\042\uff62\043\uff62\044\uff62\045\uff62\106\uff62\107\uff62" +
    "\001\002\000\004\074\uff65\001\002\000\004\074\u0171\001" +
    "\002\000\044\025\uff5f\027\uff5f\030\uff5f\041\025\042\014" +
    "\043\040\044\013\045\051\073\uff5f\074\uff5f\075\uff5d\107" +
    "\uff5f\110\uff5f\111\uff5f\112\uff5f\113\uff5f\114\uff5f\001\002" +
    "\000\004\075\u0173\001\002\000\076\002\uff64\004\uff64\006" +
    "\uff64\007\uff64\011\uff64\012\uff64\013\uff64\014\uff64\015\uff64" +
    "\016\uff64\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024" +
    "\uff64\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64" +
    "\040\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\106" +
    "\uff64\107\uff64\001\002\000\004\074\uff18\001\002\000\004" +
    "\007\u017c\001\002\000\004\107\u0177\001\002\000\004\074" +
    "\uff67\001\002\000\004\074\u0179\001\002\000\044\025\uff5f" +
    "\027\uff5f\030\uff5f\041\025\042\014\043\040\044\013\045" +
    "\051\073\uff5f\074\uff5f\075\uff5d\107\uff5f\110\uff5f\111\uff5f" +
    "\112\uff5f\113\uff5f\114\uff5f\001\002\000\004\075\u017b\001" +
    "\002\000\076\002\uff66\004\uff66\006\uff66\007\uff66\011\uff66" +
    "\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66\017\uff66\020" +
    "\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66" +
    "\027\uff66\030\uff66\031\uff66\032\uff66\040\uff66\041\uff66\042" +
    "\uff66\043\uff66\044\uff66\045\uff66\106\uff66\107\uff66\001\002" +
    "\000\014\041\025\042\014\043\040\044\013\045\051\001" +
    "\002\000\076\002\uffdc\004\uffdc\006\uffdc\007\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\106\uffdc\107\uffdc\001\002" +
    "\000\006\010\u0180\107\u017f\001\002\000\102\002\uffd9\004" +
    "\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9\001\002\000\004" +
    "\107\u0181\001\002\000\006\076\uffd7\104\uffd7\001\002\000" +
    "\006\076\uffcc\104\u0183\001\002\000\004\107\u01a3\001\002" +
    "\000\004\076\u0185\001\002\000\022\073\uffd6\074\uffd6\107" +
    "\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\114\uffd6\001\002" +
    "\000\022\073\071\074\074\107\076\110\070\111\100\112" +
    "\075\113\077\114\072\001\002\000\004\077\uffd5\001\002" +
    "\000\004\077\u0189\001\002\000\102\002\uffc8\004\uffc8\006" +
    "\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\076" +
    "\u018b\105\uffc8\106\uffc8\107\uffc8\001\002\000\100\002\uff7f" +
    "\004\uff7f\006\uff7f\007\uff7f\011\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f" +
    "\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031" +
    "\uff7f\032\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f" +
    "\045\uff7f\105\u0191\106\uff7f\107\uff7f\001\002\000\022\073" +
    "\uffcb\074\uffcb\107\uffcb\110\uffcb\111\uffcb\112\uffcb\113\uffcb" +
    "\114\uffcb\001\002\000\022\073\071\074\074\107\076\110" +
    "\070\111\100\112\075\113\077\114\072\001\002\000\004" +
    "\077\uffca\001\002\000\004\077\u018f\001\002\000\100\002" +
    "\uffc9\004\uffc9\006\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\105\uffc9\106\uffc9\107\uffc9\001\002\000\076" +
    "\002\uffd4\004\uffd4\006\uffd4\007\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\106\uffd4\107\uffd4\001\002\000\100\002" +
    "\uff81\004\uff81\006\uff81\007\uff81\011\uff81\012\uff81\013\uff81" +
    "\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022" +
    "\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81" +
    "\031\uff81\032\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044" +
    "\uff81\045\uff81\100\uff81\106\uff81\107\uff81\001\002\000\100" +
    "\002\uff7c\004\uff7c\006\uff7c\007\uff7c\011\uff7c\012\uff7c\013" +
    "\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c" +
    "\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030" +
    "\uff7c\031\uff7c\032\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\100\u0193\106\uff7c\107\uff7c\001\002\000" +
    "\030\073\uff7e\074\uff7e\100\uff7e\101\uff7e\104\uff7e\107\uff7e" +
    "\110\uff7e\111\uff7e\112\uff7e\113\uff7e\114\uff7e\001\002\000" +
    "\076\002\uff80\004\uff80\006\uff80\007\uff80\011\uff80\012\uff80" +
    "\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021" +
    "\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80" +
    "\030\uff80\031\uff80\032\uff80\040\uff80\041\uff80\042\uff80\043" +
    "\uff80\044\uff80\045\uff80\106\uff80\107\uff80\001\002\000\030" +
    "\073\uff7a\074\uff7a\100\u0193\101\uff7c\104\uff7c\107\uff7a\110" +
    "\uff7a\111\uff7a\112\uff7a\113\uff7a\114\uff7a\001\002\000\004" +
    "\101\u01a2\001\002\000\006\101\uff77\104\u019f\001\002\000" +
    "\022\073\071\074\074\107\076\110\070\111\100\112\075" +
    "\113\077\114\072\001\002\000\006\101\uff74\104\u019a\001" +
    "\002\000\022\073\uff76\074\uff76\107\uff76\110\uff76\111\uff76" +
    "\112\uff76\113\uff76\114\uff76\001\002\000\004\101\uff79\001" +
    "\002\000\022\073\071\074\074\107\076\110\070\111\100" +
    "\112\075\113\077\114\072\001\002\000\006\101\uff74\104" +
    "\u019a\001\002\000\004\101\uff75\001\002\000\006\100\u0193" +
    "\101\uff7c\001\002\000\004\101\uff7b\001\002\000\004\101" +
    "\uff78\001\002\000\102\002\uff7d\004\uff7d\006\uff7d\007\uff7d" +
    "\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\017" +
    "\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\101\uff7d\104\uff7d" +
    "\106\uff7d\107\uff7d\001\002\000\104\002\uffce\004\uffce\006" +
    "\uffce\007\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\076" +
    "\uffce\104\uffce\105\uffce\106\uffce\107\uffce\001\002\000\104" +
    "\002\uffcc\004\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\076\uffcc\104\u0183\105\uffcc\106\uffcc\107" +
    "\uffcc\001\002\000\102\002\uffcd\004\uffcd\006\uffcd\007\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\076\uffcd\105\uffcd" +
    "\106\uffcd\107\uffcd\001\002\000\102\002\uffcc\004\uffcc\006" +
    "\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\104" +
    "\u0183\105\uffcc\106\uffcc\107\uffcc\001\002\000\100\002\uffc5" +
    "\004\uffc5\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\105\u01a9\106\uffc5\107\uffc5\001\002\000\076\002" +
    "\uffd8\004\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\106\uffd8\107\uffd8\001\002\000\030\025\uffc7" +
    "\027\uffc7\030\uffc7\073\uffc7\074\uffc7\107\uffc7\110\uffc7\111" +
    "\uffc7\112\uffc7\113\uffc7\114\uffc7\001\002\000\030\025\263" +
    "\027\264\030\267\073\260\074\265\107\270\110\257\111" +
    "\273\112\266\113\271\114\261\001\002\000\076\002\uffc6" +
    "\004\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\106\uffc6\107\uffc6\001\002\000\004\074\u01ad\001" +
    "\002\000\004\075\u01ae\001\002\000\076\002\uff17\004\uff17" +
    "\006\uff17\007\uff17\011\uff17\012\uff17\013\uff17\014\uff17\015" +
    "\uff17\016\uff17\017\uff17\020\uff17\021\uff17\022\uff17\023\uff17" +
    "\024\uff17\025\uff17\026\uff17\027\uff17\030\uff17\031\uff17\032" +
    "\uff17\040\uff17\041\uff17\042\uff17\043\uff17\044\uff17\045\uff17" +
    "\106\uff17\107\uff17\001\002\000\076\002\uffda\004\uffda\006" +
    "\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\106" +
    "\uffda\107\uffda\001\002\000\100\002\uffe5\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\106\uffe5\107\uffe5\001\002\000\100\002\uffe1\004\uffe1\005" +
    "\u01b2\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\106\uffe1\107\uffe1\001\002\000\004\107\u01b4\001\002" +
    "\000\076\002\uffe4\004\uffe4\006\uffe4\007\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\106\uffe4\107\uffe4\001\002\000" +
    "\100\002\uffe3\004\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\104\uffe3\106\uffe3\107\uffe3\001\002" +
    "\000\100\002\uffde\004\uffde\006\uffde\007\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\104\u01b6\106\uffde\107\uffde\001" +
    "\002\000\004\107\u01b8\001\002\000\076\002\uffe2\004\uffe2" +
    "\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\106\uffe2\107\uffe2\001\002\000\100\002\uffe0\004\uffe0\006" +
    "\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\104" +
    "\uffe0\106\uffe0\107\uffe0\001\002\000\100\002\uffde\004\uffde" +
    "\006\uffde\007\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\104\u01b6\106\uffde\107\uffde\001\002\000\076\002\uffdf\004" +
    "\uffdf\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\106\uffdf\107\uffdf\001\002\000\004\074\u01bc\001\002" +
    "\000\024\063\uff2b\073\uff2b\074\uff2b\107\uff2b\110\uff2b\111" +
    "\uff2b\112\uff2b\113\uff2b\114\uff2b\001\002\000\024\063\065" +
    "\073\uff4b\074\uff4b\107\uff4b\110\uff4b\111\uff4b\112\uff4b\113" +
    "\uff4b\114\uff4b\001\002\000\004\075\u01bf\001\002\000\076" +
    "\002\uff2a\004\uff2a\006\uff2a\007\uff2a\011\uff2a\012\uff2a\013" +
    "\uff2a\014\uff2a\015\uff2a\016\uff2a\017\uff2a\020\uff2a\021\uff2a" +
    "\022\uff2a\023\uff2a\024\uff2a\025\uff2a\026\uff2a\027\uff2a\030" +
    "\uff2a\031\uff2a\032\uff2a\040\uff2a\041\uff2a\042\uff2a\043\uff2a" +
    "\044\uff2a\045\uff2a\106\uff2a\107\uff2a\001\002\000\004\074" +
    "\u01c1\001\002\000\004\075\u01c2\001\002\000\076\002\uff19" +
    "\004\uff19\006\uff19\007\uff19\011\uff19\012\uff19\013\uff19\014" +
    "\uff19\015\uff19\016\uff19\017\uff19\020\uff19\021\uff19\022\uff19" +
    "\023\uff19\024\uff19\025\uff19\026\uff19\027\uff19\030\uff19\031" +
    "\uff19\032\uff19\040\uff19\041\uff19\042\uff19\043\uff19\044\uff19" +
    "\045\uff19\106\uff19\107\uff19\001\002\000\004\002\001\001" +
    "\002\000\076\002\uffe6\004\022\006\026\007\uffdb\011\011" +
    "\012\020\013\053\014\037\015\004\016\015\017\046\020" +
    "\052\021\021\022\047\023\024\024\033\025\032\026\050" +
    "\027\045\030\043\031\007\032\017\040\031\041\025\042" +
    "\014\043\040\044\013\045\051\106\034\107\030\001\002" +
    "\000\004\002\ufffd\001\002\000\076\002\uffe6\004\022\006" +
    "\026\007\uffdb\011\011\012\020\013\053\014\037\015\004" +
    "\016\015\017\046\020\052\021\021\022\047\023\024\024" +
    "\033\025\032\026\050\027\045\030\043\031\007\032\017" +
    "\040\031\041\025\042\014\043\040\044\013\045\051\106" +
    "\034\107\030\001\002\000\004\002\ufff7\001\002\000\024" +
    "\063\uff5a\073\uff5a\074\uff5a\107\uff5a\110\uff5a\111\uff5a\112" +
    "\uff5a\113\uff5a\114\uff5a\001\002\000\024\063\065\073\uff4b" +
    "\074\uff4b\107\uff4b\110\uff4b\111\uff4b\112\uff4b\113\uff4b\114" +
    "\uff4b\001\002\000\004\075\u01cb\001\002\000\076\002\uff59" +
    "\004\uff59\006\uff59\007\uff59\011\uff59\012\uff59\013\uff59\014" +
    "\uff59\015\uff59\016\uff59\017\uff59\020\uff59\021\uff59\022\uff59" +
    "\023\uff59\024\uff59\025\uff59\026\uff59\027\uff59\030\uff59\031" +
    "\uff59\032\uff59\040\uff59\041\uff59\042\uff59\043\uff59\044\uff59" +
    "\045\uff59\106\uff59\107\uff59\001\002\000\076\002\uffe6\004" +
    "\022\006\026\007\uffdb\011\011\012\020\013\053\014\037" +
    "\015\004\016\015\017\046\020\052\021\021\022\047\023" +
    "\024\024\033\025\032\026\050\027\045\030\043\031\007" +
    "\032\017\040\031\041\025\042\014\043\040\044\013\045" +
    "\051\106\034\107\030\001\002\000\004\002\uffe7\001\002" +
    "\000\004\074\u01cf\001\002\000\044\025\uff5f\027\uff5f\030" +
    "\uff5f\041\025\042\014\043\040\044\013\045\051\073\uff5f" +
    "\074\uff5f\075\uff5d\107\uff5f\110\uff5f\111\uff5f\112\uff5f\113" +
    "\uff5f\114\uff5f\001\002\000\004\075\u01d1\001\002\000\076" +
    "\002\uff22\004\uff22\006\uff22\007\uff22\011\uff22\012\uff22\013" +
    "\uff22\014\uff22\015\uff22\016\uff22\017\uff22\020\uff22\021\uff22" +
    "\022\uff22\023\uff22\024\uff22\025\uff22\026\uff22\027\uff22\030" +
    "\uff22\031\uff22\032\uff22\040\uff22\041\uff22\042\uff22\043\uff22" +
    "\044\uff22\045\uff22\106\uff22\107\uff22\001\002\000\076\002" +
    "\uffe6\004\022\006\026\007\uffdb\011\011\012\020\013\053" +
    "\014\037\015\004\016\015\017\046\020\052\021\021\022" +
    "\047\023\024\024\033\025\032\026\050\027\045\030\043" +
    "\031\007\032\017\040\031\041\025\042\014\043\040\044" +
    "\013\045\051\106\034\107\030\001\002\000\004\002\uffed" +
    "\001\002\000\076\002\uffe6\004\022\006\026\007\uffdb\011" +
    "\011\012\020\013\053\014\037\015\004\016\015\017\046" +
    "\020\052\021\021\022\047\023\024\024\033\025\032\026" +
    "\050\027\045\030\043\031\007\032\017\040\031\041\025" +
    "\042\014\043\040\044\013\045\051\106\034\107\030\001" +
    "\002\000\004\002\uffeb\001\002\000\022\073\071\074\074" +
    "\107\076\110\070\111\100\112\075\113\077\114\072\001" +
    "\002\000\076\002\uff13\004\uff13\006\uff13\007\uff13\011\uff13" +
    "\012\uff13\013\uff13\014\uff13\015\uff13\016\uff13\017\uff13\020" +
    "\uff13\021\uff13\022\uff13\023\uff13\024\uff13\025\uff13\026\uff13" +
    "\027\uff13\030\uff13\031\uff13\032\uff13\040\uff13\041\uff13\042" +
    "\uff13\043\uff13\044\uff13\045\uff13\106\uff13\107\uff13\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d5\000\036\002\015\003\054\006\053\013\026\025" +
    "\011\027\034\032\035\040\043\043\041\044\005\045\004" +
    "\046\040\052\007\103\022\001\001\000\004\231\u01d5\001" +
    "\001\000\004\074\u01d3\001\001\000\004\073\u01d1\001\001" +
    "\000\004\221\u01cd\001\001\000\004\076\u01cb\001\001\000" +
    "\002\001\001\000\004\066\u01c5\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\u01c3\001\001\000\002\001" +
    "\001\000\004\226\u01bf\001\001\000\002\001\001\000\004" +
    "\215\u01ba\001\001\000\002\001\001\000\004\007\u01ae\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\u0175" +
    "\102\u0174\001\001\000\002\001\001\000\012\160\u015e\161" +
    "\u015d\162\u015b\171\u0159\001\001\000\002\001\001\000\004" +
    "\222\u0152\001\001\000\004\225\u0150\001\001\000\004\062" +
    "\u014e\001\001\000\004\067\u014c\001\001\000\004\070\u014a" +
    "\001\001\000\004\230\u0146\001\001\000\002\001\001\000" +
    "\004\075\u0144\001\001\000\004\072\u0142\001\001\000\004" +
    "\220\u013e\001\001\000\004\071\u013c\001\001\000\004\217" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\224\251\001\001\000\002\001\001\000\004\205\205\001" +
    "\001\000\002\001\001\000\004\065\057\001\001\000\004" +
    "\064\055\001\001\000\036\002\056\003\054\006\053\013" +
    "\026\025\011\027\034\032\035\040\043\043\041\044\005" +
    "\045\004\046\040\052\007\103\022\001\001\000\002\001" +
    "\001\000\036\002\060\003\054\006\053\013\026\025\011" +
    "\027\034\032\035\040\043\043\041\044\005\045\004\046" +
    "\040\052\007\103\022\001\001\000\002\001\001\000\004" +
    "\175\062\001\001\000\006\033\065\037\063\001\001\000" +
    "\004\012\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\203\001\001\000\004\127" +
    "\201\001\001\000\004\124\177\001\001\000\006\034\157" +
    "\036\155\001\001\000\004\125\136\001\001\000\004\120" +
    "\134\001\001\000\004\114\116\001\001\000\004\123\113" +
    "\001\001\000\004\122\100\001\001\000\006\014\105\016" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\132\111\001\001\000\004" +
    "\012\112\001\001\000\002\001\001\000\006\014\114\016" +
    "\110\001\001\000\002\001\001\000\004\115\120\001\001" +
    "\000\006\014\117\016\110\001\001\000\002\001\001\000" +
    "\004\012\121\001\001\000\004\116\122\001\001\000\002" +
    "\001\001\000\004\024\124\001\001\000\004\117\132\001" +
    "\001\000\004\130\126\001\001\000\004\012\127\001\001" +
    "\000\004\131\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\133\016\110\001\001\000\002\001\001" +
    "\000\006\014\135\016\110\001\001\000\002\001\001\000" +
    "\004\012\137\001\001\000\002\001\001\000\004\126\141" +
    "\001\001\000\006\014\142\016\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\201\171\001\001\000\002\001\001\000" +
    "\004\176\160\001\001\000\004\037\161\001\001\000\004" +
    "\177\162\001\001\000\004\012\163\001\001\000\004\200" +
    "\164\001\001\000\006\035\165\036\166\001\001\000\002" +
    "\001\001\000\004\204\167\001\001\000\006\033\170\037" +
    "\063\001\001\000\002\001\001\000\004\037\172\001\001" +
    "\000\004\202\173\001\001\000\004\012\174\001\001\000" +
    "\004\203\175\001\001\000\006\035\176\036\166\001\001" +
    "\000\002\001\001\000\006\014\200\016\110\001\001\000" +
    "\002\001\001\000\004\012\202\001\001\000\002\001\001" +
    "\000\006\014\204\016\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\210\061\207\001\001\000\004" +
    "\042\212\001\001\000\002\001\001\000\010\210\227\211" +
    "\226\212\225\001\001\000\002\001\001\000\004\206\214" +
    "\001\001\000\006\033\215\037\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\221\001\001\000\002" +
    "\001\001\000\004\207\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\231\001\001\000" +
    "\002\001\001\000\004\012\233\001\001\000\002\001\001" +
    "\000\004\213\235\001\001\000\004\012\236\001\001\000" +
    "\004\214\237\001\001\000\002\001\001\000\004\026\241" +
    "\001\001\000\002\001\001\000\004\165\243\001\001\000" +
    "\004\012\244\001\001\000\004\166\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\254\030\253" +
    "\173\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\047\261\053\271\001\001\000\004\140\u0132\001\001" +
    "\000\004\146\u0130\001\001\000\004\143\u012e\001\001\000" +
    "\004\031\u012c\001\001\000\004\233\u0124\001\001\000\004" +
    "\235\u0120\001\001\000\004\144\u011b\001\001\000\004\137" +
    "\u0119\001\001\000\004\236\u0115\001\001\000\006\133\311" +
    "\232\310\001\001\000\004\142\306\001\001\000\002\001" +
    "\001\000\004\141\273\001\001\000\012\016\274\034\276" +
    "\036\275\051\277\001\001\000\004\151\304\001\001\000" +
    "\004\153\302\001\001\000\004\152\300\001\001\000\002" +
    "\001\001\000\006\047\301\053\271\001\001\000\002\001" +
    "\001\000\006\047\303\053\271\001\001\000\002\001\001" +
    "\000\006\047\305\053\271\001\001\000\002\001\001\000" +
    "\012\016\274\034\276\036\275\051\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\274\034\276\036" +
    "\275\051\327\001\001\000\004\134\313\001\001\000\006" +
    "\047\314\053\271\001\001\000\004\135\315\001\001\000" +
    "\002\001\001\000\004\050\317\001\001\000\004\136\325" +
    "\001\001\000\004\147\321\001\001\000\006\047\322\053" +
    "\271\001\001\000\004\150\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\274\034\276\036\275\051" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\333\054\331\240\332\001\001\000\002\001\001\000" +
    "\004\055\344\001\001\000\002\001\001\000\004\237\335" +
    "\001\001\000\004\056\337\001\001\000\010\013\333\054" +
    "\340\240\332\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\246\u0112\001\001\000\004\254\u0110\001\001\000" +
    "\004\251\u010e\001\001\000\004\056\u010d\001\001\000\004" +
    "\252\u0108\001\001\000\004\245\u0106\001\001\000\004\241" +
    "\370\001\001\000\004\250\365\001\001\000\004\247\352" +
    "\001\001\000\012\016\353\034\355\036\354\057\356\001" +
    "\001\000\004\257\363\001\001\000\004\261\361\001\001" +
    "\000\004\260\357\001\001\000\002\001\001\000\004\055" +
    "\360\001\001\000\002\001\001\000\004\055\362\001\001" +
    "\000\002\001\001\000\004\055\364\001\001\000\002\001" +
    "\001\000\012\016\353\034\355\036\354\057\366\001\001" +
    "\000\002\001\001\000\004\242\372\001\001\000\012\016" +
    "\353\034\355\036\354\057\371\001\001\000\002\001\001" +
    "\000\004\055\373\001\001\000\004\243\374\001\001\000" +
    "\002\001\001\000\004\060\376\001\001\000\004\244\u0104" +
    "\001\001\000\004\255\u0100\001\001\000\004\055\u0101\001" +
    "\001\000\004\256\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\353\034\355\036\354\057\u0105\001" +
    "\001\000\002\001\001\000\012\016\353\034\355\036\354" +
    "\057\u0107\001\001\000\002\001\001\000\004\055\u0109\001" +
    "\001\000\002\001\001\000\004\253\u010b\001\001\000\012" +
    "\016\353\034\355\036\354\057\u010c\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\353\034\355\036\354" +
    "\057\u010f\001\001\000\002\001\001\000\004\055\u0111\001" +
    "\001\000\002\001\001\000\012\016\353\034\355\036\354" +
    "\057\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\333\054\u0117\240\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\274\034" +
    "\276\036\275\051\u011a\001\001\000\002\001\001\000\006" +
    "\047\u011c\053\271\001\001\000\002\001\001\000\004\145" +
    "\u011e\001\001\000\012\016\274\034\276\036\275\051\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\333\054\u0122\240\332\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\234" +
    "\u0127\001\001\000\002\001\001\000\010\013\333\054\u0129" +
    "\240\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\254\030\u012d\173\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\274\034\276\036\275\051" +
    "\u012f\001\001\000\002\001\001\000\006\047\u0131\053\271" +
    "\001\001\000\002\001\001\000\012\016\274\034\276\036" +
    "\275\051\u0133\001\001\000\002\001\001\000\004\172\u0135" +
    "\001\001\000\004\031\u0136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\254\030\u013a" +
    "\173\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\u013d\003\054\006\053\013\026\025\011\027\034" +
    "\032\035\040\043\043\041\044\005\045\004\046\040\052" +
    "\007\103\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\254\030\u0140\173\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\u0143\003\054\006\053" +
    "\013\026\025\011\027\034\032\035\040\043\043\041\044" +
    "\005\045\004\046\040\052\007\103\022\001\001\000\002" +
    "\001\001\000\036\002\u0145\003\054\006\053\013\026\025" +
    "\011\027\034\032\035\040\043\043\041\044\005\045\004" +
    "\046\040\052\007\103\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u0148\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\u014b\003\054\006\053\013" +
    "\026\025\011\027\034\032\035\040\043\043\041\044\005" +
    "\045\004\046\040\052\007\103\022\001\001\000\002\001" +
    "\001\000\036\002\u014d\003\054\006\053\013\026\025\011" +
    "\027\034\032\035\040\043\043\041\044\005\045\004\046" +
    "\040\052\007\103\022\001\001\000\002\001\001\000\036" +
    "\002\u014f\003\054\006\053\013\026\025\011\027\034\032" +
    "\035\040\043\043\041\044\005\045\004\046\040\052\007" +
    "\103\022\001\001\000\002\001\001\000\006\047\u0151\053" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\223\u0155\001\001\000\002\001\001\000" +
    "\010\013\254\030\u0157\173\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\047\u0160\053\271\001\001\000\002\001" +
    "\001\000\006\047\u0162\053\271\001\001\000\002\001\001" +
    "\000\004\163\u0164\001\001\000\004\012\u0165\001\001\000" +
    "\004\164\u0166\001\001\000\002\001\001\000\004\026\u0168" +
    "\001\001\000\002\001\001\000\006\047\u016a\053\271\001" +
    "\001\000\002\001\001\000\010\013\254\030\u016c\173\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\170" +
    "\u016f\001\001\000\002\001\001\000\010\013\254\030\u0171" +
    "\173\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\227\u01ab\001\001\000\004\007\u017c\001\001\000\002" +
    "\001\001\000\004\167\u0177\001\001\000\002\001\001\000" +
    "\010\013\254\030\u0179\173\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u017d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\104\u01a5\001\001\000\002" +
    "\001\001\000\004\105\u0181\001\001\000\004\010\u0183\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\106\u0185" +
    "\001\001\000\004\012\u0186\001\001\000\004\107\u0187\001" +
    "\001\000\002\001\001\000\004\023\u0189\001\001\000\004" +
    "\011\u018f\001\001\000\004\111\u018b\001\001\000\004\012" +
    "\u018c\001\001\000\004\112\u018d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\154\u0191\001" +
    "\001\000\004\017\u0193\001\001\000\004\155\u0194\001\001" +
    "\000\002\001\001\000\010\017\u0196\020\u0195\156\u0197\001" +
    "\001\000\002\001\001\000\004\021\u019f\001\001\000\004" +
    "\012\u0198\001\001\000\004\022\u019a\001\001\000\004\157" +
    "\u019b\001\001\000\002\001\001\000\004\012\u019c\001\001" +
    "\000\004\022\u019d\001\001\000\002\001\001\000\004\017" +
    "\u01a0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\110\u01a3\001\001\000\004\010\u01a4\001" +
    "\001\000\002\001\001\000\004\010\u01a6\001\001\000\004" +
    "\015\u01a7\001\001\000\002\001\001\000\004\113\u01a9\001" +
    "\001\000\006\047\u01aa\053\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\u01b0\001\001\000\004\004\u01b2" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\100" +
    "\u01b4\001\001\000\004\005\u01b6\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\u01b8\001\001\000\004\005" +
    "\u01b9\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\216\u01bc\001\001\000\006\033\u01bd\037\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\002" +
    "\u01c4\003\054\006\053\013\026\025\011\027\034\032\035" +
    "\040\043\043\041\044\005\045\004\046\040\052\007\103" +
    "\022\001\001\000\002\001\001\000\036\002\u01c6\003\054" +
    "\006\053\013\026\025\011\027\034\032\035\040\043\043" +
    "\041\044\005\045\004\046\040\052\007\103\022\001\001" +
    "\000\002\001\001\000\004\174\u01c8\001\001\000\006\033" +
    "\u01c9\037\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\u01cc\003\054\006\053\013\026\025\011\027" +
    "\034\032\035\040\043\043\041\044\005\045\004\046\040" +
    "\052\007\103\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\254\030\u01cf\173\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\002\u01d2\003\054\006" +
    "\053\013\026\025\011\027\034\032\035\040\043\043\041" +
    "\044\005\045\004\046\040\052\007\103\022\001\001\000" +
    "\002\001\001\000\036\002\u01d4\003\054\006\053\013\026" +
    "\025\011\027\034\032\035\040\043\043\041\044\005\045" +
    "\004\046\040\052\007\103\022\001\001\000\002\001\001" +
    "\000\004\012\u01d6\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCompilar$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCompilar$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCompilar$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorCom> erroresCom; 
    private List<Pista> pistas;
    private int cantidadIdentaciones;  
    Declaracion declaracionAct; 
    List<Expresion> valoresExpresion; 
    List<Expresion> valoresExpresion2;   
    boolean esDimension;
    Stack<Dimension> dimesiones;
    Stack<Expresion> expresionesArreglos;
    List<DeclDim> declaracionesDimension; 
    DeclDim declDimPadre;   
    boolean primerExpresion;
    boolean primerDeclDim;
    private Asignacion asignacionAct;
    private List<Instruccion> instruccionesFunciones;
    private Funcion funcionAct;
    private boolean dentroDeFuncion;
    private CondSi condisionSiAct;
    private Condicion condicionAct;
    private String insCond;
    private Para paraAct;
    private Mientras mientrasAct;
    private Stack<Mientras> desdesMientras;
    private SwitchC switchAct;

	public ParserCompilar(LexerCompilar lex) {
		super(lex);
        cantidadIdentaciones = 0;
        this.erroresCom = lex.getErroresCom();
        this.pistas = new ArrayList<>();
        this.esDimension = false;
        this.dimesiones = new Stack<>();
        this.desdesMientras = new Stack<>();
        this.expresionesArreglos = new Stack<>();   
        this.instruccionesFunciones = new ArrayList<>();
        this.dentroDeFuncion = false;
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(new ErrorCom("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(new ErrorCom("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }         
    /*---------Getters & Setters---------*/

    public List<ErrorCom> getErroresCom(){
        return this.erroresCom;
    }

    public List<Pista> getPistas(){
        return this.pistas;
    }
    
    /*---------Codigo Incrustado---------*/
    private void MasIdent(String val){
        int valor = Integer.parseInt(val);
        this.cantidadIdentaciones += valor;
    }

    private void cerrarIdent(){
        this.cantidadIdentaciones = 0;
    }

    private void crearPista(String nombre){
        Pista pistaTmp = new Pista();
        pistaTmp.setNombre(nombre);
        this.pistas.add(pistaTmp);
    }

    private void agregarExtencion(String nombreExt){
        this.pistas.get(this.pistas.size()-1).setExtension(nombreExt);
    }

    private void crearDeclaracion(boolean esKeep){
        this.declaracionAct = new Declaracion("declaracion",this.cantidadIdentaciones);
        this.declaracionAct.setEsKeep(esKeep);
        insertarInstruccion(this.declaracionAct);
    }

    private void insertarValsDeclaracion(String tipo,String var1,boolean esArreglo){
        this.declaracionAct.setTipoDecl(tipo);
        this.declaracionAct.insertarVariable(var1);
        this.declaracionAct.setEsArreglo(esArreglo);
    }

    private void insertarVarDecl(String variable){
        this.declaracionAct.insertarVariable(variable);
    }

    private void insExpr(String val,String tipo){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
    }

    private void insExpr2(String val,String tipo){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion2.add(expresion);
        }
    }

    private void crearListaExpr(){
        this.valoresExpresion = new ArrayList<>();
    }

    private void crearDimension(){
        Dimension dimension = new Dimension();   
        dimesiones.push(dimension);
        this.esDimension = true;
    }

    private void insertarListaExprDecl(){        
        this.declaracionAct.setValoresDecl(this.valoresExpresion);
    }

    private void insertarDimensionDecl(){
        this.declaracionAct.insertarDimension(this.dimesiones.peek());
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void insertarDimensionExpr(){
        this.expresionesArreglos.peek().insertarExpresion(this.dimesiones.peek());        
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void cerrarExpresionArreglo(){
        this.expresionesArreglos.pop();
    }

    private void cerrarDimension(){
        if(this.dimesiones.isEmpty()){
            this.esDimension = false;
        }else{
            this.esDimension = true;
        }
    }

    private void crearExpresionArreglo(String tipo,String val){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
        this.expresionesArreglos.push(expresion);
    }    

    private void crearExpresionArreglo2(String tipo,String val){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion2.add(expresion);
        }
        this.expresionesArreglos.push(expresion);
    }

    private void crearPrimDeclDim(){
        this.declDimPadre = new DeclDim();
        this.primerDeclDim = true;
        this.declaracionAct.setDeclaracionDimension(this.declDimPadre);
    }

    private void crearDeclDim(){
        if(this.primerDeclDim == true){
            this.primerDeclDim = false;
        }else{
            DeclDim declDim = new DeclDim();
            declDim.setDeclDimPadre(this.declDimPadre);
            this.declDimPadre.insertarHijoDeclDim(declDim);
            this.declDimPadre = declDim;    
        }            
    }

    private void cerrarDeclDim(){
        this.declDimPadre = this.declDimPadre.getDeclDimPadre();
    }

    private void crearDim(){
        Dimension dimension = new Dimension();
        this.valoresExpresion = new ArrayList<>();
        dimension.setExpresiones(valoresExpresion);
        this.declDimPadre.insertarDimension(dimension);
    }

    private void crearAsignacion(String variable, boolean esArreglo,boolean esPara){
        this.asignacionAct = new Asignacion("asignacion",this.cantidadIdentaciones);        
        this.asignacionAct.setVariable(variable);
        this.valoresExpresion = new ArrayList<>();
        this.asignacionAct.setValoresDecl(this.valoresExpresion);
        this.asignacionAct.setEsArreglo(esArreglo);
        if(esPara){
            this.paraAct.setAsignacion(this.asignacionAct);            
        }else{
            insertarInstruccion(this.asignacionAct);
        }        
    }

    private void insertarDimensionAsign(){
        this.asignacionAct.insertarDimension(this.dimesiones.peek());
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void crearFuncion(String nombre,boolean esKeep,String tipo){
        this.funcionAct = new Funcion("funcion",this.cantidadIdentaciones);
        this.funcionAct.setNombre(nombre);
        this.funcionAct.setTipo(tipo);
        this.funcionAct.setEsKeep(esKeep);
        insertarInstruccion(this.funcionAct);
    }

    private void insertarParametro(String tipo, String nombre){
        Parametro parametro = new Parametro();
        this.valoresExpresion = new ArrayList<>();
        parametro.setNombre(nombre);
        parametro.setTipo(tipo);
        parametro.setExpresiones(this.valoresExpresion);
        this.funcionAct.insertarParametro(parametro);
    }

    private void insertarParametro2(String tipo, String nombre){
        Parametro parametro = new Parametro();
        this.valoresExpresion2 = new ArrayList<>();
        parametro.setNombre(nombre);
        parametro.setTipo(tipo);
        parametro.setExpresiones(this.valoresExpresion2);
        this.funcionAct.insertarParametro(parametro);
    }

    private void crearSi(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("si",this.cantidadIdentaciones);   
        insertarInstruccion(this.condisionSiAct);
    }

    private void crearSinoSi(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("sinosi",this.cantidadIdentaciones);      
        insertarCondSINO(true);                
    }
    
    private void crearSino(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("sino",this.cantidadIdentaciones);              
        insertarCondSINO(false);            
    }
    
    private void insertarCondSINO(boolean esSinoSi){
        int tamano = this.instruccionesFunciones.size()-1;
        for (int i = tamano; i >= 0; i--) {
            Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
            if (instruccionFun.getTipoInstruccion().equals("si")) {
                if (instruccionFun.getIdentacion() == this.condisionSiAct.getIdentacion()) {
                    CondSi condisionSi = (CondSi) instruccionFun;
                    if (esSinoSi) {
                        condisionSi.insertarCondicionSinoSi(this.condisionSiAct);
                    }else{
                        condisionSi.setCondsino(this.condisionSiAct);
                    }                    
                    insertarInstruccionEnFunciones(this.condisionSiAct);
                    break;
                }else{
                    this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
                }             
            }else{
                this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
            }
        }
    }

    private void crearCondicion(){
        this.condicionAct = new Condicion();
        this.valoresExpresion = new ArrayList<>();
        this.condicionAct.setExpresion1(this.valoresExpresion);
        switch(insCond)
        {
            case "condSi":
                this.condisionSiAct.insertarCondicion(this.condicionAct);
                break;
            case "para":
                this.paraAct.insertarCondicion(this.condicionAct);
                break;
            case "mientras":
                this.mientrasAct.insertarCondicion(this.condicionAct);
                break;
            default:
                
        }                
    }

    private void crearExpr2Cond(){
        this.valoresExpresion = new ArrayList<>();
        this.condicionAct.setExpresion2(this.valoresExpresion);
    }

    private void insOpNulCondicion(String op1,String op2){
        if(op1.equals("true")){
            this.condicionAct.setNuloExpr1(true);
        }else{
            this.condicionAct.setNuloExpr1(false);
        }
        if(op2.equals("true")){
            this.condicionAct.setNuloExpr2(true);
        }else{
            this.condicionAct.setNuloExpr2(false);
        }
    }

    private void insOpCondicion(String operador){
        switch(insCond)
        {
            case "condSi":
                this.condisionSiAct.insertarOperador(operador);
                break;
            case "para":
                this.paraAct.insertarOperador(operador);
                break;
            case "mientras":
                this.mientrasAct.insertarOperador(operador);
                break;
            default:
                
        }
    }

    private void crearPara(){
        this.insCond = "para";
        this.paraAct = new Para("para",this.cantidadIdentaciones);
        insertarInstruccion(this.paraAct);
    }
    
    private void insUltValsPara(String variable,String operador){
        this.paraAct.setVariable(variable);
        this.paraAct.setOperadorVar(operador);
    }

    private void insertarMientras(){
        this.insCond = "mientras";
        if(desdesMientras.empty()){
            this.mientrasAct = new Mientras("mientras",this.cantidadIdentaciones);
            insertarInstruccion(this.mientrasAct);
        }else{
            this.mientrasAct = desdesMientras.peek();
            desdesMientras.pop();
        }
    }

    private void insertarHacer(){             
        Mientras mientras = new Mientras("hacer",this.cantidadIdentaciones);
        desdesMientras.push(mientras);
        insertarInstruccion(mientras);
    }

    private void crearSwitch(){
        this.switchAct = new SwitchC("switch",this.cantidadIdentaciones);        
        this.valoresExpresion = new ArrayList<>();
        this.switchAct.setVariable(this.valoresExpresion);
        insertarInstruccion(this.switchAct);
    }

    private void crearCaso(String tipo){
        CasoC caso = new CasoC("caso",this.cantidadIdentaciones);
        this.valoresExpresion = new ArrayList<>();
        caso.setTipo(tipo);        
        caso.setExpresion(this.valoresExpresion);
        int tamano = this.instruccionesFunciones.size()-1;
        for (int i = tamano; i >= 0; i--) {
            Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
            int identacion = caso.getIdentacion() - 1;
            if (instruccionFun.getIdentacion() == identacion) {
                if(instruccionFun.getTipoInstruccion().equals("switch")){
                    SwitchC instruccionSwitch = (SwitchC) instruccionFun;
                    instruccionSwitch.insertarCaso(caso);                    
                    break;
                }
            }else{
                this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
            }
        }
        insertarInstruccionEnFunciones(caso);
    }

    private void crearIncDecr(String var, String tipo){
        IncrDecr incrementoDecr = new IncrDecr("incrDecr",this.cantidadIdentaciones);
        incrementoDecr.setTipo(tipo);
        incrementoDecr.setVariable(var);
        insertarInstruccion(incrementoDecr);
    }

    private void crearFuncExpresion(String nombre){
        this.funcionAct = new Funcion("funcion",this.cantidadIdentaciones);
        this.funcionAct.setNombre(nombre);
        this.funcionAct.setTipo("");
        this.funcionAct.setEsKeep(false);    
        Expresion expresion = new Expresion();
        expresion.setTipo("funcion");       
        expresion.setFuncion(this.funcionAct); 
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
    }
    
    
    private void insertarInstruccion(Instruccion instruccion){
        if(this.instruccionesFunciones.isEmpty()){
            this.pistas.get(this.pistas.size()-1).insertarInstruccion(instruccion);
            insertarInstruccionEnFunciones(instruccion);
            if (instruccion.getTipoInstruccion().equals("funcion")) {
                this.dentroDeFuncion = true;
            }else{
                this.dentroDeFuncion = false;
            }
        }else{
            int tamano = this.instruccionesFunciones.size()-1;
            for (int i = tamano; i >= 0; i--) {
                Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
                int identacion = instruccion.getIdentacion() - 1;
                if (instruccionFun.getIdentacion() == identacion) {
                    //InsertarInstruccion en funcion
                    String tipoInstruccion = instruccionFun.getTipoInstruccion();
                    if (tipoInstruccion.equals("funcion")) {
                        Funcion funcion = (Funcion) instruccionFun;
                        funcion.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("si")||tipoInstruccion.equals("sino")||tipoInstruccion.equals("sinosi")){
                        CondSi condicionSi = (CondSi) instruccionFun;
                        condicionSi.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("para")){
                        Para paraIns = (Para) instruccionFun;
                        paraIns.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("mientras")){
                        Mientras mientrasIns = (Mientras) instruccionFun;
                        mientrasIns.insertarInstruccion(instruccion);
                    }
                    insertarInstruccionEnFunciones(instruccion);
                    break;
                }else{                    
                    if(instruccionFun.getTipoInstruccion().equals("funcion")){
                        this.dentroDeFuncion = false;
                    }
                    this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
                    if(i==0){
                        this.pistas.get(this.pistas.size()-1).insertarInstruccion(instruccion);
                        insertarInstruccionEnFunciones(instruccion);
                    }
                }
            }
        }
    }
    
    private void insertarInstruccionEnFunciones(Instruccion instruccion){
        String tipo = instruccion.getTipoInstruccion();
        String[] funciones = new String[]{"si","sino","sinosi","funcion","para","mientras","hacer","continuar","switch","caso","principal"};
        List<String> list = Arrays.asList(funciones);
        if (list.contains(tipo)) {
            if (tipo.equals("funcion")) {
                if (this.dentroDeFuncion == false) {
                    this.instruccionesFunciones.add(instruccion);
                }
            }else{
                this.instruccionesFunciones.add(instruccion);
            }            
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCompilar$actions {
  private final ParserCompilar parser;

  /** Constructor */
  CUP$ParserCompilar$actions(ParserCompilar parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCompilar$do_action_part00000000(
    int                        CUP$ParserCompilar$act_num,
    java_cup.runtime.lr_parser CUP$ParserCompilar$parser,
    java.util.Stack            CUP$ParserCompilar$stack,
    int                        CUP$ParserCompilar$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCompilar$result;

      /* select the action based on the action number */
      switch (CUP$ParserCompilar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		RESULT = start_val;
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCompilar$parser.done_parsing();
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
MasIdent(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= IDENT NT$0 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= COMENT NT$1 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$2",50, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= siguiente NT$2 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$3",51, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= decl NT$3 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$4",52, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= asg NT$4 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$5",53, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= funcion NT$5 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$6",54, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= condicional NT$6 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$7",55, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= ciclo1 NT$7 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$8",56, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= ciclo2 NT$8 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$9 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$9",57, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= funciones2 NT$9 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$10 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$10",58, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicio ::= funciones3 NT$10 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$11 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$11",59, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicio ::= cambiar NT$11 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$12 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$12",60, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicio ::= incrDecr NT$12 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$13 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearPista(nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$13",61, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // siguiente ::= PISTA ID NT$13 ext 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("siguiente",1, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$14 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
agregarExtencion(nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$14",62, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ext ::= EXTIENDE ID NT$14 extp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ext",2, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ext ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ext",2, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$15 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
agregarExtencion(nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$15",63, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // extp ::= COMA ID NT$15 extp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("extp",3, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // extp ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("extp",3, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$16 ::= 
            {
              Object RESULT =null;
crearDeclaracion(true);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$16",64, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decl ::= KEEP NT$16 declp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$17 ::= 
            {
              Object RESULT =null;
crearDeclaracion(false);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$17",65, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // decl ::= NT$17 declp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$18 ::= 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarValsDeclaracion(String.valueOf(tip),id1,false);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$18",66, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declp ::= VAR tipoD ID NT$18 declp2 asgF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("declp",5, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$19 ::= 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarValsDeclaracion(String.valueOf(tip),id1,true);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$19",67, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$20",68, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
insertarDimensionDecl();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$21",69, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declp ::= VAR tipoD ARREGLO ID NT$19 declp2 BRACKI NT$20 expr1 NT$21 BRACKD arr arrFin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-11)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-11)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-11)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("declp",5, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-12)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoD ::= ENTEROSTR 
            {
              Object RESULT =null;
		RESULT="entero";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoD ::= DOBLESTR 
            {
              Object RESULT =null;
		RESULT="doble";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoD ::= BOOLEANSTR 
            {
              Object RESULT =null;
		RESULT="boolean";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoD ::= CARACTERSTR 
            {
              Object RESULT =null;
		RESULT="caracter";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoD ::= CADENASTR 
            {
              Object RESULT =null;
		RESULT="cadena";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$22 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarVarDecl(id1);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$22",70, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declp2 ::= COMA ID NT$22 declp2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("declp2",6, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declp2 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("declp2",6, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$23 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$23",71, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
insertarDimensionDecl();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$24",72, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arr ::= BRACKI NT$23 expr1 NT$24 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr",17, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arr ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr",17, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$25 ::= 
            {
              Object RESULT =null;
crearListaExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$25",73, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asgF ::= IGUAL NT$25 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		insertarListaExprDecl();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asgF",11, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asgF ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asgF",11, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$26 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"identificador");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$26",74, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr1 ::= ID NT$26 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$27 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
crearExpresionArreglo("arreglo",val);crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$27",75, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$28",76, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
cerrarExpresionArreglo();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$29",77, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr1 ::= ID BRACKI NT$27 expr1 NT$28 BRACKD arr2 NT$29 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$30 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"numero");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$30",78, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr1 ::= NUMERO NT$30 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$31 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"cadena");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$31",79, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr1 ::= CADENA NT$31 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$32 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"caracter");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$32",80, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr1 ::= CARACTER NT$32 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$33 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$33",81, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr1 ::= VERDADERO NT$33 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$34 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$34",82, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr1 ::= FALSO NT$34 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$35 ::= 
            {
              Object RESULT =null;
insExpr("(","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$35",83, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$36 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
insExpr(")","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$36",84, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr1 ::= PARI NT$35 expr1 PARD NT$36 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$37 ::= 
            {
              Object RESULT =null;
insExpr("!","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$37",85, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr1 ::= OPNOT NT$37 expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$38 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$38",86, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$39 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$39",87, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arr2 ::= BRACKI NT$38 expr1 NT$39 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr2",18, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arr2 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr2",18, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$40 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$40",88, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // fin1 ::= op NT$40 expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1",10, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fin1 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1",10, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$41 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"identificador");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$41",89, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr2 ::= ID NT$41 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$42 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
crearExpresionArreglo("arreglo",val);crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$42",90, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$43",91, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$44 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
cerrarExpresionArreglo();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$44",92, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr2 ::= ID BRACKI NT$42 expr2 NT$43 BRACKD arr2p NT$44 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$45 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"numero");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$45",93, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr2 ::= NUMERO NT$45 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$46 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"cadena");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$46",94, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr2 ::= CADENA NT$46 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$47 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"caracter");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$47",95, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr2 ::= CARACTER NT$47 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$48 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$48",96, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr2 ::= VERDADERO NT$48 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$49 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$49",97, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr2 ::= FALSO NT$49 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$50 ::= 
            {
              Object RESULT =null;
insExpr("(","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$50",98, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$51 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
insExpr(")","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$51",99, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr2 ::= PARI NT$50 expr2 PARD NT$51 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$52 ::= 
            {
              Object RESULT =null;
insExpr("!","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$52",100, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr2 ::= OPNOT NT$52 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr2 ::= funciones4 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$53 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$53",101, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$54 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$54",102, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // arr2p ::= BRACKI NT$53 expr2 NT$54 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr2p",38, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // arr2p ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr2p",38, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$55 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$55",103, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // fin1p ::= op NT$55 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$56 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$56",104, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // fin1p ::= op3 NT$56 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$57 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$57",105, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // fin1p ::= op4 NT$57 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // fin1p ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // op ::= SUMA 
            {
              Object RESULT =null;
		RESULT = "+";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // op ::= RESTA 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // op ::= MULT 
            {
              Object RESULT =null;
		RESULT = "*";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // op ::= DIVI 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // op ::= OPELV 
            {
              Object RESULT =null;
		RESULT = "^";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // op ::= OPMOD 
            {
              Object RESULT =null;
		RESULT = "%";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$58 ::= 
            {
              Object RESULT =null;
crearPrimDeclDim();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$58",106, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // arrFin ::= IGUAL NT$58 arrFinP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFin",7, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // arrFin ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFin",7, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$59 ::= 
            {
              Object RESULT =null;
crearDeclDim();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$59",107, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arrFinP ::= CURLBRACKI NT$59 arrFinP2 CURLBRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		cerrarDeclDim();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFinP",13, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // arrFinP ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFinP",13, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // arrFinP2 ::= arrFinP fin2 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFinP2",14, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$60 ::= 
            {
              Object RESULT =null;
crearDim();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$60",108, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arrFinP2 ::= NT$60 expr1 fin3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFinP2",14, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // fin2 ::= COMA arrFinP 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin2",15, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // fin2 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin2",15, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$61 ::= 
            {
              Object RESULT =null;
crearDim();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$61",109, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // fin3 ::= COMA NT$61 expr1 fin3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin3",16, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // fin3 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin3",16, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$62 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,false,false);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$62",110, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // asg ::= ID NT$62 OPSUMSIM expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$63 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,false,false);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$63",111, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // asg ::= ID NT$63 IGUAL expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$64 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,true,false);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$64",112, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$65 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$65",113, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$66 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
insertarDimensionAsign();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$66",114, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // asg ::= ID NT$64 BRACKI NT$65 expr1 NT$66 BRACKD arr3 IGUAL expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$67 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$67",115, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$68 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
insertarDimensionAsign();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$68",116, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // arr3 ::= BRACKI NT$67 expr1 NT$68 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr3",20, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // arr3 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr3",20, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$69 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearFuncion(nom,true,String.valueOf(tp));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$69",117, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // funcion ::= KEEP tipoD ID NT$69 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$70 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearFuncion(nom,false,String.valueOf(tp));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$70",118, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // funcion ::= tipoD ID NT$70 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$71 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearFuncion(nom,false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$71",119, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // funcion ::= ID NT$71 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$72 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParametro(String.valueOf(tp),nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$72",120, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // par ::= tipoD ID NT$72 fin4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$73 ::= 
            {
              Object RESULT =null;
insertarParametro("","");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$73",121, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // par ::= NT$73 expr2 fin4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // par ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // fin4 ::= COMA par 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin4",23, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // fin4 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin4",23, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$74 ::= 
            {
              Object RESULT =null;
crearSi();crearCondicion();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$74",122, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // condicional ::= SI PARI NT$74 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$75 ::= 
            {
              Object RESULT =null;
crearSinoSi();crearCondicion();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$75",123, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // condicional ::= SINOSI PARI NT$75 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // condicional ::= SINO 
            {
              Object RESULT =null;
		crearSino();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$76 ::= 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insOpCondicion(String.valueOf(opI));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$76",124, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$77 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearExpr2Cond();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$77",125, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$78 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
insOpNulCondicion(String.valueOf(op1),String.valueOf(op2));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$78",126, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // condicion ::= opNul expr1 op3 NT$76 opNul NT$77 expr1 NT$78 opLog 
            {
              Object RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condicion ::= opNul expr1 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		insOpNulCondicion(String.valueOf(op1),"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$79 ::= 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insOpCondicion(String.valueOf(opI));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$79",127, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$80 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearExpr2Cond();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$80",128, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$81 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
insOpNulCondicion(String.valueOf(op1),String.valueOf(op2));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$81",129, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // condicion ::= opNul expr1 op4 NT$79 opNul NT$80 expr1 NT$81 opLog 
            {
              Object RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // opNul ::= OPNULO 
            {
              Object RESULT =null;
		RESULT = "true";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("opNul",29, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // opNul ::= 
            {
              Object RESULT =null;
		RESULT = "false";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("opNul",29, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // op3 ::= DOBIGUAL 
            {
              Object RESULT =null;
		RESULT = "==";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // op3 ::= DIFERENC 
            {
              Object RESULT =null;
		RESULT = "!=";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // op3 ::= MAY 
            {
              Object RESULT =null;
		RESULT = ">";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // op3 ::= MEN 
            {
              Object RESULT =null;
		RESULT = "<";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // op3 ::= MAYIG 
            {
              Object RESULT =null;
		RESULT = ">=";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // op3 ::= MENIG 
            {
              Object RESULT =null;
		RESULT = "<=";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$82 ::= 
            {
              Object RESULT =null;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insOpCondicion(String.valueOf(opI));crearCondicion();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$82",130, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // opLog ::= op4 NT$82 condicion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$82
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("opLog",27, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // opLog ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("opLog",27, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // op4 ::= AND 
            {
              Object RESULT =null;
		RESULT = "&&";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // op4 ::= NAND 
            {
              Object RESULT =null;
		RESULT = "!&&";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // op4 ::= OR 
            {
              Object RESULT =null;
		RESULT = "||";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // op4 ::= XOR 
            {
              Object RESULT =null;
		RESULT = "&|";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // op4 ::= NOR 
            {
              Object RESULT =null;
		RESULT = "!||";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$83 ::= 
            {
              Object RESULT =null;
crearPara();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$83",131, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$84 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
crearCondicion();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$84",132, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$85 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int idVleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int idVright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String idV = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int opPleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int opPright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object opP = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insUltValsPara(idV,String.valueOf(opP));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$85",133, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ciclo1 ::= PARA NT$83 PARI tipoPara asg2 PUNTCOMA NT$84 condicion PUNTCOMA ID op2 NT$85 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$85
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int idVleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int idVright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String idV = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int opPleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int opPright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object opP = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ciclo1",30, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-12)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // op2 ::= OPINCR 
            {
              Object RESULT =null;
		RESULT = "++";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op2",31, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // op2 ::= OPDECR 
            {
              Object RESULT =null;
		RESULT = "--";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op2",31, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NT$86 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,false,true);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$86",134, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // asg2 ::= ID NT$86 OPSUMSIM expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$86
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$87 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,false,true);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$87",135, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // asg2 ::= ID NT$87 IGUAL expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$87
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NT$88 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,true,true);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$88",136, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$89 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$89",137, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NT$90 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
insertarDimensionAsign();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$90",138, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // asg2 ::= ID NT$88 BRACKI NT$89 expr1 NT$90 BRACKD arr3 IGUAL expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$90
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // tipoPara ::= tipoD 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoPara",47, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // tipoPara ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoPara",47, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // NT$91 ::= 
            {
              Object RESULT =null;
insertarMientras();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$91",139, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$92 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
crearCondicion();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$92",140, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ciclo2 ::= MIENTRAS NT$91 PARI NT$92 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$92
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ciclo2",33, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ciclo2 ::= HACER 
            {
              Object RESULT =null;
		insertarHacer();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ciclo2",33, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // ciclo2 ::= CONTINUAR 
            {
              Object RESULT =null;
		crearFuncion("continuar",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ciclo2",33, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // NT$93 ::= 
            {
              Object RESULT =null;
crearFuncion("sumarizar",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$93",141, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // funciones2 ::= SUMARIZAR NT$93 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$93
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$94 ::= 
            {
              Object RESULT =null;
crearFuncion("longitud",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$94",142, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // funciones2 ::= LONGITUD NT$94 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$94
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NT$95 ::= 
            {
              Object RESULT =null;
crearFuncion("mensaje",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$95",143, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // funciones2 ::= MENSAJE NT$95 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$95
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // NT$96 ::= 
            {
              Object RESULT =null;
crearFuncion("reproducir",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$96",144, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // NT$97 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParametro("","");insExpr(nota,"nota");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$97",145, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // funciones3 ::= REPRODUCIR NT$96 PARI NOTA NT$97 COMA par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$97
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NT$98 ::= 
            {
              Object RESULT =null;
crearFuncion("esperar",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$98",146, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // funciones3 ::= ESPERAR NT$98 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$98
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$99 ::= 
            {
              Object RESULT =null;
crearFuncion("retorna",false,"");insertarParametro("","");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$99",147, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // funciones3 ::= RETORNA NT$99 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$99
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // NT$100 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$100",148, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // funciones3 ::= PRINCIPAL NT$100 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$100
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // NT$101 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",true,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$101",149, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // funciones3 ::= KEEP PRINCIPAL NT$101 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$101
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // NT$102 ::= 
            {
              Object RESULT =null;
crearSwitch();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$102",150, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // cambiar ::= SWITCH NT$102 PARI expr1 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$102
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // NT$103 ::= 
            {
              Object RESULT =null;
crearCaso("normal");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$103",151, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // cambiar ::= CASO NT$103 expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$103
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // cambiar ::= DEFAULT 
            {
              Object RESULT =null;
		crearCaso("default");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // cambiar ::= SALIR 
            {
              Object RESULT =null;
		crearFuncion("salir",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // incrDecr ::= ID OPINCR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		crearIncDecr(val,"++");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("incrDecr",40, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // incrDecr ::= ID OPDECR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		crearIncDecr(val,"--");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("incrDecr",40, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // NT$104 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearFuncExpresion(String.valueOf(nom));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$104",152, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // funciones4 ::= ID NT$104 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$104
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NT$105 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("reproducir");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$105",153, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // NT$106 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParametro2("","");insExpr2(nota,"nota");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$106",154, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // funciones4 ::= REPRODUCIR NT$105 PARI NOTA NT$106 COMA par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$106
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // NT$107 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("sumarizar");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$107",155, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // funciones4 ::= SUMARIZAR NT$107 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$107
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // NT$108 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("longitud");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$108",156, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // funciones4 ::= LONGITUD NT$108 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$108
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // NT$109 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParametro2(String.valueOf(tp),nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$109",157, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // par2 ::= tipoD ID NT$109 fin5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$109
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // NT$110 ::= 
            {
              Object RESULT =null;
insertarParametro2("","");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$110",158, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // par2 ::= NT$110 expr3 fin5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$110
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // par2 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // fin5 ::= COMA par2 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin5",44, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // fin5 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin5",44, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // NT$111 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"identificador");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$111",159, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr3 ::= ID NT$111 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$111
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // NT$112 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
crearExpresionArreglo2("arreglo",val);crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$112",160, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // NT$113 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$113",161, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // NT$114 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
cerrarExpresionArreglo();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$114",162, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr3 ::= ID BRACKI NT$112 expr3 NT$113 BRACKD arr3p NT$114 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$114
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // NT$115 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"numero");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$115",163, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr3 ::= NUMERO NT$115 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$115
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // NT$116 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"cadena");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$116",164, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr3 ::= CADENA NT$116 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$116
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // NT$117 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"caracter");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$117",165, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr3 ::= CARACTER NT$117 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$117
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // NT$118 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$118",166, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr3 ::= VERDADERO NT$118 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$118
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // NT$119 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$119",167, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr3 ::= FALSO NT$119 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$119
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // NT$120 ::= 
            {
              Object RESULT =null;
insExpr2("(","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$120",168, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // NT$121 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
insExpr2(")","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$121",169, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr3 ::= PARI NT$120 expr3 PARD NT$121 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$121
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // NT$122 ::= 
            {
              Object RESULT =null;
insExpr2("!","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$122",170, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expr3 ::= OPNOT NT$122 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$122
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // NT$123 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$123",171, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // NT$124 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$124",172, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // arr3p ::= BRACKI NT$123 expr3 NT$124 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$124
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr3p",46, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // arr3p ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr3p",46, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // NT$125 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$125",173, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // fin6 ::= op NT$125 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$125
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NT$126 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$126",174, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // fin6 ::= op3 NT$126 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$126
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NT$127 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$127",175, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // fin6 ::= op4 NT$127 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$127
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // fin6 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCompilar$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCompilar$do_action(
    int                        CUP$ParserCompilar$act_num,
    java_cup.runtime.lr_parser CUP$ParserCompilar$parser,
    java.util.Stack            CUP$ParserCompilar$stack,
    int                        CUP$ParserCompilar$top)
    throws java.lang.Exception
    {
              return CUP$ParserCompilar$do_action_part00000000(
                               CUP$ParserCompilar$act_num,
                               CUP$ParserCompilar$parser,
                               CUP$ParserCompilar$stack,
                               CUP$ParserCompilar$top);
    }
}

}
