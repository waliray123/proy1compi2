
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.ValExpr;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Analizadores.ErrorCom;
import Objetos.ControlCrear.ExprVal;
import java.util.Stack;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserValExpr extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserValExpr() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserValExpr(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserValExpr(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\003\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\003" +
    "\000\002\012\005\000\002\012\005\000\002\012\003\000" +
    "\002\013\004\000\002\013\003\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\003\000\002\010\004" +
    "\000\002\010\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\003\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\005\005\000\002\005" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\024\020\022\030\026\031\010\043\006\044" +
    "\014\045\023\046\011\047\015\050\024\001\002\000\046" +
    "\002\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\032\uffe7\001\002\000" +
    "\040\002\uffee\006\034\007\033\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\032\uffee\001\002\000\050\002\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\032\uffe4\001\002\000\020\002" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\032\ufff7" +
    "\001\002\000\024\020\022\030\026\031\010\043\006\044" +
    "\014\045\023\046\011\047\015\050\024\001\002\000\050" +
    "\002\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\032\uffe1\001" +
    "\002\000\020\002\ufff9\023\070\024\ufff9\025\ufff9\026\071" +
    "\027\ufff9\032\ufff9\001\002\000\014\002\ufffc\024\062\025" +
    "\063\027\064\032\ufffc\001\002\000\050\002\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\032\uffe3\001\002\000\050\002" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\032\uffe0\001\002" +
    "\000\004\002\061\001\002\000\004\002\000\001\002\000" +
    "\034\002\ufff0\014\045\015\047\016\051\017\050\021\052" +
    "\022\046\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\032" +
    "\ufff0\001\002\000\046\002\uffeb\006\uffeb\007\uffeb\010\036" +
    "\011\040\012\037\014\uffeb\015\uffeb\016\uffeb\017\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\032\uffeb\001\002\000\020\031\010\043\006\044\014\045" +
    "\023\046\011\047\015\050\024\001\002\000\050\002\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\032\uffe2\001\002\000" +
    "\050\002\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\032\uffdf" +
    "\001\002\000\050\002\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\030\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\032\uffe5\001\002\000\022\020\022\031\010\043\006" +
    "\044\014\045\023\046\011\047\015\050\024\001\002\000" +
    "\020\002\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\032\ufff8\001\002\000\020\031\010\043\006\044\014\045" +
    "\023\046\011\047\015\050\024\001\002\000\046\002\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\032\uffe6\001\002\000\040\002" +
    "\uffef\006\034\007\033\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\032\uffef\001\002\000\020\031\010\043\006\044\014" +
    "\045\023\046\011\047\015\050\024\001\002\000\020\031" +
    "\010\043\006\044\014\045\023\046\011\047\015\050\024" +
    "\001\002\000\046\002\uffed\006\uffed\007\uffed\010\036\011" +
    "\040\012\037\014\uffed\015\uffed\016\uffed\017\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\032" +
    "\uffed\001\002\000\020\031\010\043\006\044\014\045\023" +
    "\046\011\047\015\050\024\001\002\000\020\031\010\043" +
    "\006\044\014\045\023\046\011\047\015\050\024\001\002" +
    "\000\020\031\010\043\006\044\014\045\023\046\011\047" +
    "\015\050\024\001\002\000\046\002\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\032\uffe9\001\002\000\046\002\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\032\uffe8\001\002\000\046\002\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\032\uffea\001\002\000\046\002\uffec\006" +
    "\uffec\007\uffec\010\036\011\040\012\037\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\032\uffec\001\002\000\022\020\022" +
    "\031\010\043\006\044\014\045\023\046\011\047\015\050" +
    "\024\001\002\000\022\020\022\031\010\043\006\044\014" +
    "\045\023\046\011\047\015\050\024\001\002\000\022\020" +
    "\022\031\010\043\006\044\014\045\023\046\011\047\015" +
    "\050\024\001\002\000\022\020\022\031\010\043\006\044" +
    "\014\045\023\046\011\047\015\050\024\001\002\000\022" +
    "\020\022\031\010\043\006\044\014\045\023\046\011\047" +
    "\015\050\024\001\002\000\022\020\022\031\010\043\006" +
    "\044\014\045\023\046\011\047\015\050\024\001\002\000" +
    "\020\002\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\032\ufff4\001\002\000\020\002\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\032\ufff2\001\002\000\020\002\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\032\ufff1\001" +
    "\002\000\020\002\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\032\ufff5\001\002\000\020\002\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\032\ufff3\001\002\000\020" +
    "\002\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\032" +
    "\ufff6\001\002\000\004\002\001\001\002\000\024\020\022" +
    "\030\026\031\010\043\006\044\014\045\023\046\011\047" +
    "\015\050\024\001\002\000\024\020\022\030\026\031\010" +
    "\043\006\044\014\045\023\046\011\047\015\050\024\001" +
    "\002\000\024\020\022\030\026\031\010\043\006\044\014" +
    "\045\023\046\011\047\015\050\024\001\002\000\006\002" +
    "\uffff\032\uffff\001\002\000\006\002\ufffd\032\ufffd\001\002" +
    "\000\006\002\ufffe\032\ufffe\001\002\000\024\020\022\030" +
    "\026\031\010\043\006\044\014\045\023\046\011\047\015" +
    "\050\024\001\002\000\024\020\022\030\026\031\010\043" +
    "\006\044\014\045\023\046\011\047\015\050\024\001\002" +
    "\000\014\002\ufffb\024\ufffb\025\ufffb\027\ufffb\032\ufffb\001" +
    "\002\000\014\002\ufffa\024\ufffa\025\ufffa\027\ufffa\032\ufffa" +
    "\001\002\000\004\032\075\001\002\000\050\002\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\032\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\026\002\015\003\004\004\020\005\003\006" +
    "\024\007\006\010\017\011\016\012\012\013\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\004\004\020\005\003\006\024" +
    "\007\006\010\017\011\073\012\012\013\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\031" +
    "\004\020\005\003\006\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\004\004\020" +
    "\005\003\006\024\007\026\010\017\001\001\000\002\001" +
    "\001\000\006\005\030\006\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\043\005\003\006\024\001" +
    "\001\000\010\004\034\005\003\006\024\001\001\000\002" +
    "\001\001\000\006\005\042\006\024\001\001\000\006\005" +
    "\041\006\024\001\001\000\006\005\040\006\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\004\004\020\005\003\006\024" +
    "\007\057\010\017\001\001\000\016\003\004\004\020\005" +
    "\003\006\024\007\056\010\017\001\001\000\016\003\004" +
    "\004\020\005\003\006\024\007\055\010\017\001\001\000" +
    "\016\003\004\004\020\005\003\006\024\007\054\010\017" +
    "\001\001\000\016\003\004\004\020\005\003\006\024\007" +
    "\053\010\017\001\001\000\016\003\004\004\020\005\003" +
    "\006\024\007\052\010\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\004\004\020\005\003\006\024\007\006\010\017\011\066" +
    "\012\012\013\011\001\001\000\024\003\004\004\020\005" +
    "\003\006\024\007\006\010\017\011\065\012\012\013\011" +
    "\001\001\000\024\003\004\004\020\005\003\006\024\007" +
    "\006\010\017\011\064\012\012\013\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\004\004\020\005\003\006\024\007\006\010\017\012\072" +
    "\013\011\001\001\000\022\003\004\004\020\005\003\006" +
    "\024\007\006\010\017\012\071\013\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserValExpr$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserValExpr$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserValExpr$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorCom> erroresCom; 
    private ExprVal expresionResp;
	public ParserValExpr(LexerValExpr lex) {
		super(lex);        
        this.erroresCom = lex.getErroresCom();
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(new ErrorCom("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(new ErrorCom("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }         
    /*---------Getters & Setters---------*/

    public List<ErrorCom> getErroresCom(){
        return this.erroresCom;
    }    

    private ExprVal crearExpresion(String tipo, String val){
        ExprVal expresion = new ExprVal(tipo,val);
        return expresion;
    }

    private ExprVal elevar(ExprVal val1,ExprVal val2){
        Double dobVal1 = Double.parseDouble(val1.getVal());
        Double dobVal2 = Double.parseDouble(val2.getVal());
        Double valor = Math.pow(dobVal1, dobVal2);
        ExprVal expresionDev = new ExprVal("numero",String.valueOf(valor));     
        return expresionDev;
    }

    private ExprVal obtenerMod(ExprVal val1,ExprVal val2){
        int intVal1 = parseStringToInt(val1.getVal());
        int intVal2 = parseStringToInt(val2.getVal());
        int valor = intVal1 % intVal2;
        ExprVal expresionDev = new ExprVal("numero",String.valueOf(valor));     
        return expresionDev;
    }

    private ExprVal multiplicar(ExprVal val1,ExprVal val2){
        if(val1.getTipo().equals("boolean") && val2.getTipo().equals("boolean")){
            String valor1 = val1.getVal();
            String valor2 = val2.getVal();
            if(valor1.equalsIgnoreCase("verdadero")||valor1.equalsIgnoreCase("true")){
                if(valor1.equalsIgnoreCase("verdadero")||valor1.equalsIgnoreCase("true")){
                    ExprVal expresionDev = new ExprVal("boolean","true");
                    return expresionDev;
                }else{
                    ExprVal expresionDev = new ExprVal("boolean","false");
                    return expresionDev;
                }
            }else{
                ExprVal expresionDev = new ExprVal("boolean","false");
                return expresionDev;
            }
        }else{
            Double dobVal1 = Double.parseDouble(val1.getVal());
            Double dobVal2 = Double.parseDouble(val2.getVal());
            Double valor = dobVal1 * dobVal2;
            ExprVal expresionDev = new ExprVal("numero",String.valueOf(valor));     
            return expresionDev;
        }
    }

    private ExprVal dividir(ExprVal val1,ExprVal val2){
        Double dobVal1 = Double.parseDouble(val1.getVal());
        Double dobVal2 = Double.parseDouble(val2.getVal());
        Double valor = dobVal1 / dobVal2;
        ExprVal expresionDev = new ExprVal("numero",String.valueOf(valor));     
        return expresionDev;
    }

    private ExprVal sumar(ExprVal val1,ExprVal val2){
        String tipo1 = val1.getTipo();
        String tipo2 = val2.getTipo();
        if(tipo1.equals("cadena")||tipo2.equals("cadena")){
            String strVal1 = val1.getVal().replace("\"", "");
            String strVal2 = val2.getVal().replace("\"", "");
            strVal1 = strVal1.replace("#n", "\n");
            strVal2 = strVal2.replace("#n", "\n");
            String valor = strVal1 + strVal2;
            ExprVal expresionDev = new ExprVal("cadena",String.valueOf(valor));     
            return expresionDev;
        }else if(tipo1.equals("boolean")&&tipo2.equals("boolean")){
            String strVal1 = val1.getVal();
            String strVal2 = val2.getVal();
            String valor = "";
            if(strVal1.equalsIgnoreCase("falso")||strVal1.equalsIgnoreCase("false")){
                if(strVal2.equalsIgnoreCase("falso")||strVal2.equalsIgnoreCase("false")){
                    valor = "false";
                }else{
                    valor = "true";
                }
            }else{
                valor = "true";
            }
            ExprVal expresionDev = new ExprVal("boolean",String.valueOf(valor));     
            return expresionDev;
        }else{
            Double dobVal1 = Double.parseDouble(val1.getVal());
            Double dobVal2 = Double.parseDouble(val2.getVal());
            Double valor = dobVal1 + dobVal2;
            ExprVal expresionDev = new ExprVal("numero",String.valueOf(valor));     
            return expresionDev;
        }
    }

    private ExprVal restar(ExprVal val1,ExprVal val2){        
        Double dobVal1 = Double.parseDouble(val1.getVal());
        Double dobVal2 = Double.parseDouble(val2.getVal());
        Double valor = dobVal1 - dobVal2;
        ExprVal expresionDev = new ExprVal("numero",String.valueOf(valor));     
        return expresionDev;
    }

    private ExprVal validarNulo(ExprVal val){
        String valorR = "";
        String valor = val.getVal();
        if(valor.equalsIgnoreCase("nulo")){
            valorR = "true";
        }else{
            valorR = "false";
        }
        ExprVal expresionDev = new ExprVal("boolean",valorR);  
        return expresionDev;
    }

    private ExprVal validarMayMenIg(ExprVal val1,ExprVal val2, String tipo){
        Double dobVal1 = Double.parseDouble(val1.getVal());
        Double dobVal2 = Double.parseDouble(val2.getVal());
        String valor = "";
        switch(tipo){
            case ">=":
                if(dobVal1 >= dobVal2){
                    valor = "true";
                }else{
                    valor = "false";
                }
                break;
            case "<=":
                if(dobVal1 <= dobVal2){
                    valor = "true";
                }else{
                    valor = "false";
                }
                break;
            case ">":
                if(dobVal1 > dobVal2){
                    valor = "true";
                }else{
                    valor = "false";
                }
                break;
            case "<":
                if(dobVal1 < dobVal2){
                    valor = "true";
                }else{
                    valor = "false";
                }
                break;            
        }
        ExprVal expresionDev = new ExprVal("boolean",valor);  
        return expresionDev;
    }

    private ExprVal validarDobIg(ExprVal val1,ExprVal val2, String tipo){
        String dobVal1 = val1.getVal();
        String dobVal2 = val2.getVal();
        
        if(val1.getTipo().equals("numero")){
            Double v1 = Double.parseDouble(val1.getVal());
            dobVal1 = String.valueOf(v1);            
        }
        if(val2.getTipo().equals("numero")){
            Double v2 = Double.parseDouble(val2.getVal());
            dobVal2 = String.valueOf(v2);            
        }

        String valor = "";
        switch(tipo){
            case "==":
                if(dobVal1.equals(dobVal2)){
                    valor = "true";
                }else{
                    valor = "false";
                }
                break;
            case "!=":
                if(dobVal1.equals(dobVal2) == false){
                    valor = "true";
                }else{
                    valor = "false";
                }
                break;            
        }
        ExprVal expresionDev = new ExprVal("boolean",valor);  
        return expresionDev;
    }

    private ExprVal validarNot(ExprVal val){
        String valor = "true";
        if(val.getVal().equalsIgnoreCase("true")||val.getVal().equalsIgnoreCase("verdadero")){
            valor = "false";
        }
        ExprVal expresionDev = new ExprVal("boolean",valor);  
        return expresionDev;
    }

    private ExprVal validarAND(ExprVal val1,ExprVal val2){
        String valor1 = val1.getVal();
        String valor2 = val2.getVal();
        String valor = "";
        if(valor1.equalsIgnoreCase("true") || valor1.equalsIgnoreCase("verdadero")){
            if(valor2.equalsIgnoreCase("true") || valor2.equalsIgnoreCase("verdadero")){
                valor = "true";
            }else{
                valor = "false";
            }
        }else{
            valor = "false";
        }
        ExprVal expresionDev = new ExprVal("boolean",valor);  
        return expresionDev;
    }

    private ExprVal validarNAND(ExprVal val1,ExprVal val2){
        String valor1 = val1.getVal();
        String valor2 = val2.getVal();
        String valor = "";
        if(valor1.equalsIgnoreCase("true") || valor1.equalsIgnoreCase("verdadero")){
            if(valor2.equalsIgnoreCase("true") || valor2.equalsIgnoreCase("verdadero")){
                valor = "false";
            }else{
                valor = "true";
            }
        }else{
            valor = "true";
        }
        ExprVal expresionDev = new ExprVal("boolean",valor);  
        return expresionDev;
    }

    private ExprVal validarOR(ExprVal val1,ExprVal val2){
        String valor1 = val1.getVal();
        String valor2 = val2.getVal();
        String valor = "";
        if(valor1.equalsIgnoreCase("false") || valor1.equalsIgnoreCase("falso")){
            if(valor2.equalsIgnoreCase("false") || valor2.equalsIgnoreCase("falso")){
                valor = "false";
            }else{
                valor = "true";
            }
        }else{
            valor = "true";
        }
        ExprVal expresionDev = new ExprVal("boolean",valor);  
        return expresionDev;
    }

    private ExprVal validarNOR(ExprVal val1,ExprVal val2){
        String valor1 = val1.getVal();
        String valor2 = val2.getVal();
        String valor = "";
        if(valor1.equalsIgnoreCase("false") || valor1.equalsIgnoreCase("falso")){
            if(valor2.equalsIgnoreCase("false") || valor2.equalsIgnoreCase("falso")){
                valor = "true";
            }else{
                valor = "false";
            }
        }else{
            valor = "false";
        }
        ExprVal expresionDev = new ExprVal("boolean",valor);  
        return expresionDev;
    }

    private ExprVal validarXOR(ExprVal val1,ExprVal val2){
        String valor1 = val1.getVal();
        String valor2 = val2.getVal();
        String valor = "";
        if(valor1.equalsIgnoreCase("true") || valor1.equalsIgnoreCase("verdadero")){
            if(valor2.equalsIgnoreCase("true") || valor2.equalsIgnoreCase("verdadero")){
                valor = "false";
            }else{
                valor = "true";
            }
        }else{
            if(valor2.equalsIgnoreCase("true") || valor2.equalsIgnoreCase("verdadero")){
                valor = "true";
            }else{
                valor = "false";
            }            
        }
        ExprVal expresionDev = new ExprVal("boolean",valor);  
        return expresionDev;
    }

    private int parseStringToInt(String val){
        int valR = 0;
        Double valD = Double.parseDouble(val);
        valR = (int)Math.round(valD);
        return valR;
    }

    private void insertarExprValResp(ExprVal val){
        this.expresionResp = val;
    }

    public ExprVal getExpresionResp(){
        return this.expresionResp;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserValExpr$actions {
  private final ParserValExpr parser;

  /** Constructor */
  CUP$ParserValExpr$actions(ParserValExpr parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserValExpr$do_action_part00000000(
    int                        CUP$ParserValExpr$act_num,
    java_cup.runtime.lr_parser CUP$ParserValExpr$parser,
    java.util.Stack            CUP$ParserValExpr$stack,
    int                        CUP$ParserValExpr$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserValExpr$result;

      /* select the action based on the action number */
      switch (CUP$ParserValExpr$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-1)).value;
		RESULT = start_val;
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-1)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserValExpr$parser.done_parsing();
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= log1 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		insertarExprValResp((ExprVal)val);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // log1 ::= log2 OR log1 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarOR((ExprVal)val1,(ExprVal)val2);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("log1",7, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // log1 ::= log2 NOR log1 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarNOR((ExprVal)val1,(ExprVal)val2);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("log1",7, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // log1 ::= log2 XOR log1 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarXOR((ExprVal)val1,(ExprVal)val2);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("log1",7, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // log1 ::= log2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = val;
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("log1",7, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // log2 ::= log3 AND log2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarAND((ExprVal)val1,(ExprVal)val2);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("log2",8, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // log2 ::= log3 NAND log2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarNAND((ExprVal)val1,(ExprVal)val2);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("log2",8, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // log2 ::= log3 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = val;
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("log2",8, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // log3 ::= OPNOT rel 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarNot((ExprVal)val);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("log3",9, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-1)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // log3 ::= rel 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = val;
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("log3",9, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // rel ::= rel2 DOBIGUAL rel 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarDobIg((ExprVal)val1,(ExprVal)val2,"==");
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("rel",5, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rel ::= rel2 DIFERENC rel 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarDobIg((ExprVal)val1,(ExprVal)val2,"!=");
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("rel",5, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rel ::= rel2 MAY rel 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarMayMenIg((ExprVal)val1,(ExprVal)val2,">");
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("rel",5, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rel ::= rel2 MEN rel 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarMayMenIg((ExprVal)val1,(ExprVal)val2,"<");
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("rel",5, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // rel ::= rel2 MAYIG rel 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarMayMenIg((ExprVal)val1,(ExprVal)val2,">=");
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("rel",5, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rel ::= rel2 MENIG rel 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarMayMenIg((ExprVal)val1,(ExprVal)val2,"<=");
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("rel",5, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rel ::= rel2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = val;
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("rel",5, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rel2 ::= OPNULO expr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = validarNulo((ExprVal)val);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("rel2",6, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-1)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rel2 ::= expr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = val;
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("rel2",6, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr SUMA term 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = sumar((ExprVal)val1,(ExprVal)val2);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr RESTA term 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = restar((ExprVal)val1,(ExprVal)val2);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= term 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = val;
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // term ::= term MULT fact 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = multiplicar((ExprVal)val1,(ExprVal)val2);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= term DIVI fact 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = dividir((ExprVal)val1,(ExprVal)val2);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= term OPMOD fact 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = obtenerMod((ExprVal)val1,(ExprVal)val2);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= fact 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = val;
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fact ::= elem OPELV fact 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = elevar((ExprVal)val1,(ExprVal)val2);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("fact",3, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fact ::= elem 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = val;
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("fact",3, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // elem ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = crearExpresion("cadena",val);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("elem",4, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // elem ::= CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = crearExpresion("caracter",val);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("elem",4, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elem ::= NUMERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = crearExpresion("numero",val);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("elem",4, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // elem ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = crearExpresion("boolean",val);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("elem",4, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // elem ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = crearExpresion("boolean",val);
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("elem",4, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elem ::= NULO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.peek()).value;
		RESULT = crearExpresion("nulo","nulo");
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("elem",4, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elem ::= PARI log1 PARD 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-1)).value;
		RESULT = val;
              CUP$ParserValExpr$result = parser.getSymbolFactory().newSymbol("elem",4, ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.elementAt(CUP$ParserValExpr$top-2)), ((java_cup.runtime.Symbol)CUP$ParserValExpr$stack.peek()), RESULT);
            }
          return CUP$ParserValExpr$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserValExpr$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserValExpr$do_action(
    int                        CUP$ParserValExpr$act_num,
    java_cup.runtime.lr_parser CUP$ParserValExpr$parser,
    java.util.Stack            CUP$ParserValExpr$stack,
    int                        CUP$ParserValExpr$top)
    throws java.lang.Exception
    {
              return CUP$ParserValExpr$do_action_part00000000(
                               CUP$ParserValExpr$act_num,
                               CUP$ParserValExpr$parser,
                               CUP$ParserValExpr$stack,
                               CUP$ParserValExpr$top);
    }
}

}
