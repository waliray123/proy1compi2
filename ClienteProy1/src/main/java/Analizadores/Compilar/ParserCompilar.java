
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Compilar;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Analizadores.ErrorCom;
import Objetos.Pista;
import Objetos.Expresion;
import Objetos.Instruccion;
import Objetos.Parametro;
import Objetos.Condicion;
import Objetos.Lista;
import Objetos.Instrucciones.Asignacion;
import Objetos.Instrucciones.Dimension;
import Objetos.Instrucciones.Declaracion;
import Objetos.Instrucciones.Funcion;
import Objetos.Instrucciones.DeclDim;
import Objetos.Instrucciones.CondSi;
import Objetos.Instrucciones.Para;
import Objetos.Instrucciones.Mientras;
import Objetos.Instrucciones.CasoC;
import Objetos.Instrucciones.SwitchC;
import Objetos.Instrucciones.IncrDecr;
import java.util.Stack;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCompilar extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCompilar() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCompilar(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCompilar(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\002\002\004\000\002\067\002\000\002\002" +
    "\005\000\002\070\002\000\002\002\005\000\002\071\002" +
    "\000\002\002\005\000\002\072\002\000\002\002\005\000" +
    "\002\073\002\000\002\002\005\000\002\074\002\000\002" +
    "\002\005\000\002\075\002\000\002\002\005\000\002\076" +
    "\002\000\002\002\005\000\002\077\002\000\002\002\005" +
    "\000\002\100\002\000\002\002\005\000\002\101\002\000" +
    "\002\002\005\000\002\102\002\000\002\002\005\000\002" +
    "\103\002\000\002\002\005\000\002\002\003\000\002\002" +
    "\002\000\002\104\002\000\002\003\006\000\002\105\002" +
    "\000\002\004\006\000\002\004\002\000\002\106\002\000" +
    "\002\005\006\000\002\005\002\000\002\107\002\000\002" +
    "\006\005\000\002\110\002\000\002\006\004\000\002\111" +
    "\002\000\002\007\010\000\002\112\002\000\002\113\002" +
    "\000\002\114\002\000\002\007\017\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\115\002\000\002\010\006\000\002\010" +
    "\002\000\002\116\002\000\002\117\002\000\002\023\007" +
    "\000\002\023\002\000\002\120\002\000\002\015\005\000" +
    "\002\015\002\000\002\121\002\000\002\012\005\000\002" +
    "\122\002\000\002\123\002\000\002\124\002\000\002\012" +
    "\013\000\002\125\002\000\002\012\005\000\002\126\002" +
    "\000\002\012\005\000\002\127\002\000\002\012\005\000" +
    "\002\130\002\000\002\012\005\000\002\131\002\000\002" +
    "\012\005\000\002\132\002\000\002\133\002\000\002\012" +
    "\010\000\002\134\002\000\002\012\005\000\002\135\002" +
    "\000\002\136\002\000\002\024\007\000\002\024\002\000" +
    "\002\137\002\000\002\014\005\000\002\014\002\000\002" +
    "\140\002\000\002\047\005\000\002\141\002\000\002\142" +
    "\002\000\002\143\002\000\002\047\013\000\002\144\002" +
    "\000\002\047\005\000\002\145\002\000\002\047\005\000" +
    "\002\146\002\000\002\047\005\000\002\147\002\000\002" +
    "\047\005\000\002\150\002\000\002\047\005\000\002\151" +
    "\002\000\002\152\002\000\002\047\010\000\002\153\002" +
    "\000\002\047\005\000\002\047\003\000\002\154\002\000" +
    "\002\155\002\000\002\050\007\000\002\050\002\000\002" +
    "\156\002\000\002\051\005\000\002\157\002\000\002\051" +
    "\005\000\002\160\002\000\002\051\005\000\002\051\002" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\161\002\000\002\011\005\000\002\011\002\000\002\162" +
    "\002\000\002\017\006\000\002\017\002\000\002\020\004" +
    "\000\002\163\002\000\002\020\005\000\002\021\004\000" +
    "\002\021\002\000\002\164\002\000\002\022\006\000\002" +
    "\022\002\000\002\165\002\000\002\025\006\000\002\166" +
    "\002\000\002\025\006\000\002\167\002\000\002\170\002" +
    "\000\002\171\002\000\002\025\014\000\002\172\002\000" +
    "\002\173\002\000\002\026\007\000\002\026\002\000\002" +
    "\174\002\000\002\027\011\000\002\175\002\000\002\027" +
    "\010\000\002\176\002\000\002\027\007\000\002\177\002" +
    "\000\002\030\006\000\002\200\002\000\002\030\005\000" +
    "\002\030\002\000\002\031\004\000\002\031\002\000\002" +
    "\201\002\000\002\032\007\000\002\202\002\000\002\032" +
    "\007\000\002\032\003\000\002\203\002\000\002\204\002" +
    "\000\002\205\002\000\002\033\013\000\002\033\004\000" +
    "\002\206\002\000\002\207\002\000\002\210\002\000\002" +
    "\033\013\000\002\037\003\000\002\037\002\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\211\002\000" +
    "\002\035\005\000\002\035\002\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\212\002\000\002\213\002\000\002\214\002" +
    "\000\002\040\017\000\002\041\003\000\002\041\003\000" +
    "\002\215\002\000\002\042\006\000\002\216\002\000\002" +
    "\042\006\000\002\217\002\000\002\220\002\000\002\221" +
    "\002\000\002\042\014\000\002\061\003\000\002\061\002" +
    "\000\002\222\002\000\002\223\002\000\002\043\010\000" +
    "\002\043\003\000\002\043\003\000\002\224\002\000\002" +
    "\044\007\000\002\225\002\000\002\044\007\000\002\226" +
    "\002\000\002\044\007\000\002\227\002\000\002\230\002" +
    "\000\002\045\012\000\002\231\002\000\002\045\007\000" +
    "\002\232\002\000\002\045\005\000\002\233\002\000\002" +
    "\045\006\000\002\234\002\000\002\045\007\000\002\235" +
    "\002\000\002\046\007\000\002\236\002\000\002\046\005" +
    "\000\002\046\003\000\002\046\003\000\002\052\004\000" +
    "\002\052\004\000\002\237\002\000\002\053\007\000\002" +
    "\240\002\000\002\241\002\000\002\053\012\000\002\242" +
    "\002\000\002\053\007\000\002\243\002\000\002\053\007" +
    "\000\002\244\002\000\002\054\006\000\002\245\002\000" +
    "\002\054\005\000\002\054\002\000\002\056\004\000\002" +
    "\056\002\000\002\246\002\000\002\055\005\000\002\247" +
    "\002\000\002\250\002\000\002\251\002\000\002\055\013" +
    "\000\002\252\002\000\002\055\005\000\002\253\002\000" +
    "\002\055\005\000\002\254\002\000\002\055\005\000\002" +
    "\255\002\000\002\055\005\000\002\256\002\000\002\055" +
    "\005\000\002\257\002\000\002\260\002\000\002\055\010" +
    "\000\002\261\002\000\002\055\005\000\002\262\002\000" +
    "\002\263\002\000\002\060\007\000\002\060\002\000\002" +
    "\264\002\000\002\057\005\000\002\265\002\000\002\057" +
    "\005\000\002\266\002\000\002\057\005\000\002\057\002" +
    "\000\002\267\002\000\002\062\010\000\002\270\002\000" +
    "\002\063\007\000\002\271\002\000\002\063\007\000\002" +
    "\272\002\000\002\063\007\000\002\063\010\000\002\063" +
    "\004\000\002\064\004\000\002\064\002\000\002\065\003" +
    "\000\002\065\003\000\002\273\002\000\002\066\006\000" +
    "\002\066\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01fb\000\100\002\uffe5\004\022\006\026\007\uffda\011" +
    "\011\012\020\013\054\014\040\015\004\016\015\017\047" +
    "\020\053\021\021\022\050\023\024\024\034\025\033\026" +
    "\051\027\046\030\044\031\007\032\017\033\030\040\032" +
    "\041\025\042\014\043\041\044\013\045\052\106\035\107" +
    "\031\001\002\000\022\073\uff13\074\uff13\107\uff13\110\uff13" +
    "\111\uff13\112\uff13\113\uff13\114\uff13\001\002\000\100\002" +
    "\uffec\004\uffec\006\uffec\007\uffec\011\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\033\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\045\uffec\106\uffec\107\uffec\001\002\000\100" +
    "\002\uffee\004\uffee\006\uffee\007\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\106\uffee\107\uffee\001\002\000" +
    "\004\074\uff22\001\002\000\100\002\uffe8\004\uffe8\006\uffe8" +
    "\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\106\uffe8\107\uffe8\001\002\000\004\074\u01ee\001\002\000" +
    "\100\002\ufff8\004\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\106\ufff8\107\ufff8\001\002" +
    "\000\006\010\uffcf\107\uffcf\001\002\000\006\010\uffd1\107" +
    "\uffd1\001\002\000\100\002\ufffe\004\ufffe\006\ufffe\007\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\106\ufffe" +
    "\107\ufffe\001\002\000\004\002\u01e9\001\002\000\004\074" +
    "\uff19\001\002\000\100\002\uff55\004\uff55\006\uff55\007\uff55" +
    "\011\uff55\012\uff55\013\uff55\014\uff55\015\uff55\016\uff55\017" +
    "\uff55\020\uff55\021\uff55\022\uff55\023\uff55\024\uff55\025\uff55" +
    "\026\uff55\027\uff55\030\uff55\031\uff55\032\uff55\033\uff55\040" +
    "\uff55\041\uff55\042\uff55\043\uff55\044\uff55\045\uff55\106\uff55" +
    "\107\uff55\001\002\000\004\074\uff2b\001\002\000\004\107" +
    "\u01d6\001\002\000\004\007\u01a2\001\002\000\100\002\uff27" +
    "\004\uff27\006\uff27\007\uff27\011\uff27\012\uff27\013\uff27\014" +
    "\uff27\015\uff27\016\uff27\017\uff27\020\uff27\021\uff27\022\uff27" +
    "\023\uff27\024\uff27\025\uff27\026\uff27\027\uff27\030\uff27\031" +
    "\uff27\032\uff27\033\uff27\040\uff27\041\uff27\042\uff27\043\uff27" +
    "\044\uff27\045\uff27\106\uff27\107\uff27\001\002\000\006\010" +
    "\uffd2\107\uffd2\001\002\000\020\007\uffdc\032\u019a\041\025" +
    "\042\014\043\041\044\013\045\052\001\002\000\004\107" +
    "\u0195\001\002\000\004\102\u0171\001\002\000\016\046\u015c" +
    "\047\u015f\050\uff72\074\uff62\076\uff6e\105\uff70\001\002\000" +
    "\100\002\uff10\004\uff10\006\uff10\007\uff10\011\uff10\012\uff10" +
    "\013\uff10\014\uff10\015\uff10\016\uff10\017\uff10\020\uff10\021" +
    "\uff10\022\uff10\023\uff10\024\uff10\025\uff10\026\uff10\027\uff10" +
    "\030\uff10\031\uff10\032\uff10\033\uff10\040\uff10\041\uff10\042" +
    "\uff10\043\uff10\044\uff10\045\uff10\106\uff10\107\uff10\001\002" +
    "\000\004\074\uff20\001\002\000\030\025\uff1b\027\uff1b\030" +
    "\uff1b\073\uff1b\074\uff1b\107\uff1b\110\uff1b\111\uff1b\112\uff1b" +
    "\113\uff1b\114\uff1b\001\002\000\100\002\000\004\000\006" +
    "\000\007\000\011\000\012\000\013\000\014\000\015\000" +
    "\016\000\017\000\020\000\021\000\022\000\023\000\024" +
    "\000\025\000\026\000\027\000\030\000\031\000\032\000" +
    "\033\000\040\000\041\000\042\000\043\000\044\000\045" +
    "\000\106\000\107\000\001\002\000\100\002\ufff6\004\ufff6" +
    "\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\033\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\106\ufff6\107\ufff6\001\002\000\100\002\ufff4\004" +
    "\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\106\ufff4\107\ufff4\001\002\000\004\074\uff15" +
    "\001\002\000\006\010\uffd0\107\uffd0\001\002\000\100\002" +
    "\uffea\004\uffea\006\uffea\007\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\106\uffea\107\uffea\001\002\000\100" +
    "\002\ufff0\004\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\106\ufff0\107\ufff0\001\002\000" +
    "\004\074\uff24\001\002\000\100\002\ufff2\004\ufff2\006\ufff2" +
    "\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2" +
    "\106\ufff2\107\ufff2\001\002\000\004\074\uff26\001\002\000" +
    "\100\002\uff11\004\uff11\006\uff11\007\uff11\011\uff11\012\uff11" +
    "\013\uff11\014\uff11\015\uff11\016\uff11\017\uff11\020\uff11\021" +
    "\uff11\022\uff11\023\uff11\024\uff11\025\uff11\026\uff11\027\uff11" +
    "\030\uff11\031\uff11\032\uff11\033\uff11\040\uff11\041\uff11\042" +
    "\uff11\043\uff11\044\uff11\045\uff11\106\uff11\107\uff11\001\002" +
    "\000\100\002\uff28\004\uff28\006\uff28\007\uff28\011\uff28\012" +
    "\uff28\013\uff28\014\uff28\015\uff28\016\uff28\017\uff28\020\uff28" +
    "\021\uff28\022\uff28\023\uff28\024\uff28\025\uff28\026\uff28\027" +
    "\uff28\030\uff28\031\uff28\032\uff28\033\uff28\040\uff28\041\uff28" +
    "\042\uff28\043\uff28\044\uff28\045\uff28\106\uff28\107\uff28\001" +
    "\002\000\004\074\uff1d\001\002\000\006\010\uffce\107\uffce" +
    "\001\002\000\004\074\uff3b\001\002\000\004\074\064\001" +
    "\002\000\004\002\uffe6\001\002\000\100\002\ufffa\004\ufffa" +
    "\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\106\ufffa\107\ufffa\001\002\000\100\002\ufffc\004" +
    "\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\045\ufffc\106\ufffc\107\ufffc\001\002\000\100\002\uffe5" +
    "\004\022\006\026\007\uffda\011\011\012\020\013\054\014" +
    "\040\015\004\016\015\017\047\020\053\021\021\022\050" +
    "\023\024\024\034\025\033\026\051\027\046\030\044\031" +
    "\007\032\017\033\030\040\032\041\025\042\014\043\041" +
    "\044\013\045\052\106\035\107\031\001\002\000\004\002" +
    "\ufffb\001\002\000\100\002\uffe5\004\022\006\026\007\uffda" +
    "\011\011\012\020\013\054\014\040\015\004\016\015\017" +
    "\047\020\053\021\021\022\050\023\024\024\034\025\033" +
    "\026\051\027\046\030\044\031\007\032\017\033\030\040" +
    "\032\041\025\042\014\043\041\044\013\045\052\106\035" +
    "\107\031\001\002\000\004\002\ufff9\001\002\000\024\063" +
    "\uff57\073\uff57\074\uff57\107\uff57\110\uff57\111\uff57\112\uff57" +
    "\113\uff57\114\uff57\001\002\000\024\063\066\073\uff4a\074" +
    "\uff4a\107\uff4a\110\uff4a\111\uff4a\112\uff4a\113\uff4a\114\uff4a" +
    "\001\002\000\022\073\uff4b\074\uff4b\107\uff4b\110\uff4b\111" +
    "\uff4b\112\uff4b\113\uff4b\114\uff4b\001\002\000\022\073\073" +
    "\074\077\107\100\110\072\111\102\112\076\113\101\114" +
    "\074\001\002\000\004\075\071\001\002\000\100\002\uff56" +
    "\004\uff56\006\uff56\007\uff56\011\uff56\012\uff56\013\uff56\014" +
    "\uff56\015\uff56\016\uff56\017\uff56\020\uff56\021\uff56\022\uff56" +
    "\023\uff56\024\uff56\025\uff56\026\uff56\027\uff56\030\uff56\031" +
    "\uff56\032\uff56\033\uff56\040\uff56\041\uff56\042\uff56\043\uff56" +
    "\044\uff56\045\uff56\106\uff56\107\uff56\001\002\000\154\002" +
    "\uffbb\004\uffbb\006\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\064" +
    "\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb" +
    "\075\uffbb\077\uffbb\101\uffbb\103\uffbb\104\uffbb\106\uffbb\107" +
    "\uffbb\001\002\000\022\073\uffb0\074\uffb0\107\uffb0\110\uffb0" +
    "\111\uffb0\112\uffb0\113\uffb0\114\uffb0\001\002\000\154\002" +
    "\uffb5\004\uffb5\006\uffb5\007\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5" +
    "\075\uffb5\077\uffb5\101\uffb5\103\uffb5\104\uffb5\106\uffb5\107" +
    "\uffb5\001\002\000\034\057\154\060\153\061\150\062\156" +
    "\064\151\065\152\066\155\067\160\070\147\071\146\072" +
    "\161\075\uff50\103\uff50\001\002\000\154\002\uffbd\004\uffbd" +
    "\006\uffbd\007\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\064\uffbd\065\uffbd" +
    "\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\075\uffbd\077" +
    "\uffbd\101\uffbd\103\uffbd\104\uffbd\106\uffbd\107\uffbd\001\002" +
    "\000\022\073\uffb3\074\uffb3\107\uffb3\110\uffb3\111\uffb3\112" +
    "\uffb3\113\uffb3\114\uffb3\001\002\000\156\002\uffc3\004\uffc3" +
    "\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\075\uffc3\076" +
    "\120\077\uffc3\101\uffc3\103\uffc3\104\uffc3\106\uffc3\107\uffc3" +
    "\001\002\000\154\002\uffb7\004\uffb7\006\uffb7\007\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070" +
    "\uffb7\071\uffb7\072\uffb7\075\uffb7\077\uffb7\101\uffb7\103\uffb7" +
    "\104\uffb7\106\uffb7\107\uffb7\001\002\000\154\002\uffb9\004" +
    "\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\075\uffb9" +
    "\077\uffb9\101\uffb9\103\uffb9\104\uffb9\106\uffb9\107\uffb9\001" +
    "\002\000\154\002\uffa8\004\uffa8\006\uffa8\007\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\040\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\051\111\052\104" +
    "\053\106\054\112\055\107\056\105\057\uffa8\060\uffa8\061" +
    "\uffa8\062\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\071\uffa8\072\uffa8\075\uffa8\077\uffa8\101\uffa8\103\uffa8\104" +
    "\uffa8\106\uffa8\107\uffa8\001\002\000\030\025\uff85\027\uff85" +
    "\030\uff85\073\uff85\074\uff85\107\uff85\110\uff85\111\uff85\112" +
    "\uff85\113\uff85\114\uff85\001\002\000\030\025\uff82\027\uff82" +
    "\030\uff82\073\uff82\074\uff82\107\uff82\110\uff82\111\uff82\112" +
    "\uff82\113\uff82\114\uff82\001\002\000\030\025\uff84\027\uff84" +
    "\030\uff84\073\uff84\074\uff84\107\uff84\110\uff84\111\uff84\112" +
    "\uff84\113\uff84\114\uff84\001\002\000\030\025\uff81\027\uff81" +
    "\030\uff81\073\uff81\074\uff81\107\uff81\110\uff81\111\uff81\112" +
    "\uff81\113\uff81\114\uff81\001\002\000\140\002\uffb8\004\uffb8" +
    "\006\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\075\uffb8" +
    "\077\uffb8\101\uffb8\103\uffb8\104\uffb8\106\uffb8\107\uffb8\001" +
    "\002\000\030\025\uff86\027\uff86\030\uff86\073\uff86\074\uff86" +
    "\107\uff86\110\uff86\111\uff86\112\uff86\113\uff86\114\uff86\001" +
    "\002\000\030\025\uff83\027\uff83\030\uff83\073\uff83\074\uff83" +
    "\107\uff83\110\uff83\111\uff83\112\uff83\113\uff83\114\uff83\001" +
    "\002\000\022\073\uffaa\074\uffaa\107\uffaa\110\uffaa\111\uffaa" +
    "\112\uffaa\113\uffaa\114\uffaa\001\002\000\022\073\073\074" +
    "\077\107\100\110\072\111\102\112\076\113\101\114\074" +
    "\001\002\000\140\002\uffa9\004\uffa9\006\uffa9\007\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9" +
    "\070\uffa9\071\uffa9\072\uffa9\075\uffa9\077\uffa9\101\uffa9\103" +
    "\uffa9\104\uffa9\106\uffa9\107\uffa9\001\002\000\154\002\uffa8" +
    "\004\uffa8\006\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\051\111\052\104\053\106\054\112\055" +
    "\107\056\105\057\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\075" +
    "\uffa8\077\uffa8\101\uffa8\103\uffa8\104\uffa8\106\uffa8\107\uffa8" +
    "\001\002\000\140\002\uffb6\004\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\075\uffb6\077\uffb6\101\uffb6\103" +
    "\uffb6\104\uffb6\106\uffb6\107\uffb6\001\002\000\022\073\uffc1" +
    "\074\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\114" +
    "\uffc1\001\002\000\154\002\uffa8\004\uffa8\006\uffa8\007\uffa8" +
    "\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\051\111" +
    "\052\104\053\106\054\112\055\107\056\105\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8" +
    "\070\uffa8\071\uffa8\072\uffa8\075\uffa8\077\uffa8\101\uffa8\103" +
    "\uffa8\104\uffa8\106\uffa8\107\uffa8\001\002\000\140\002\uffc2" +
    "\004\uffc2\006\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\064" +
    "\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2" +
    "\075\uffc2\077\uffc2\101\uffc2\103\uffc2\104\uffc2\106\uffc2\107" +
    "\uffc2\001\002\000\022\073\073\074\077\107\100\110\072" +
    "\111\102\112\076\113\101\114\074\001\002\000\004\077" +
    "\uffc0\001\002\000\004\077\126\001\002\000\156\002\uffab" +
    "\004\uffab\006\uffab\007\uffab\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\064\uffab" +
    "\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\075" +
    "\uffab\076\130\077\uffab\101\uffab\103\uffab\104\uffab\106\uffab" +
    "\107\uffab\001\002\000\154\002\uffbf\004\uffbf\006\uffbf\007" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\070\uffbf\071\uffbf\072\uffbf\075\uffbf\077\uffbf\101\uffbf" +
    "\103\uffbf\104\uffbf\106\uffbf\107\uffbf\001\002\000\022\073" +
    "\uffae\074\uffae\107\uffae\110\uffae\111\uffae\112\uffae\113\uffae" +
    "\114\uffae\001\002\000\022\073\073\074\077\107\100\110" +
    "\072\111\102\112\076\113\101\114\074\001\002\000\004" +
    "\077\uffad\001\002\000\004\077\134\001\002\000\154\002" +
    "\uffac\004\uffac\006\uffac\007\uffac\011\uffac\012\uffac\013\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\064" +
    "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac" +
    "\075\uffac\077\uffac\101\uffac\103\uffac\104\uffac\106\uffac\107" +
    "\uffac\001\002\000\154\002\uffa8\004\uffa8\006\uffa8\007\uffa8" +
    "\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\051\111" +
    "\052\104\053\106\054\112\055\107\056\105\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8" +
    "\070\uffa8\071\uffa8\072\uffa8\075\uffa8\077\uffa8\101\uffa8\103" +
    "\uffa8\104\uffa8\106\uffa8\107\uffa8\001\002\000\140\002\uffbe" +
    "\004\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\064" +
    "\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe" +
    "\075\uffbe\077\uffbe\101\uffbe\103\uffbe\104\uffbe\106\uffbe\107" +
    "\uffbe\001\002\000\022\073\073\074\077\107\100\110\072" +
    "\111\102\112\076\113\101\114\074\001\002\000\004\075" +
    "\141\001\002\000\154\002\uffb2\004\uffb2\006\uffb2\007\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2" +
    "\070\uffb2\071\uffb2\072\uffb2\075\uffb2\077\uffb2\101\uffb2\103" +
    "\uffb2\104\uffb2\106\uffb2\107\uffb2\001\002\000\154\002\uffa8" +
    "\004\uffa8\006\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\051\111\052\104\053\106\054\112\055" +
    "\107\056\105\057\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\075" +
    "\uffa8\077\uffa8\101\uffa8\103\uffa8\104\uffa8\106\uffa8\107\uffa8" +
    "\001\002\000\140\002\uffb1\004\uffb1\006\uffb1\007\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1" +
    "\070\uffb1\071\uffb1\072\uffb1\075\uffb1\077\uffb1\101\uffb1\103" +
    "\uffb1\104\uffb1\106\uffb1\107\uffb1\001\002\000\154\002\uffa8" +
    "\004\uffa8\006\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\051\111\052\104\053\106\054\112\055" +
    "\107\056\105\057\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\075" +
    "\uffa8\077\uffa8\101\uffa8\103\uffa8\104\uffa8\106\uffa8\107\uffa8" +
    "\001\002\000\140\002\uffbc\004\uffbc\006\uffbc\007\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc" +
    "\070\uffbc\071\uffbc\072\uffbc\075\uffbc\077\uffbc\101\uffbc\103" +
    "\uffbc\104\uffbc\106\uffbc\107\uffbc\001\002\000\032\025\uff40" +
    "\027\uff40\030\uff40\063\uff40\073\uff40\074\uff40\107\uff40\110" +
    "\uff40\111\uff40\112\uff40\113\uff40\114\uff40\001\002\000\032" +
    "\025\uff3d\027\uff3d\030\uff3d\063\uff3d\073\uff3d\074\uff3d\107" +
    "\uff3d\110\uff3d\111\uff3d\112\uff3d\113\uff3d\114\uff3d\001\002" +
    "\000\032\025\uff45\027\uff45\030\uff45\063\uff45\073\uff45\074" +
    "\uff45\107\uff45\110\uff45\111\uff45\112\uff45\113\uff45\114\uff45" +
    "\001\002\000\032\025\uff47\027\uff47\030\uff47\063\uff47\073" +
    "\uff47\074\uff47\107\uff47\110\uff47\111\uff47\112\uff47\113\uff47" +
    "\114\uff47\001\002\000\032\025\uff46\027\uff46\030\uff46\063" +
    "\uff46\073\uff46\074\uff46\107\uff46\110\uff46\111\uff46\112\uff46" +
    "\113\uff46\114\uff46\001\002\000\032\025\uff48\027\uff48\030" +
    "\uff48\063\uff48\073\uff48\074\uff48\107\uff48\110\uff48\111\uff48" +
    "\112\uff48\113\uff48\114\uff48\001\002\000\032\025\uff49\027" +
    "\uff49\030\uff49\063\uff49\073\uff49\074\uff49\107\uff49\110\uff49" +
    "\111\uff49\112\uff49\113\uff49\114\uff49\001\002\000\032\025" +
    "\uff3f\027\uff3f\030\uff3f\063\uff3f\073\uff3f\074\uff3f\107\uff3f" +
    "\110\uff3f\111\uff3f\112\uff3f\113\uff3f\114\uff3f\001\002\000" +
    "\032\025\uff44\027\uff44\030\uff44\063\uff44\073\uff44\074\uff44" +
    "\107\uff44\110\uff44\111\uff44\112\uff44\113\uff44\114\uff44\001" +
    "\002\000\024\063\uff4f\073\uff4f\074\uff4f\107\uff4f\110\uff4f" +
    "\111\uff4f\112\uff4f\113\uff4f\114\uff4f\001\002\000\032\025" +
    "\uff3c\027\uff3c\030\uff3c\063\uff3c\073\uff3c\074\uff3c\107\uff3c" +
    "\110\uff3c\111\uff3c\112\uff3c\113\uff3c\114\uff3c\001\002\000" +
    "\032\025\uff3e\027\uff3e\030\uff3e\063\uff3e\073\uff3e\074\uff3e" +
    "\107\uff3e\110\uff3e\111\uff3e\112\uff3e\113\uff3e\114\uff3e\001" +
    "\002\000\024\063\uff54\073\uff54\074\uff54\107\uff54\110\uff54" +
    "\111\uff54\112\uff54\113\uff54\114\uff54\001\002\000\024\063" +
    "\066\073\uff4a\074\uff4a\107\uff4a\110\uff4a\111\uff4a\112\uff4a" +
    "\113\uff4a\114\uff4a\001\002\000\022\073\uff53\074\uff53\107" +
    "\uff53\110\uff53\111\uff53\112\uff53\113\uff53\114\uff53\001\002" +
    "\000\022\073\073\074\077\107\100\110\072\111\102\112" +
    "\076\113\101\114\074\001\002\000\020\066\uff52\067\uff52" +
    "\070\uff52\071\uff52\072\uff52\075\uff52\103\uff52\001\002\000" +
    "\020\066\155\067\160\070\147\071\146\072\161\075\uff41" +
    "\103\uff41\001\002\000\006\075\uff51\103\uff51\001\002\000" +
    "\024\063\uff43\073\uff43\074\uff43\107\uff43\110\uff43\111\uff43" +
    "\112\uff43\113\uff43\114\uff43\001\002\000\024\063\066\073" +
    "\uff4a\074\uff4a\107\uff4a\110\uff4a\111\uff4a\112\uff4a\113\uff4a" +
    "\114\uff4a\001\002\000\006\075\uff42\103\uff42\001\002\000" +
    "\024\063\066\073\uff4a\074\uff4a\107\uff4a\110\uff4a\111\uff4a" +
    "\112\uff4a\113\uff4a\114\uff4a\001\002\000\022\073\uff4e\074" +
    "\uff4e\107\uff4e\110\uff4e\111\uff4e\112\uff4e\113\uff4e\114\uff4e" +
    "\001\002\000\022\073\073\074\077\107\100\110\072\111" +
    "\102\112\076\113\101\114\074\001\002\000\020\066\uff4d" +
    "\067\uff4d\070\uff4d\071\uff4d\072\uff4d\075\uff4d\103\uff4d\001" +
    "\002\000\020\066\155\067\160\070\147\071\146\072\161" +
    "\075\uff41\103\uff41\001\002\000\006\075\uff4c\103\uff4c\001" +
    "\002\000\154\002\uffa8\004\uffa8\006\uffa8\007\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\040\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\051\111\052\104" +
    "\053\106\054\112\055\107\056\105\057\uffa8\060\uffa8\061" +
    "\uffa8\062\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\071\uffa8\072\uffa8\075\uffa8\077\uffa8\101\uffa8\103\uffa8\104" +
    "\uffa8\106\uffa8\107\uffa8\001\002\000\140\002\uffb4\004\uffb4" +
    "\006\uffb4\007\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\075\uffb4" +
    "\077\uffb4\101\uffb4\103\uffb4\104\uffb4\106\uffb4\107\uffb4\001" +
    "\002\000\022\073\073\074\077\107\100\110\072\111\102" +
    "\112\076\113\101\114\074\001\002\000\140\002\uffaf\004" +
    "\uffaf\006\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\064\uffaf" +
    "\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\075" +
    "\uffaf\077\uffaf\101\uffaf\103\uffaf\104\uffaf\106\uffaf\107\uffaf" +
    "\001\002\000\154\002\uffa8\004\uffa8\006\uffa8\007\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\051\111\052" +
    "\104\053\106\054\112\055\107\056\105\057\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070" +
    "\uffa8\071\uffa8\072\uffa8\075\uffa8\077\uffa8\101\uffa8\103\uffa8" +
    "\104\uffa8\106\uffa8\107\uffa8\001\002\000\140\002\uffba\004" +
    "\uffba\006\uffba\007\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\045\uffba\057\uffba\060\uffba\061\uffba\062\uffba\064\uffba" +
    "\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\075" +
    "\uffba\077\uffba\101\uffba\103\uffba\104\uffba\106\uffba\107\uffba" +
    "\001\002\000\004\074\211\001\002\000\016\041\025\042" +
    "\014\043\041\044\013\045\052\107\uff2c\001\002\000\004" +
    "\107\214\001\002\000\004\107\uff2d\001\002\000\010\050" +
    "\uff35\076\uff31\105\uff33\001\002\000\004\103\216\001\002" +
    "\000\024\063\uff3a\073\uff3a\074\uff3a\107\uff3a\110\uff3a\111" +
    "\uff3a\112\uff3a\113\uff3a\114\uff3a\001\002\000\024\063\066" +
    "\073\uff4a\074\uff4a\107\uff4a\110\uff4a\111\uff4a\112\uff4a\113" +
    "\uff4a\114\uff4a\001\002\000\004\103\221\001\002\000\004" +
    "\107\222\001\002\000\006\046\223\047\225\001\002\000" +
    "\004\075\uff37\001\002\000\004\075\uff39\001\002\000\004" +
    "\075\uff36\001\002\000\004\075\227\001\002\000\100\002" +
    "\uff38\004\uff38\006\uff38\007\uff38\011\uff38\012\uff38\013\uff38" +
    "\014\uff38\015\uff38\016\uff38\017\uff38\020\uff38\021\uff38\022" +
    "\uff38\023\uff38\024\uff38\025\uff38\026\uff38\027\uff38\030\uff38" +
    "\031\uff38\032\uff38\033\uff38\040\uff38\041\uff38\042\uff38\043" +
    "\uff38\044\uff38\045\uff38\106\uff38\107\uff38\001\002\000\004" +
    "\076\237\001\002\000\004\105\235\001\002\000\004\050" +
    "\233\001\002\000\022\073\073\074\077\107\100\110\072" +
    "\111\102\112\076\113\101\114\074\001\002\000\004\103" +
    "\uff34\001\002\000\022\073\073\074\077\107\100\110\072" +
    "\111\102\112\076\113\101\114\074\001\002\000\004\103" +
    "\uff32\001\002\000\022\073\uff30\074\uff30\107\uff30\110\uff30" +
    "\111\uff30\112\uff30\113\uff30\114\uff30\001\002\000\022\073" +
    "\073\074\077\107\100\110\072\111\102\112\076\113\101" +
    "\114\074\001\002\000\004\077\uff2f\001\002\000\004\077" +
    "\243\001\002\000\006\076\245\105\uff67\001\002\000\004" +
    "\105\252\001\002\000\022\073\uff6a\074\uff6a\107\uff6a\110" +
    "\uff6a\111\uff6a\112\uff6a\113\uff6a\114\uff6a\001\002\000\022" +
    "\073\073\074\077\107\100\110\072\111\102\112\076\113" +
    "\101\114\074\001\002\000\004\077\uff69\001\002\000\004" +
    "\077\251\001\002\000\004\105\uff68\001\002\000\022\073" +
    "\073\074\077\107\100\110\072\111\102\112\076\113\101" +
    "\114\074\001\002\000\004\103\uff2e\001\002\000\004\074" +
    "\255\001\002\000\044\025\uff5e\027\uff5e\030\uff5e\041\025" +
    "\042\014\043\041\044\013\045\052\073\uff5e\074\uff5e\075" +
    "\uff5c\107\uff5e\110\uff5e\111\uff5e\112\uff5e\113\uff5e\114\uff5e" +
    "\001\002\000\004\075\u013a\001\002\000\030\025\272\027" +
    "\273\030\276\073\267\074\274\107\277\110\266\111\301" +
    "\112\275\113\300\114\270\001\002\000\004\107\261\001" +
    "\002\000\006\075\uff60\104\uff60\001\002\000\006\075\uff5a" +
    "\104\263\001\002\000\044\025\uff5e\027\uff5e\030\uff5e\041" +
    "\025\042\014\043\041\044\013\045\052\073\uff5e\074\uff5e" +
    "\075\uff5c\107\uff5e\110\uff5e\111\uff5e\112\uff5e\113\uff5e\114" +
    "\uff5e\001\002\000\004\075\uff5f\001\002\000\004\075\uff5b" +
    "\001\002\000\150\002\uff9f\004\uff9f\006\uff9f\007\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f" +
    "\061\uff9f\062\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070" +
    "\uff9f\071\uff9f\072\uff9f\075\uff9f\077\uff9f\104\uff9f\106\uff9f" +
    "\107\uff9f\001\002\000\030\025\uff94\027\uff94\030\uff94\073" +
    "\uff94\074\uff94\107\uff94\110\uff94\111\uff94\112\uff94\113\uff94" +
    "\114\uff94\001\002\000\150\002\uff99\004\uff99\006\uff99\007" +
    "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\064\uff99\065\uff99\066\uff99\067" +
    "\uff99\070\uff99\071\uff99\072\uff99\075\uff99\077\uff99\104\uff99" +
    "\106\uff99\107\uff99\001\002\000\006\075\uff5a\104\263\001" +
    "\002\000\004\074\uff0b\001\002\000\004\074\uff08\001\002" +
    "\000\030\025\uff97\027\uff97\030\uff97\073\uff97\074\uff97\107" +
    "\uff97\110\uff97\111\uff97\112\uff97\113\uff97\114\uff97\001\002" +
    "\000\150\002\uffa1\004\uffa1\006\uffa1\007\uffa1\011\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\075\uffa1\077\uffa1\104\uffa1\106\uffa1\107\uffa1" +
    "\001\002\000\004\074\uff06\001\002\000\154\002\uffa7\004" +
    "\uffa7\006\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\032\uffa7\033\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\064\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\074\uff0d" +
    "\075\uffa7\076\322\077\uffa7\104\uffa7\106\uffa7\107\uffa7\001" +
    "\002\000\150\002\uff9b\004\uff9b\006\uff9b\007\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\040\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b" +
    "\071\uff9b\072\uff9b\075\uff9b\077\uff9b\104\uff9b\106\uff9b\107" +
    "\uff9b\001\002\000\150\002\uff9d\004\uff9d\006\uff9d\007\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d" +
    "\070\uff9d\071\uff9d\072\uff9d\075\uff9d\077\uff9d\104\uff9d\106" +
    "\uff9d\107\uff9d\001\002\000\106\002\uff92\004\uff92\006\uff92" +
    "\007\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016" +
    "\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033" +
    "\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92" +
    "\075\uff92\077\uff92\104\uff92\106\uff92\107\uff92\001\002\000" +
    "\150\002\uff87\004\uff87\006\uff87\007\uff87\011\uff87\012\uff87" +
    "\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021" +
    "\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87" +
    "\030\uff87\031\uff87\032\uff87\033\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\044\uff87\045\uff87\051\111\052\104\053\106" +
    "\054\112\055\107\056\105\057\154\060\153\061\150\062" +
    "\156\064\151\065\152\066\155\067\160\070\147\071\146" +
    "\072\161\075\uff87\077\uff87\104\uff87\106\uff87\107\uff87\001" +
    "\002\000\030\025\uff8d\027\uff8d\030\uff8d\073\uff8d\074\uff8d" +
    "\107\uff8d\110\uff8d\111\uff8d\112\uff8d\113\uff8d\114\uff8d\001" +
    "\002\000\030\025\uff89\027\uff89\030\uff89\073\uff89\074\uff89" +
    "\107\uff89\110\uff89\111\uff89\112\uff89\113\uff89\114\uff89\001" +
    "\002\000\030\025\uff8b\027\uff8b\030\uff8b\073\uff8b\074\uff8b" +
    "\107\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b\114\uff8b\001" +
    "\002\000\106\002\uff9c\004\uff9c\006\uff9c\007\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\075\uff9c\077\uff9c" +
    "\104\uff9c\106\uff9c\107\uff9c\001\002\000\030\025\272\027" +
    "\273\030\276\073\267\074\274\107\277\110\266\111\301" +
    "\112\275\113\300\114\270\001\002\000\106\002\uff8a\004" +
    "\uff8a\006\uff8a\007\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a" +
    "\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a" +
    "\032\uff8a\033\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\075\uff8a\077\uff8a\104\uff8a\106\uff8a\107\uff8a" +
    "\001\002\000\030\025\272\027\273\030\276\073\267\074" +
    "\274\107\277\110\266\111\301\112\275\113\300\114\270" +
    "\001\002\000\106\002\uff88\004\uff88\006\uff88\007\uff88\011" +
    "\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88" +
    "\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\040\uff88" +
    "\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\075\uff88\077" +
    "\uff88\104\uff88\106\uff88\107\uff88\001\002\000\030\025\272" +
    "\027\273\030\276\073\267\074\274\107\277\110\266\111" +
    "\301\112\275\113\300\114\270\001\002\000\106\002\uff8c" +
    "\004\uff8c\006\uff8c\007\uff8c\011\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\033\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\075\uff8c\077\uff8c\104\uff8c\106\uff8c\107" +
    "\uff8c\001\002\000\150\002\uff87\004\uff87\006\uff87\007\uff87" +
    "\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017" +
    "\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\040" +
    "\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\051\111" +
    "\052\104\053\106\054\112\055\107\056\105\057\154\060" +
    "\153\061\150\062\156\064\151\065\152\066\155\067\160" +
    "\070\147\071\146\072\161\075\uff87\077\uff87\104\uff87\106" +
    "\uff87\107\uff87\001\002\000\106\002\uff9a\004\uff9a\006\uff9a" +
    "\007\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\075\uff9a\077\uff9a\104\uff9a\106\uff9a\107\uff9a\001\002\000" +
    "\004\074\340\001\002\000\150\002\uff87\004\uff87\006\uff87" +
    "\007\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016" +
    "\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87" +
    "\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87" +
    "\051\111\052\104\053\106\054\112\055\107\056\105\057" +
    "\154\060\153\061\150\062\156\064\151\065\152\066\155" +
    "\067\160\070\147\071\146\072\161\075\uff87\077\uff87\104" +
    "\uff87\106\uff87\107\uff87\001\002\000\030\025\uffa5\027\uffa5" +
    "\030\uffa5\073\uffa5\074\uffa5\107\uffa5\110\uffa5\111\uffa5\112" +
    "\uffa5\113\uffa5\114\uffa5\001\002\000\030\025\272\027\273" +
    "\030\276\073\267\074\274\107\277\110\266\111\301\112" +
    "\275\113\300\114\270\001\002\000\004\077\uffa4\001\002" +
    "\000\004\077\326\001\002\000\152\002\uff8e\004\uff8e\006" +
    "\uff8e\007\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e" +
    "\033\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e" +
    "\057\uff8e\060\uff8e\061\uff8e\062\uff8e\064\uff8e\065\uff8e\066" +
    "\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\075\uff8e\076\330" +
    "\077\uff8e\104\uff8e\106\uff8e\107\uff8e\001\002\000\150\002" +
    "\uffa3\004\uffa3\006\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\075\uffa3\077\uffa3\104\uffa3\106\uffa3\107\uffa3\001\002\000" +
    "\030\025\uff91\027\uff91\030\uff91\073\uff91\074\uff91\107\uff91" +
    "\110\uff91\111\uff91\112\uff91\113\uff91\114\uff91\001\002\000" +
    "\030\025\272\027\273\030\276\073\267\074\274\107\277" +
    "\110\266\111\301\112\275\113\300\114\270\001\002\000" +
    "\004\077\uff90\001\002\000\004\077\334\001\002\000\150" +
    "\002\uff8f\004\uff8f\006\uff8f\007\uff8f\011\uff8f\012\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030" +
    "\uff8f\031\uff8f\032\uff8f\033\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\051\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f" +
    "\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072" +
    "\uff8f\075\uff8f\077\uff8f\104\uff8f\106\uff8f\107\uff8f\001\002" +
    "\000\150\002\uff87\004\uff87\006\uff87\007\uff87\011\uff87\012" +
    "\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87" +
    "\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027" +
    "\uff87\030\uff87\031\uff87\032\uff87\033\uff87\040\uff87\041\uff87" +
    "\042\uff87\043\uff87\044\uff87\045\uff87\051\111\052\104\053" +
    "\106\054\112\055\107\056\105\057\154\060\153\061\150" +
    "\062\156\064\151\065\152\066\155\067\160\070\147\071" +
    "\146\072\161\075\uff87\077\uff87\104\uff87\106\uff87\107\uff87" +
    "\001\002\000\106\002\uffa2\004\uffa2\006\uffa2\007\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\075\uffa2\077" +
    "\uffa2\104\uffa2\106\uffa2\107\uffa2\001\002\000\106\002\uffa6" +
    "\004\uffa6\006\uffa6\007\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\075\uffa6\077\uffa6\104\uffa6\106\uffa6\107" +
    "\uffa6\001\002\000\036\041\025\042\014\043\041\044\013" +
    "\045\052\073\uff02\074\uff02\075\uff00\107\uff02\110\uff02\111" +
    "\uff02\112\uff02\113\uff02\114\uff02\001\002\000\004\075\u011c" +
    "\001\002\000\022\073\352\074\355\107\357\110\351\111" +
    "\361\112\356\113\360\114\353\001\002\000\004\107\344" +
    "\001\002\000\006\075\uff04\104\uff04\001\002\000\006\075" +
    "\ufefe\104\346\001\002\000\036\041\025\042\014\043\041" +
    "\044\013\045\052\073\uff02\074\uff02\075\uff00\107\uff02\110" +
    "\uff02\111\uff02\112\uff02\113\uff02\114\uff02\001\002\000\004" +
    "\075\uff03\001\002\000\004\075\ufeff\001\002\000\052\051" +
    "\ufef5\052\ufef5\053\ufef5\054\ufef5\055\ufef5\056\ufef5\057\ufef5" +
    "\060\ufef5\061\ufef5\062\ufef5\064\ufef5\065\ufef5\066\ufef5\067" +
    "\ufef5\070\ufef5\071\ufef5\072\ufef5\075\ufef5\077\ufef5\104\ufef5" +
    "\001\002\000\022\073\ufeea\074\ufeea\107\ufeea\110\ufeea\111" +
    "\ufeea\112\ufeea\113\ufeea\114\ufeea\001\002\000\052\051\ufeef" +
    "\052\ufeef\053\ufeef\054\ufeef\055\ufeef\056\ufeef\057\ufeef\060" +
    "\ufeef\061\ufeef\062\ufeef\064\ufeef\065\ufeef\066\ufeef\067\ufeef" +
    "\070\ufeef\071\ufeef\072\ufeef\075\ufeef\077\ufeef\104\ufeef\001" +
    "\002\000\006\075\ufefe\104\346\001\002\000\022\073\ufeed" +
    "\074\ufeed\107\ufeed\110\ufeed\111\ufeed\112\ufeed\113\ufeed\114" +
    "\ufeed\001\002\000\052\051\ufef7\052\ufef7\053\ufef7\054\ufef7" +
    "\055\ufef7\056\ufef7\057\ufef7\060\ufef7\061\ufef7\062\ufef7\064" +
    "\ufef7\065\ufef7\066\ufef7\067\ufef7\070\ufef7\071\ufef7\072\ufef7" +
    "\075\ufef7\077\ufef7\104\ufef7\001\002\000\054\051\ufefd\052" +
    "\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd" +
    "\061\ufefd\062\ufefd\064\ufefd\065\ufefd\066\ufefd\067\ufefd\070" +
    "\ufefd\071\ufefd\072\ufefd\075\ufefd\076\377\077\ufefd\104\ufefd" +
    "\001\002\000\052\051\ufef1\052\ufef1\053\ufef1\054\ufef1\055" +
    "\ufef1\056\ufef1\057\ufef1\060\ufef1\061\ufef1\062\ufef1\064\ufef1" +
    "\065\ufef1\066\ufef1\067\ufef1\070\ufef1\071\ufef1\072\ufef1\075" +
    "\ufef1\077\ufef1\104\ufef1\001\002\000\052\051\ufef3\052\ufef3" +
    "\053\ufef3\054\ufef3\055\ufef3\056\ufef3\057\ufef3\060\ufef3\061" +
    "\ufef3\062\ufef3\064\ufef3\065\ufef3\066\ufef3\067\ufef3\070\ufef3" +
    "\071\ufef3\072\ufef3\075\ufef3\077\ufef3\104\ufef3\001\002\000" +
    "\052\051\111\052\104\053\106\054\112\055\107\056\105" +
    "\057\154\060\153\061\150\062\156\064\151\065\152\066" +
    "\155\067\160\070\147\071\146\072\161\075\ufede\077\ufede" +
    "\104\ufede\001\002\000\022\073\ufee4\074\ufee4\107\ufee4\110" +
    "\ufee4\111\ufee4\112\ufee4\113\ufee4\114\ufee4\001\002\000\022" +
    "\073\ufee0\074\ufee0\107\ufee0\110\ufee0\111\ufee0\112\ufee0\113" +
    "\ufee0\114\ufee0\001\002\000\022\073\ufee2\074\ufee2\107\ufee2" +
    "\110\ufee2\111\ufee2\112\ufee2\113\ufee2\114\ufee2\001\002\000" +
    "\010\075\ufef2\077\ufef2\104\ufef2\001\002\000\022\073\352" +
    "\074\355\107\357\110\351\111\361\112\356\113\360\114" +
    "\353\001\002\000\010\075\ufee1\077\ufee1\104\ufee1\001\002" +
    "\000\022\073\352\074\355\107\357\110\351\111\361\112" +
    "\356\113\360\114\353\001\002\000\010\075\ufedf\077\ufedf" +
    "\104\ufedf\001\002\000\022\073\352\074\355\107\357\110" +
    "\351\111\361\112\356\113\360\114\353\001\002\000\010" +
    "\075\ufee3\077\ufee3\104\ufee3\001\002\000\052\051\111\052" +
    "\104\053\106\054\112\055\107\056\105\057\154\060\153" +
    "\061\150\062\156\064\151\065\152\066\155\067\160\070" +
    "\147\071\146\072\161\075\ufede\077\ufede\104\ufede\001\002" +
    "\000\010\075\ufef0\077\ufef0\104\ufef0\001\002\000\022\073" +
    "\ufefb\074\ufefb\107\ufefb\110\ufefb\111\ufefb\112\ufefb\113\ufefb" +
    "\114\ufefb\001\002\000\052\051\111\052\104\053\106\054" +
    "\112\055\107\056\105\057\154\060\153\061\150\062\156" +
    "\064\151\065\152\066\155\067\160\070\147\071\146\072" +
    "\161\075\ufede\077\ufede\104\ufede\001\002\000\010\075\ufefc" +
    "\077\ufefc\104\ufefc\001\002\000\022\073\352\074\355\107" +
    "\357\110\351\111\361\112\356\113\360\114\353\001\002" +
    "\000\004\077\ufefa\001\002\000\004\077\u0105\001\002\000" +
    "\054\051\ufee5\052\ufee5\053\ufee5\054\ufee5\055\ufee5\056\ufee5" +
    "\057\ufee5\060\ufee5\061\ufee5\062\ufee5\064\ufee5\065\ufee5\066" +
    "\ufee5\067\ufee5\070\ufee5\071\ufee5\072\ufee5\075\ufee5\076\u0107" +
    "\077\ufee5\104\ufee5\001\002\000\052\051\ufef9\052\ufef9\053" +
    "\ufef9\054\ufef9\055\ufef9\056\ufef9\057\ufef9\060\ufef9\061\ufef9" +
    "\062\ufef9\064\ufef9\065\ufef9\066\ufef9\067\ufef9\070\ufef9\071" +
    "\ufef9\072\ufef9\075\ufef9\077\ufef9\104\ufef9\001\002\000\022" +
    "\073\ufee8\074\ufee8\107\ufee8\110\ufee8\111\ufee8\112\ufee8\113" +
    "\ufee8\114\ufee8\001\002\000\022\073\352\074\355\107\357" +
    "\110\351\111\361\112\356\113\360\114\353\001\002\000" +
    "\004\077\ufee7\001\002\000\004\077\u010b\001\002\000\052" +
    "\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055\ufee6\056\ufee6\057" +
    "\ufee6\060\ufee6\061\ufee6\062\ufee6\064\ufee6\065\ufee6\066\ufee6" +
    "\067\ufee6\070\ufee6\071\ufee6\072\ufee6\075\ufee6\077\ufee6\104" +
    "\ufee6\001\002\000\052\051\111\052\104\053\106\054\112" +
    "\055\107\056\105\057\154\060\153\061\150\062\156\064" +
    "\151\065\152\066\155\067\160\070\147\071\146\072\161" +
    "\075\ufede\077\ufede\104\ufede\001\002\000\010\075\ufef8\077" +
    "\ufef8\104\ufef8\001\002\000\052\051\111\052\104\053\106" +
    "\054\112\055\107\056\105\057\154\060\153\061\150\062" +
    "\156\064\151\065\152\066\155\067\160\070\147\071\146" +
    "\072\161\075\ufede\077\ufede\104\ufede\001\002\000\010\075" +
    "\ufef6\077\ufef6\104\ufef6\001\002\000\022\073\352\074\355" +
    "\107\357\110\351\111\361\112\356\113\360\114\353\001" +
    "\002\000\004\075\u0112\001\002\000\052\051\ufeec\052\ufeec" +
    "\053\ufeec\054\ufeec\055\ufeec\056\ufeec\057\ufeec\060\ufeec\061" +
    "\ufeec\062\ufeec\064\ufeec\065\ufeec\066\ufeec\067\ufeec\070\ufeec" +
    "\071\ufeec\072\ufeec\075\ufeec\077\ufeec\104\ufeec\001\002\000" +
    "\052\051\111\052\104\053\106\054\112\055\107\056\105" +
    "\057\154\060\153\061\150\062\156\064\151\065\152\066" +
    "\155\067\160\070\147\071\146\072\161\075\ufede\077\ufede" +
    "\104\ufede\001\002\000\010\075\ufeeb\077\ufeeb\104\ufeeb\001" +
    "\002\000\004\075\uff01\001\002\000\052\051\111\052\104" +
    "\053\106\054\112\055\107\056\105\057\154\060\153\061" +
    "\150\062\156\064\151\065\152\066\155\067\160\070\147" +
    "\071\146\072\161\075\ufede\077\ufede\104\ufede\001\002\000" +
    "\010\075\ufeee\077\ufeee\104\ufeee\001\002\000\022\073\352" +
    "\074\355\107\357\110\351\111\361\112\356\113\360\114" +
    "\353\001\002\000\010\075\ufee9\077\ufee9\104\ufee9\001\002" +
    "\000\052\051\111\052\104\053\106\054\112\055\107\056" +
    "\105\057\154\060\153\061\150\062\156\064\151\065\152" +
    "\066\155\067\160\070\147\071\146\072\161\075\ufede\077" +
    "\ufede\104\ufede\001\002\000\010\075\ufef4\077\ufef4\104\ufef4" +
    "\001\002\000\106\002\uff0c\004\uff0c\006\uff0c\007\uff0c\011" +
    "\uff0c\012\uff0c\013\uff0c\014\uff0c\015\uff0c\016\uff0c\017\uff0c" +
    "\020\uff0c\021\uff0c\022\uff0c\023\uff0c\024\uff0c\025\uff0c\026" +
    "\uff0c\027\uff0c\030\uff0c\031\uff0c\032\uff0c\033\uff0c\040\uff0c" +
    "\041\uff0c\042\uff0c\043\uff0c\044\uff0c\045\uff0c\075\uff0c\077" +
    "\uff0c\104\uff0c\106\uff0c\107\uff0c\001\002\000\004\074\u011e" +
    "\001\002\000\036\041\025\042\014\043\041\044\013\045" +
    "\052\073\uff02\074\uff02\075\uff00\107\uff02\110\uff02\111\uff02" +
    "\112\uff02\113\uff02\114\uff02\001\002\000\004\075\u0120\001" +
    "\002\000\106\002\uff05\004\uff05\006\uff05\007\uff05\011\uff05" +
    "\012\uff05\013\uff05\014\uff05\015\uff05\016\uff05\017\uff05\020" +
    "\uff05\021\uff05\022\uff05\023\uff05\024\uff05\025\uff05\026\uff05" +
    "\027\uff05\030\uff05\031\uff05\032\uff05\033\uff05\040\uff05\041" +
    "\uff05\042\uff05\043\uff05\044\uff05\045\uff05\075\uff05\077\uff05" +
    "\104\uff05\106\uff05\107\uff05\001\002\000\150\002\uff87\004" +
    "\uff87\006\uff87\007\uff87\011\uff87\012\uff87\013\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023" +
    "\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87" +
    "\032\uff87\033\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044" +
    "\uff87\045\uff87\051\111\052\104\053\106\054\112\055\107" +
    "\056\105\057\154\060\153\061\150\062\156\064\151\065" +
    "\152\066\155\067\160\070\147\071\146\072\161\075\uff87" +
    "\077\uff87\104\uff87\106\uff87\107\uff87\001\002\000\106\002" +
    "\uffa0\004\uffa0\006\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\075\uffa0\077\uffa0\104\uffa0\106\uffa0" +
    "\107\uffa0\001\002\000\030\025\272\027\273\030\276\073" +
    "\267\074\274\107\277\110\266\111\301\112\275\113\300" +
    "\114\270\001\002\000\004\075\u0125\001\002\000\150\002" +
    "\uff96\004\uff96\006\uff96\007\uff96\011\uff96\012\uff96\013\uff96" +
    "\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\040\uff96\041\uff96\042\uff96\043" +
    "\uff96\044\uff96\045\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\064" +
    "\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96" +
    "\075\uff96\077\uff96\104\uff96\106\uff96\107\uff96\001\002\000" +
    "\150\002\uff87\004\uff87\006\uff87\007\uff87\011\uff87\012\uff87" +
    "\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021" +
    "\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87" +
    "\030\uff87\031\uff87\032\uff87\033\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\044\uff87\045\uff87\051\111\052\104\053\106" +
    "\054\112\055\107\056\105\057\154\060\153\061\150\062" +
    "\156\064\151\065\152\066\155\067\160\070\147\071\146" +
    "\072\161\075\uff87\077\uff87\104\uff87\106\uff87\107\uff87\001" +
    "\002\000\106\002\uff95\004\uff95\006\uff95\007\uff95\011\uff95" +
    "\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\075\uff95\077\uff95" +
    "\104\uff95\106\uff95\107\uff95\001\002\000\004\074\u0129\001" +
    "\002\000\036\041\025\042\014\043\041\044\013\045\052" +
    "\073\uff02\074\uff02\075\uff00\107\uff02\110\uff02\111\uff02\112" +
    "\uff02\113\uff02\114\uff02\001\002\000\004\075\u012b\001\002" +
    "\000\106\002\uff07\004\uff07\006\uff07\007\uff07\011\uff07\012" +
    "\uff07\013\uff07\014\uff07\015\uff07\016\uff07\017\uff07\020\uff07" +
    "\021\uff07\022\uff07\023\uff07\024\uff07\025\uff07\026\uff07\027" +
    "\uff07\030\uff07\031\uff07\032\uff07\033\uff07\040\uff07\041\uff07" +
    "\042\uff07\043\uff07\044\uff07\045\uff07\075\uff07\077\uff07\104" +
    "\uff07\106\uff07\107\uff07\001\002\000\004\074\u012d\001\002" +
    "\000\004\115\u012e\001\002\000\004\104\uff0a\001\002\000" +
    "\004\104\u0130\001\002\000\036\041\025\042\014\043\041" +
    "\044\013\045\052\073\uff02\074\uff02\075\uff00\107\uff02\110" +
    "\uff02\111\uff02\112\uff02\113\uff02\114\uff02\001\002\000\004" +
    "\075\u0132\001\002\000\106\002\uff09\004\uff09\006\uff09\007" +
    "\uff09\011\uff09\012\uff09\013\uff09\014\uff09\015\uff09\016\uff09" +
    "\017\uff09\020\uff09\021\uff09\022\uff09\023\uff09\024\uff09\025" +
    "\uff09\026\uff09\027\uff09\030\uff09\031\uff09\032\uff09\033\uff09" +
    "\040\uff09\041\uff09\042\uff09\043\uff09\044\uff09\045\uff09\075" +
    "\uff09\077\uff09\104\uff09\106\uff09\107\uff09\001\002\000\004" +
    "\075\uff5d\001\002\000\150\002\uff87\004\uff87\006\uff87\007" +
    "\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87" +
    "\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\051" +
    "\111\052\104\053\106\054\112\055\107\056\105\057\154" +
    "\060\153\061\150\062\156\064\151\065\152\066\155\067" +
    "\160\070\147\071\146\072\161\075\uff87\077\uff87\104\uff87" +
    "\106\uff87\107\uff87\001\002\000\106\002\uff98\004\uff98\006" +
    "\uff98\007\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98" +
    "\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98" +
    "\033\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\075\uff98\077\uff98\104\uff98\106\uff98\107\uff98\001\002" +
    "\000\030\025\272\027\273\030\276\073\267\074\274\107" +
    "\277\110\266\111\301\112\275\113\300\114\270\001\002" +
    "\000\106\002\uff93\004\uff93\006\uff93\007\uff93\011\uff93\012" +
    "\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\033\uff93\040\uff93\041\uff93" +
    "\042\uff93\043\uff93\044\uff93\045\uff93\075\uff93\077\uff93\104" +
    "\uff93\106\uff93\107\uff93\001\002\000\150\002\uff87\004\uff87" +
    "\006\uff87\007\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015" +
    "\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87" +
    "\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032" +
    "\uff87\033\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87" +
    "\045\uff87\051\111\052\104\053\106\054\112\055\107\056" +
    "\105\057\154\060\153\061\150\062\156\064\151\065\152" +
    "\066\155\067\160\070\147\071\146\072\161\075\uff87\077" +
    "\uff87\104\uff87\106\uff87\107\uff87\001\002\000\106\002\uff9e" +
    "\004\uff9e\006\uff9e\007\uff9e\011\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\075\uff9e\077\uff9e\104\uff9e\106\uff9e\107" +
    "\uff9e\001\002\000\100\002\uff1c\004\uff1c\006\uff1c\007\uff1c" +
    "\011\uff1c\012\uff1c\013\uff1c\014\uff1c\015\uff1c\016\uff1c\017" +
    "\uff1c\020\uff1c\021\uff1c\022\uff1c\023\uff1c\024\uff1c\025\uff1c" +
    "\026\uff1c\027\uff1c\030\uff1c\031\uff1c\032\uff1c\033\uff1c\040" +
    "\uff1c\041\uff1c\042\uff1c\043\uff1c\044\uff1c\045\uff1c\106\uff1c" +
    "\107\uff1c\001\002\000\004\074\u013c\001\002\000\044\025" +
    "\uff5e\027\uff5e\030\uff5e\041\025\042\014\043\041\044\013" +
    "\045\052\073\uff5e\074\uff5e\075\uff5c\107\uff5e\110\uff5e\111" +
    "\uff5e\112\uff5e\113\uff5e\114\uff5e\001\002\000\004\075\u013e" +
    "\001\002\000\100\002\uff25\004\uff25\006\uff25\007\uff25\011" +
    "\uff25\012\uff25\013\uff25\014\uff25\015\uff25\016\uff25\017\uff25" +
    "\020\uff25\021\uff25\022\uff25\023\uff25\024\uff25\025\uff25\026" +
    "\uff25\027\uff25\030\uff25\031\uff25\032\uff25\033\uff25\040\uff25" +
    "\041\uff25\042\uff25\043\uff25\044\uff25\045\uff25\106\uff25\107" +
    "\uff25\001\002\000\100\002\uffe5\004\022\006\026\007\uffda" +
    "\011\011\012\020\013\054\014\040\015\004\016\015\017" +
    "\047\020\053\021\021\022\050\023\024\024\034\025\033" +
    "\026\051\027\046\030\044\031\007\032\017\033\030\040" +
    "\032\041\025\042\014\043\041\044\013\045\052\106\035" +
    "\107\031\001\002\000\004\002\ufff1\001\002\000\004\074" +
    "\u0142\001\002\000\044\025\uff5e\027\uff5e\030\uff5e\041\025" +
    "\042\014\043\041\044\013\045\052\073\uff5e\074\uff5e\075" +
    "\uff5c\107\uff5e\110\uff5e\111\uff5e\112\uff5e\113\uff5e\114\uff5e" +
    "\001\002\000\004\075\u0144\001\002\000\100\002\uff23\004" +
    "\uff23\006\uff23\007\uff23\011\uff23\012\uff23\013\uff23\014\uff23" +
    "\015\uff23\016\uff23\017\uff23\020\uff23\021\uff23\022\uff23\023" +
    "\uff23\024\uff23\025\uff23\026\uff23\027\uff23\030\uff23\031\uff23" +
    "\032\uff23\033\uff23\040\uff23\041\uff23\042\uff23\043\uff23\044" +
    "\uff23\045\uff23\106\uff23\107\uff23\001\002\000\100\002\uffe5" +
    "\004\022\006\026\007\uffda\011\011\012\020\013\054\014" +
    "\040\015\004\016\015\017\047\020\053\021\021\022\050" +
    "\023\024\024\034\025\033\026\051\027\046\030\044\031" +
    "\007\032\017\033\030\040\032\041\025\042\014\043\041" +
    "\044\013\045\052\106\035\107\031\001\002\000\004\002" +
    "\uffef\001\002\000\100\002\uffe5\004\022\006\026\007\uffda" +
    "\011\011\012\020\013\054\014\040\015\004\016\015\017" +
    "\047\020\053\021\021\022\050\023\024\024\034\025\033" +
    "\026\051\027\046\030\044\031\007\032\017\033\030\040" +
    "\032\041\025\042\014\043\041\044\013\045\052\106\035" +
    "\107\031\001\002\000\004\002\uffe9\001\002\000\004\074" +
    "\u014a\001\002\000\022\073\073\074\077\107\100\110\072" +
    "\111\102\112\076\113\101\114\074\001\002\000\004\075" +
    "\u014c\001\002\000\100\002\uff14\004\uff14\006\uff14\007\uff14" +
    "\011\uff14\012\uff14\013\uff14\014\uff14\015\uff14\016\uff14\017" +
    "\uff14\020\uff14\021\uff14\022\uff14\023\uff14\024\uff14\025\uff14" +
    "\026\uff14\027\uff14\030\uff14\031\uff14\032\uff14\033\uff14\040" +
    "\uff14\041\uff14\042\uff14\043\uff14\044\uff14\045\uff14\106\uff14" +
    "\107\uff14\001\002\000\100\002\uffe5\004\022\006\026\007" +
    "\uffda\011\011\012\020\013\054\014\040\015\004\016\015" +
    "\017\047\020\053\021\021\022\050\023\024\024\034\025" +
    "\033\026\051\027\046\030\044\031\007\032\017\033\030" +
    "\040\032\041\025\042\014\043\041\044\013\045\052\106" +
    "\035\107\031\001\002\000\004\002\ufff3\001\002\000\100" +
    "\002\uffe5\004\022\006\026\007\uffda\011\011\012\020\013" +
    "\054\014\040\015\004\016\015\017\047\020\053\021\021" +
    "\022\050\023\024\024\034\025\033\026\051\027\046\030" +
    "\044\031\007\032\017\033\030\040\032\041\025\042\014" +
    "\043\041\044\013\045\052\106\035\107\031\001\002\000" +
    "\004\002\ufff5\001\002\000\100\002\uffe5\004\022\006\026" +
    "\007\uffda\011\011\012\020\013\054\014\040\015\004\016" +
    "\015\017\047\020\053\021\021\022\050\023\024\024\034" +
    "\025\033\026\051\027\046\030\044\031\007\032\017\033" +
    "\030\040\032\041\025\042\014\043\041\044\013\045\052" +
    "\106\035\107\031\001\002\000\004\002\uffff\001\002\000" +
    "\030\025\272\027\273\030\276\073\267\074\274\107\277" +
    "\110\266\111\301\112\275\113\300\114\270\001\002\000" +
    "\100\002\uff1a\004\uff1a\006\uff1a\007\uff1a\011\uff1a\012\uff1a" +
    "\013\uff1a\014\uff1a\015\uff1a\016\uff1a\017\uff1a\020\uff1a\021" +
    "\uff1a\022\uff1a\023\uff1a\024\uff1a\025\uff1a\026\uff1a\027\uff1a" +
    "\030\uff1a\031\uff1a\032\uff1a\033\uff1a\040\uff1a\041\uff1a\042" +
    "\uff1a\043\uff1a\044\uff1a\045\uff1a\106\uff1a\107\uff1a\001\002" +
    "\000\004\074\u0156\001\002\000\004\115\u0157\001\002\000" +
    "\004\104\uff1f\001\002\000\004\104\u0159\001\002\000\044" +
    "\025\uff5e\027\uff5e\030\uff5e\041\025\042\014\043\041\044" +
    "\013\045\052\073\uff5e\074\uff5e\075\uff5c\107\uff5e\110\uff5e" +
    "\111\uff5e\112\uff5e\113\uff5e\114\uff5e\001\002\000\004\075" +
    "\u015b\001\002\000\100\002\uff1e\004\uff1e\006\uff1e\007\uff1e" +
    "\011\uff1e\012\uff1e\013\uff1e\014\uff1e\015\uff1e\016\uff1e\017" +
    "\uff1e\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\025\uff1e" +
    "\026\uff1e\027\uff1e\030\uff1e\031\uff1e\032\uff1e\033\uff1e\040" +
    "\uff1e\041\uff1e\042\uff1e\043\uff1e\044\uff1e\045\uff1e\106\uff1e" +
    "\107\uff1e\001\002\000\100\002\uff0f\004\uff0f\006\uff0f\007" +
    "\uff0f\011\uff0f\012\uff0f\013\uff0f\014\uff0f\015\uff0f\016\uff0f" +
    "\017\uff0f\020\uff0f\021\uff0f\022\uff0f\023\uff0f\024\uff0f\025" +
    "\uff0f\026\uff0f\027\uff0f\030\uff0f\031\uff0f\032\uff0f\033\uff0f" +
    "\040\uff0f\041\uff0f\042\uff0f\043\uff0f\044\uff0f\045\uff0f\106" +
    "\uff0f\107\uff0f\001\002\000\004\074\u016e\001\002\000\004" +
    "\076\u0166\001\002\000\100\002\uff0e\004\uff0e\006\uff0e\007" +
    "\uff0e\011\uff0e\012\uff0e\013\uff0e\014\uff0e\015\uff0e\016\uff0e" +
    "\017\uff0e\020\uff0e\021\uff0e\022\uff0e\023\uff0e\024\uff0e\025" +
    "\uff0e\026\uff0e\027\uff0e\030\uff0e\031\uff0e\032\uff0e\033\uff0e" +
    "\040\uff0e\041\uff0e\042\uff0e\043\uff0e\044\uff0e\045\uff0e\106" +
    "\uff0e\107\uff0e\001\002\000\004\105\u0164\001\002\000\004" +
    "\050\u0162\001\002\000\030\025\272\027\273\030\276\073" +
    "\267\074\274\107\277\110\266\111\301\112\275\113\300" +
    "\114\270\001\002\000\100\002\uff71\004\uff71\006\uff71\007" +
    "\uff71\011\uff71\012\uff71\013\uff71\014\uff71\015\uff71\016\uff71" +
    "\017\uff71\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025" +
    "\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71" +
    "\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\106" +
    "\uff71\107\uff71\001\002\000\030\025\272\027\273\030\276" +
    "\073\267\074\274\107\277\110\266\111\301\112\275\113" +
    "\300\114\270\001\002\000\100\002\uff6f\004\uff6f\006\uff6f" +
    "\007\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\016" +
    "\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f" +
    "\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033" +
    "\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f" +
    "\106\uff6f\107\uff6f\001\002\000\022\073\uff6d\074\uff6d\107" +
    "\uff6d\110\uff6d\111\uff6d\112\uff6d\113\uff6d\114\uff6d\001\002" +
    "\000\022\073\073\074\077\107\100\110\072\111\102\112" +
    "\076\113\101\114\074\001\002\000\004\077\uff6c\001\002" +
    "\000\004\077\u016a\001\002\000\006\076\245\105\uff67\001" +
    "\002\000\004\105\u016c\001\002\000\030\025\272\027\273" +
    "\030\276\073\267\074\274\107\277\110\266\111\301\112" +
    "\275\113\300\114\270\001\002\000\100\002\uff6b\004\uff6b" +
    "\006\uff6b\007\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b\015" +
    "\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\023\uff6b" +
    "\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032" +
    "\uff6b\033\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b" +
    "\045\uff6b\106\uff6b\107\uff6b\001\002\000\044\025\uff5e\027" +
    "\uff5e\030\uff5e\041\025\042\014\043\041\044\013\045\052" +
    "\073\uff5e\074\uff5e\075\uff5c\107\uff5e\110\uff5e\111\uff5e\112" +
    "\uff5e\113\uff5e\114\uff5e\001\002\000\004\075\u0170\001\002" +
    "\000\100\002\uff61\004\uff61\006\uff61\007\uff61\011\uff61\012" +
    "\uff61\013\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020\uff61" +
    "\021\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027" +
    "\uff61\030\uff61\031\uff61\032\uff61\033\uff61\040\uff61\041\uff61" +
    "\042\uff61\043\uff61\044\uff61\045\uff61\106\uff61\107\uff61\001" +
    "\002\000\004\100\u0172\001\002\000\014\034\ufedd\035\ufedd" +
    "\036\ufedd\037\ufedd\106\ufedd\001\002\000\014\034\u0178\035" +
    "\u0175\036\u0174\037\u0177\106\u0176\001\002\000\004\102\u0191" +
    "\001\002\000\004\102\u018b\001\002\000\014\034\u0178\035" +
    "\u0175\036\u0174\037\u0177\106\u0176\001\002\000\004\102\u0181" +
    "\001\002\000\004\102\u017b\001\002\000\004\101\u017a\001" +
    "\002\000\004\002\ufedc\001\002\000\004\110\u017c\001\002" +
    "\000\006\101\ufedb\104\ufedb\001\002\000\006\101\ufed2\104" +
    "\u017e\001\002\000\014\034\u0178\035\u0175\036\u0174\037\u0177" +
    "\106\u0176\001\002\000\004\101\ufeda\001\002\000\004\101" +
    "\ufed3\001\002\000\004\076\u0182\001\002\000\004\107\u0183" +
    "\001\002\000\006\077\ufecd\104\ufecf\001\002\000\004\077" +
    "\u0185\001\002\000\006\101\ufed2\104\u017e\001\002\000\004" +
    "\101\ufed5\001\002\000\004\104\u0188\001\002\000\004\107" +
    "\u0183\001\002\000\004\077\ufece\001\002\000\004\101\ufed4" +
    "\001\002\000\006\113\u018e\114\u018d\001\002\000\006\101" +
    "\ufed9\104\ufed9\001\002\000\006\101\ufed0\104\ufed0\001\002" +
    "\000\006\101\ufed1\104\ufed1\001\002\000\006\101\ufed2\104" +
    "\u017e\001\002\000\004\101\ufed8\001\002\000\006\113\u018e" +
    "\114\u018d\001\002\000\006\101\ufed7\104\ufed7\001\002\000" +
    "\006\101\ufed2\104\u017e\001\002\000\004\101\ufed6\001\002" +
    "\000\004\074\uff64\001\002\000\004\074\u0197\001\002\000" +
    "\044\025\uff5e\027\uff5e\030\uff5e\041\025\042\014\043\041" +
    "\044\013\045\052\073\uff5e\074\uff5e\075\uff5c\107\uff5e\110" +
    "\uff5e\111\uff5e\112\uff5e\113\uff5e\114\uff5e\001\002\000\004" +
    "\075\u0199\001\002\000\100\002\uff63\004\uff63\006\uff63\007" +
    "\uff63\011\uff63\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63" +
    "\017\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025" +
    "\uff63\026\uff63\027\uff63\030\uff63\031\uff63\032\uff63\033\uff63" +
    "\040\uff63\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63\106" +
    "\uff63\107\uff63\001\002\000\004\074\uff17\001\002\000\004" +
    "\007\u01a2\001\002\000\004\107\u019d\001\002\000\004\074" +
    "\uff66\001\002\000\004\074\u019f\001\002\000\044\025\uff5e" +
    "\027\uff5e\030\uff5e\041\025\042\014\043\041\044\013\045" +
    "\052\073\uff5e\074\uff5e\075\uff5c\107\uff5e\110\uff5e\111\uff5e" +
    "\112\uff5e\113\uff5e\114\uff5e\001\002\000\004\075\u01a1\001" +
    "\002\000\100\002\uff65\004\uff65\006\uff65\007\uff65\011\uff65" +
    "\012\uff65\013\uff65\014\uff65\015\uff65\016\uff65\017\uff65\020" +
    "\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026\uff65" +
    "\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65\040\uff65\041" +
    "\uff65\042\uff65\043\uff65\044\uff65\045\uff65\106\uff65\107\uff65" +
    "\001\002\000\014\041\025\042\014\043\041\044\013\045" +
    "\052\001\002\000\100\002\uffdb\004\uffdb\006\uffdb\007\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\106\uffdb" +
    "\107\uffdb\001\002\000\006\010\u01a6\107\u01a5\001\002\000" +
    "\104\002\uffd8\004\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\045\uffd8\104\uffd8\105\uffd8\106\uffd8" +
    "\107\uffd8\001\002\000\004\107\u01a7\001\002\000\006\076" +
    "\uffd6\104\uffd6\001\002\000\006\076\uffcb\104\u01a9\001\002" +
    "\000\004\107\u01c9\001\002\000\004\076\u01ab\001\002\000" +
    "\022\073\uffd5\074\uffd5\107\uffd5\110\uffd5\111\uffd5\112\uffd5" +
    "\113\uffd5\114\uffd5\001\002\000\022\073\073\074\077\107" +
    "\100\110\072\111\102\112\076\113\101\114\074\001\002" +
    "\000\004\077\uffd4\001\002\000\004\077\u01af\001\002\000" +
    "\104\002\uffc7\004\uffc7\006\uffc7\007\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\076\u01b1\105\uffc7\106\uffc7" +
    "\107\uffc7\001\002\000\102\002\uff7e\004\uff7e\006\uff7e\007" +
    "\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e\016\uff7e" +
    "\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025" +
    "\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e" +
    "\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\105" +
    "\u01b7\106\uff7e\107\uff7e\001\002\000\022\073\uffca\074\uffca" +
    "\107\uffca\110\uffca\111\uffca\112\uffca\113\uffca\114\uffca\001" +
    "\002\000\022\073\073\074\077\107\100\110\072\111\102" +
    "\112\076\113\101\114\074\001\002\000\004\077\uffc9\001" +
    "\002\000\004\077\u01b5\001\002\000\102\002\uffc8\004\uffc8" +
    "\006\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\105\uffc8\106\uffc8\107\uffc8\001\002\000\100\002" +
    "\uffd3\004\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\106\uffd3\107\uffd3\001\002\000\102" +
    "\002\uff80\004\uff80\006\uff80\007\uff80\011\uff80\012\uff80\013" +
    "\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80" +
    "\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\045\uff80\100\uff80\106\uff80\107\uff80\001" +
    "\002\000\102\002\uff7b\004\uff7b\006\uff7b\007\uff7b\011\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020" +
    "\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\040\uff7b\041" +
    "\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\100\u01b9\106\uff7b" +
    "\107\uff7b\001\002\000\030\073\uff7d\074\uff7d\100\uff7d\101" +
    "\uff7d\104\uff7d\107\uff7d\110\uff7d\111\uff7d\112\uff7d\113\uff7d" +
    "\114\uff7d\001\002\000\100\002\uff7f\004\uff7f\006\uff7f\007" +
    "\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f" +
    "\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025" +
    "\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f" +
    "\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\106" +
    "\uff7f\107\uff7f\001\002\000\030\073\uff79\074\uff79\100\u01b9" +
    "\101\uff7b\104\uff7b\107\uff79\110\uff79\111\uff79\112\uff79\113" +
    "\uff79\114\uff79\001\002\000\006\101\uff76\104\u01c6\001\002" +
    "\000\004\101\u01c5\001\002\000\022\073\073\074\077\107" +
    "\100\110\072\111\102\112\076\113\101\114\074\001\002" +
    "\000\006\101\uff73\104\u01c0\001\002\000\022\073\uff75\074" +
    "\uff75\107\uff75\110\uff75\111\uff75\112\uff75\113\uff75\114\uff75" +
    "\001\002\000\004\101\uff78\001\002\000\022\073\073\074" +
    "\077\107\100\110\072\111\102\112\076\113\101\114\074" +
    "\001\002\000\006\101\uff73\104\u01c0\001\002\000\004\101" +
    "\uff74\001\002\000\104\002\uff7c\004\uff7c\006\uff7c\007\uff7c" +
    "\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c\017" +
    "\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c" +
    "\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\040" +
    "\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\101\uff7c" +
    "\104\uff7c\106\uff7c\107\uff7c\001\002\000\006\100\u01b9\101" +
    "\uff7b\001\002\000\004\101\uff7a\001\002\000\004\101\uff77" +
    "\001\002\000\106\002\uffcd\004\uffcd\006\uffcd\007\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\076\uffcd\104" +
    "\uffcd\105\uffcd\106\uffcd\107\uffcd\001\002\000\106\002\uffcb" +
    "\004\uffcb\006\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\076\uffcb\104\u01a9\105\uffcb\106\uffcb\107" +
    "\uffcb\001\002\000\104\002\uffcc\004\uffcc\006\uffcc\007\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\076\uffcc" +
    "\105\uffcc\106\uffcc\107\uffcc\001\002\000\104\002\uffcb\004" +
    "\uffcb\006\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\104\u01a9\105\uffcb\106\uffcb\107\uffcb\001\002" +
    "\000\102\002\uffc4\004\uffc4\006\uffc4\007\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\105\u01cf\106\uffc4\107" +
    "\uffc4\001\002\000\100\002\uffd7\004\uffd7\006\uffd7\007\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\106\uffd7" +
    "\107\uffd7\001\002\000\030\025\uffc6\027\uffc6\030\uffc6\073" +
    "\uffc6\074\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6" +
    "\114\uffc6\001\002\000\030\025\272\027\273\030\276\073" +
    "\267\074\274\107\277\110\266\111\301\112\275\113\300" +
    "\114\270\001\002\000\100\002\uffc5\004\uffc5\006\uffc5\007" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\106" +
    "\uffc5\107\uffc5\001\002\000\004\074\u01d3\001\002\000\004" +
    "\075\u01d4\001\002\000\100\002\uff16\004\uff16\006\uff16\007" +
    "\uff16\011\uff16\012\uff16\013\uff16\014\uff16\015\uff16\016\uff16" +
    "\017\uff16\020\uff16\021\uff16\022\uff16\023\uff16\024\uff16\025" +
    "\uff16\026\uff16\027\uff16\030\uff16\031\uff16\032\uff16\033\uff16" +
    "\040\uff16\041\uff16\042\uff16\043\uff16\044\uff16\045\uff16\106" +
    "\uff16\107\uff16\001\002\000\100\002\uffd9\004\uffd9\006\uffd9" +
    "\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\106\uffd9\107\uffd9\001\002\000\102\002\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\106\uffe4\107\uffe4\001\002\000\102\002\uffe0" +
    "\004\uffe0\005\u01d8\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\106\uffe0\107\uffe0\001\002\000" +
    "\004\107\u01da\001\002\000\100\002\uffe3\004\uffe3\006\uffe3" +
    "\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\106\uffe3\107\uffe3\001\002\000\102\002\uffe2\004\uffe2\006" +
    "\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\104\uffe2\106\uffe2\107\uffe2\001\002\000\102\002\uffdd" +
    "\004\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\104\u01dc\106\uffdd\107\uffdd\001\002\000" +
    "\004\107\u01de\001\002\000\100\002\uffe1\004\uffe1\006\uffe1" +
    "\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\106\uffe1\107\uffe1\001\002\000\102\002\uffdf\004\uffdf\006" +
    "\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\104\uffdf\106\uffdf\107\uffdf\001\002\000\102\002\uffdd" +
    "\004\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\104\u01dc\106\uffdd\107\uffdd\001\002\000" +
    "\100\002\uffde\004\uffde\006\uffde\007\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\045\uffde\106\uffde\107\uffde\001\002" +
    "\000\004\074\u01e2\001\002\000\024\063\uff2a\073\uff2a\074" +
    "\uff2a\107\uff2a\110\uff2a\111\uff2a\112\uff2a\113\uff2a\114\uff2a" +
    "\001\002\000\024\063\066\073\uff4a\074\uff4a\107\uff4a\110" +
    "\uff4a\111\uff4a\112\uff4a\113\uff4a\114\uff4a\001\002\000\004" +
    "\075\u01e5\001\002\000\100\002\uff29\004\uff29\006\uff29\007" +
    "\uff29\011\uff29\012\uff29\013\uff29\014\uff29\015\uff29\016\uff29" +
    "\017\uff29\020\uff29\021\uff29\022\uff29\023\uff29\024\uff29\025" +
    "\uff29\026\uff29\027\uff29\030\uff29\031\uff29\032\uff29\033\uff29" +
    "\040\uff29\041\uff29\042\uff29\043\uff29\044\uff29\045\uff29\106" +
    "\uff29\107\uff29\001\002\000\004\074\u01e7\001\002\000\004" +
    "\075\u01e8\001\002\000\100\002\uff18\004\uff18\006\uff18\007" +
    "\uff18\011\uff18\012\uff18\013\uff18\014\uff18\015\uff18\016\uff18" +
    "\017\uff18\020\uff18\021\uff18\022\uff18\023\uff18\024\uff18\025" +
    "\uff18\026\uff18\027\uff18\030\uff18\031\uff18\032\uff18\033\uff18" +
    "\040\uff18\041\uff18\042\uff18\043\uff18\044\uff18\045\uff18\106" +
    "\uff18\107\uff18\001\002\000\004\002\001\001\002\000\100" +
    "\002\uffe5\004\022\006\026\007\uffda\011\011\012\020\013" +
    "\054\014\040\015\004\016\015\017\047\020\053\021\021" +
    "\022\050\023\024\024\034\025\033\026\051\027\046\030" +
    "\044\031\007\032\017\033\030\040\032\041\025\042\014" +
    "\043\041\044\013\045\052\106\035\107\031\001\002\000" +
    "\004\002\ufffd\001\002\000\100\002\uffe5\004\022\006\026" +
    "\007\uffda\011\011\012\020\013\054\014\040\015\004\016" +
    "\015\017\047\020\053\021\021\022\050\023\024\024\034" +
    "\025\033\026\051\027\046\030\044\031\007\032\017\033" +
    "\030\040\032\041\025\042\014\043\041\044\013\045\052" +
    "\106\035\107\031\001\002\000\004\002\ufff7\001\002\000" +
    "\024\063\uff59\073\uff59\074\uff59\107\uff59\110\uff59\111\uff59" +
    "\112\uff59\113\uff59\114\uff59\001\002\000\024\063\066\073" +
    "\uff4a\074\uff4a\107\uff4a\110\uff4a\111\uff4a\112\uff4a\113\uff4a" +
    "\114\uff4a\001\002\000\004\075\u01f1\001\002\000\100\002" +
    "\uff58\004\uff58\006\uff58\007\uff58\011\uff58\012\uff58\013\uff58" +
    "\014\uff58\015\uff58\016\uff58\017\uff58\020\uff58\021\uff58\022" +
    "\uff58\023\uff58\024\uff58\025\uff58\026\uff58\027\uff58\030\uff58" +
    "\031\uff58\032\uff58\033\uff58\040\uff58\041\uff58\042\uff58\043" +
    "\uff58\044\uff58\045\uff58\106\uff58\107\uff58\001\002\000\100" +
    "\002\uffe5\004\022\006\026\007\uffda\011\011\012\020\013" +
    "\054\014\040\015\004\016\015\017\047\020\053\021\021" +
    "\022\050\023\024\024\034\025\033\026\051\027\046\030" +
    "\044\031\007\032\017\033\030\040\032\041\025\042\014" +
    "\043\041\044\013\045\052\106\035\107\031\001\002\000" +
    "\004\002\uffe7\001\002\000\004\074\u01f5\001\002\000\044" +
    "\025\uff5e\027\uff5e\030\uff5e\041\025\042\014\043\041\044" +
    "\013\045\052\073\uff5e\074\uff5e\075\uff5c\107\uff5e\110\uff5e" +
    "\111\uff5e\112\uff5e\113\uff5e\114\uff5e\001\002\000\004\075" +
    "\u01f7\001\002\000\100\002\uff21\004\uff21\006\uff21\007\uff21" +
    "\011\uff21\012\uff21\013\uff21\014\uff21\015\uff21\016\uff21\017" +
    "\uff21\020\uff21\021\uff21\022\uff21\023\uff21\024\uff21\025\uff21" +
    "\026\uff21\027\uff21\030\uff21\031\uff21\032\uff21\033\uff21\040" +
    "\uff21\041\uff21\042\uff21\043\uff21\044\uff21\045\uff21\106\uff21" +
    "\107\uff21\001\002\000\100\002\uffe5\004\022\006\026\007" +
    "\uffda\011\011\012\020\013\054\014\040\015\004\016\015" +
    "\017\047\020\053\021\021\022\050\023\024\024\034\025" +
    "\033\026\051\027\046\030\044\031\007\032\017\033\030" +
    "\040\032\041\025\042\014\043\041\044\013\045\052\106" +
    "\035\107\031\001\002\000\004\002\uffed\001\002\000\100" +
    "\002\uffe5\004\022\006\026\007\uffda\011\011\012\020\013" +
    "\054\014\040\015\004\016\015\017\047\020\053\021\021" +
    "\022\050\023\024\024\034\025\033\026\051\027\046\030" +
    "\044\031\007\032\017\033\030\040\032\041\025\042\014" +
    "\043\041\044\013\045\052\106\035\107\031\001\002\000" +
    "\004\002\uffeb\001\002\000\022\073\073\074\077\107\100" +
    "\110\072\111\102\112\076\113\101\114\074\001\002\000" +
    "\100\002\uff12\004\uff12\006\uff12\007\uff12\011\uff12\012\uff12" +
    "\013\uff12\014\uff12\015\uff12\016\uff12\017\uff12\020\uff12\021" +
    "\uff12\022\uff12\023\uff12\024\uff12\025\uff12\026\uff12\027\uff12" +
    "\030\uff12\031\uff12\032\uff12\033\uff12\040\uff12\041\uff12\042" +
    "\uff12\043\uff12\044\uff12\045\uff12\106\uff12\107\uff12\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01fb\000\040\002\015\003\056\006\055\013\026\025" +
    "\011\027\035\032\036\040\044\043\042\044\005\045\004" +
    "\046\041\052\007\062\054\110\022\001\001\000\004\236" +
    "\u01fb\001\001\000\004\101\u01f9\001\001\000\004\100\u01f7" +
    "\001\001\000\004\226\u01f3\001\001\000\004\103\u01f1\001" +
    "\001\000\002\001\001\000\004\073\u01eb\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\u01e9\001\001\000" +
    "\002\001\001\000\004\233\u01e5\001\001\000\002\001\001" +
    "\000\004\222\u01e0\001\001\000\002\001\001\000\004\007" +
    "\u01d4\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\u019b\107\u019a\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\165\u0160\166\u015f\167\u015d\176\u015c\001\001" +
    "\000\002\001\001\000\004\227\u0154\001\001\000\004\232" +
    "\u0152\001\001\000\004\067\u0150\001\001\000\004\074\u014e" +
    "\001\001\000\004\075\u014c\001\001\000\004\235\u0148\001" +
    "\001\000\002\001\001\000\004\102\u0146\001\001\000\004" +
    "\077\u0144\001\001\000\004\225\u0140\001\001\000\004\076" +
    "\u013e\001\001\000\004\224\u013a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\231\253\001\001\000\002\001" +
    "\001\000\004\212\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\061\001\001\000\004\071\057\001" +
    "\001\000\040\002\060\003\056\006\055\013\026\025\011" +
    "\027\035\032\036\040\044\043\042\044\005\045\004\046" +
    "\041\052\007\062\054\110\022\001\001\000\002\001\001" +
    "\000\040\002\062\003\056\006\055\013\026\025\011\027" +
    "\035\032\036\040\044\043\042\044\005\045\004\046\041" +
    "\052\007\062\054\110\022\001\001\000\002\001\001\000" +
    "\004\202\064\001\001\000\006\033\067\037\066\001\001" +
    "\000\002\001\001\000\004\012\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\126\205\001\001\000\004" +
    "\134\203\001\001\000\004\131\201\001\001\000\006\034" +
    "\161\036\156\001\001\000\004\125\143\001\001\000\004" +
    "\132\136\001\001\000\004\121\120\001\001\000\004\130" +
    "\115\001\001\000\004\127\102\001\001\000\006\014\107" +
    "\016\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\137\113\001\001\000" +
    "\004\012\114\001\001\000\002\001\001\000\006\014\116" +
    "\016\112\001\001\000\002\001\001\000\004\122\122\001" +
    "\001\000\006\014\121\016\112\001\001\000\002\001\001" +
    "\000\004\012\123\001\001\000\004\123\124\001\001\000" +
    "\002\001\001\000\004\024\126\001\001\000\004\124\134" +
    "\001\001\000\004\135\130\001\001\000\004\012\131\001" +
    "\001\000\004\136\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\135\016\112\001\001\000\002\001" +
    "\001\000\004\012\137\001\001\000\002\001\001\000\004" +
    "\133\141\001\001\000\006\014\142\016\112\001\001\000" +
    "\002\001\001\000\006\014\144\016\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\206\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\203\162\001\001\000\004\037\163\001\001\000" +
    "\004\204\164\001\001\000\004\012\165\001\001\000\004" +
    "\205\166\001\001\000\006\035\167\036\170\001\001\000" +
    "\002\001\001\000\004\211\171\001\001\000\006\033\172" +
    "\037\066\001\001\000\002\001\001\000\004\037\174\001" +
    "\001\000\004\207\175\001\001\000\004\012\176\001\001" +
    "\000\004\210\177\001\001\000\006\035\200\036\170\001" +
    "\001\000\002\001\001\000\006\014\202\016\112\001\001" +
    "\000\002\001\001\000\004\012\204\001\001\000\002\001" +
    "\001\000\006\014\206\016\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\212\061\211\001\001\000" +
    "\004\042\214\001\001\000\002\001\001\000\010\215\231" +
    "\216\230\217\227\001\001\000\002\001\001\000\004\213" +
    "\216\001\001\000\006\033\217\037\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\223\001\001\000" +
    "\002\001\001\000\004\214\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\233\001\001" +
    "\000\002\001\001\000\004\012\235\001\001\000\002\001" +
    "\001\000\004\220\237\001\001\000\004\012\240\001\001" +
    "\000\004\221\241\001\001\000\002\001\001\000\004\026" +
    "\243\001\001\000\002\001\001\000\004\172\245\001\001" +
    "\000\004\012\246\001\001\000\004\173\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\257\030" +
    "\255\200\256\001\001\000\002\001\001\000\006\047\270" +
    "\053\301\001\001\000\002\001\001\000\004\177\261\001" +
    "\001\000\004\031\263\001\001\000\010\013\257\030\264" +
    "\200\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\145\u0137\001\001\000\004\153\u0135\001\001\000\004" +
    "\150\u0133\001\001\000\004\031\u0132\001\001\000\004\240" +
    "\u012b\001\001\000\004\242\u0127\001\001\000\004\151\u0122" +
    "\001\001\000\004\144\u0120\001\001\000\004\243\u011c\001" +
    "\001\000\006\140\320\237\317\001\001\000\004\147\315" +
    "\001\001\000\004\146\302\001\001\000\002\001\001\000" +
    "\012\016\303\034\305\036\304\051\306\001\001\000\004" +
    "\156\313\001\001\000\004\160\311\001\001\000\004\157" +
    "\307\001\001\000\002\001\001\000\006\047\310\053\301" +
    "\001\001\000\002\001\001\000\006\047\312\053\301\001" +
    "\001\000\002\001\001\000\006\047\314\053\301\001\001" +
    "\000\002\001\001\000\012\016\303\034\305\036\304\051" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\303\034\305\036\304\051\336\001\001\000\004\141" +
    "\322\001\001\000\006\047\323\053\301\001\001\000\004" +
    "\142\324\001\001\000\002\001\001\000\004\050\326\001" +
    "\001\000\004\143\334\001\001\000\004\154\330\001\001" +
    "\000\006\047\331\053\301\001\001\000\004\155\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\303" +
    "\034\305\036\304\051\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\342\054\340\245\341\001\001" +
    "\000\002\001\001\000\004\055\353\001\001\000\002\001" +
    "\001\000\004\244\344\001\001\000\004\056\346\001\001" +
    "\000\010\013\342\054\347\245\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\253\u0119\001\001\000\004" +
    "\261\u0117\001\001\000\004\256\u0115\001\001\000\004\056" +
    "\u0114\001\001\000\004\257\u010f\001\001\000\004\252\u010d" +
    "\001\001\000\004\246\377\001\001\000\004\255\374\001" +
    "\001\000\004\254\361\001\001\000\012\016\362\034\364" +
    "\036\363\057\365\001\001\000\004\264\372\001\001\000" +
    "\004\266\370\001\001\000\004\265\366\001\001\000\002" +
    "\001\001\000\004\055\367\001\001\000\002\001\001\000" +
    "\004\055\371\001\001\000\002\001\001\000\004\055\373" +
    "\001\001\000\002\001\001\000\012\016\362\034\364\036" +
    "\363\057\375\001\001\000\002\001\001\000\004\247\u0101" +
    "\001\001\000\012\016\362\034\364\036\363\057\u0100\001" +
    "\001\000\002\001\001\000\004\055\u0102\001\001\000\004" +
    "\250\u0103\001\001\000\002\001\001\000\004\060\u0105\001" +
    "\001\000\004\251\u010b\001\001\000\004\262\u0107\001\001" +
    "\000\004\055\u0108\001\001\000\004\263\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\362\034\364" +
    "\036\363\057\u010c\001\001\000\002\001\001\000\012\016" +
    "\362\034\364\036\363\057\u010e\001\001\000\002\001\001" +
    "\000\004\055\u0110\001\001\000\002\001\001\000\004\260" +
    "\u0112\001\001\000\012\016\362\034\364\036\363\057\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\362\034\364\036\363\057\u0116\001\001\000\002\001\001" +
    "\000\004\055\u0118\001\001\000\002\001\001\000\012\016" +
    "\362\034\364\036\363\057\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\342\054" +
    "\u011e\245\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\303\034\305\036\304\051\u0121\001\001\000" +
    "\002\001\001\000\006\047\u0123\053\301\001\001\000\002" +
    "\001\001\000\004\152\u0125\001\001\000\012\016\303\034" +
    "\305\036\304\051\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\342\054\u0129\245\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\241\u012e\001\001\000\002\001\001\000" +
    "\010\013\342\054\u0130\245\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\303\034" +
    "\305\036\304\051\u0134\001\001\000\002\001\001\000\006" +
    "\047\u0136\053\301\001\001\000\002\001\001\000\012\016" +
    "\303\034\305\036\304\051\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\257\030" +
    "\u013c\200\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\u013f\003\056\006\055\013\026\025\011\027" +
    "\035\032\036\040\044\043\042\044\005\045\004\046\041" +
    "\052\007\062\054\110\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\257\030\u0142\200\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\u0145\003" +
    "\056\006\055\013\026\025\011\027\035\032\036\040\044" +
    "\043\042\044\005\045\004\046\041\052\007\062\054\110" +
    "\022\001\001\000\002\001\001\000\040\002\u0147\003\056" +
    "\006\055\013\026\025\011\027\035\032\036\040\044\043" +
    "\042\044\005\045\004\046\041\052\007\062\054\110\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u014a\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\002\u014d\003\056\006\055\013\026\025\011\027\035\032" +
    "\036\040\044\043\042\044\005\045\004\046\041\052\007" +
    "\062\054\110\022\001\001\000\002\001\001\000\040\002" +
    "\u014f\003\056\006\055\013\026\025\011\027\035\032\036" +
    "\040\044\043\042\044\005\045\004\046\041\052\007\062" +
    "\054\110\022\001\001\000\002\001\001\000\040\002\u0151" +
    "\003\056\006\055\013\026\025\011\027\035\032\036\040" +
    "\044\043\042\044\005\045\004\046\041\052\007\062\054" +
    "\110\022\001\001\000\002\001\001\000\006\047\u0153\053" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\230\u0157\001\001\000\002\001\001\000" +
    "\010\013\257\030\u0159\200\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\047\u0162\053\301\001\001\000\002\001" +
    "\001\000\006\047\u0164\053\301\001\001\000\002\001\001" +
    "\000\004\170\u0166\001\001\000\004\012\u0167\001\001\000" +
    "\004\171\u0168\001\001\000\002\001\001\000\004\026\u016a" +
    "\001\001\000\002\001\001\000\006\047\u016c\053\301\001" +
    "\001\000\002\001\001\000\010\013\257\030\u016e\200\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\267\u0172\001\001\000\004\063\u0178\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\u0189\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\270\u017c\001" +
    "\001\000\004\064\u017e\001\001\000\004\063\u017f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\u0183\001\001\000\004\273\u0186\001\001\000\002" +
    "\001\001\000\004\064\u0185\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\u0188\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\u018b\001\001\000\004\271" +
    "\u018e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\u018f\001\001\000\002\001\001\000\004\065\u0191\001" +
    "\001\000\004\272\u0192\001\001\000\004\064\u0193\001\001" +
    "\000\002\001\001\000\004\175\u0195\001\001\000\002\001" +
    "\001\000\010\013\257\030\u0197\200\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\234\u01d1\001\001\000" +
    "\004\007\u01a2\001\001\000\002\001\001\000\004\174\u019d" +
    "\001\001\000\002\001\001\000\010\013\257\030\u019f\200" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u01a3\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\u01cb\001\001\000\002\001\001\000\004\112\u01a7" +
    "\001\001\000\004\010\u01a9\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\113\u01ab\001\001\000\004\012\u01ac" +
    "\001\001\000\004\114\u01ad\001\001\000\002\001\001\000" +
    "\004\023\u01af\001\001\000\004\011\u01b5\001\001\000\004" +
    "\116\u01b1\001\001\000\004\012\u01b2\001\001\000\004\117" +
    "\u01b3\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\161\u01b7\001\001\000\004\017\u01b9\001" +
    "\001\000\004\162\u01ba\001\001\000\002\001\001\000\010" +
    "\017\u01bb\020\u01bc\163\u01bd\001\001\000\004\021\u01c6\001" +
    "\001\000\002\001\001\000\004\012\u01be\001\001\000\004" +
    "\022\u01c0\001\001\000\004\164\u01c1\001\001\000\002\001" +
    "\001\000\004\012\u01c2\001\001\000\004\022\u01c3\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u01c7\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\115\u01c9" +
    "\001\001\000\004\010\u01ca\001\001\000\002\001\001\000" +
    "\004\010\u01cc\001\001\000\004\015\u01cd\001\001\000\002" +
    "\001\001\000\004\120\u01cf\001\001\000\006\047\u01d0\053" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\104" +
    "\u01d6\001\001\000\004\004\u01d8\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\u01da\001\001\000\004\005" +
    "\u01dc\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\106\u01de\001\001\000\004\005\u01df\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\223\u01e2\001\001\000\006" +
    "\033\u01e3\037\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\002\u01ea\003\056\006\055\013" +
    "\026\025\011\027\035\032\036\040\044\043\042\044\005" +
    "\045\004\046\041\052\007\062\054\110\022\001\001\000" +
    "\002\001\001\000\040\002\u01ec\003\056\006\055\013\026" +
    "\025\011\027\035\032\036\040\044\043\042\044\005\045" +
    "\004\046\041\052\007\062\054\110\022\001\001\000\002" +
    "\001\001\000\004\201\u01ee\001\001\000\006\033\u01ef\037" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\002\u01f2\003\056\006\055\013\026\025\011\027\035\032" +
    "\036\040\044\043\042\044\005\045\004\046\041\052\007" +
    "\062\054\110\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\257\030\u01f5\200\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\u01f8\003\056\006" +
    "\055\013\026\025\011\027\035\032\036\040\044\043\042" +
    "\044\005\045\004\046\041\052\007\062\054\110\022\001" +
    "\001\000\002\001\001\000\040\002\u01fa\003\056\006\055" +
    "\013\026\025\011\027\035\032\036\040\044\043\042\044" +
    "\005\045\004\046\041\052\007\062\054\110\022\001\001" +
    "\000\002\001\001\000\004\012\u01fc\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCompilar$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCompilar$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCompilar$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorCom> erroresCom; 
    private List<Pista> pistas;
    private int cantidadIdentaciones;  
    Declaracion declaracionAct; 
    List<Expresion> valoresExpresion; 
    List<Expresion> valoresExpresion2;   
    boolean esDimension;
    Stack<Dimension> dimesiones;
    Stack<Expresion> expresionesArreglos;
    List<DeclDim> declaracionesDimension; 
    DeclDim declDimPadre;   
    boolean primerExpresion;
    boolean primerDeclDim;
    private Asignacion asignacionAct;
    private List<Instruccion> instruccionesFunciones;
    private Funcion funcionAct;
    private boolean dentroDeFuncion;
    private CondSi condisionSiAct;
    private Condicion condicionAct;
    private String insCond;
    private Para paraAct;
    private Mientras mientrasAct;
    private Stack<Mientras> desdesMientras;
    private SwitchC switchAct;
    private Lista listaAct;

	public ParserCompilar(LexerCompilar lex) {
		super(lex);
        cantidadIdentaciones = 0;
        this.erroresCom = lex.getErroresCom();
        this.pistas = new ArrayList<>();
        this.esDimension = false;
        this.dimesiones = new Stack<>();
        this.desdesMientras = new Stack<>();
        this.expresionesArreglos = new Stack<>();   
        this.instruccionesFunciones = new ArrayList<>();
        this.dentroDeFuncion = false;
        this.listaAct = null;
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(new ErrorCom("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(new ErrorCom("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }         
    /*---------Getters & Setters---------*/

    public List<ErrorCom> getErroresCom(){
        return this.erroresCom;
    }

    public List<Pista> getPistas(){
        return this.pistas;
    }
    
    /*---------Codigo Incrustado---------*/
    private void MasIdent(String val){
        int valor = Integer.parseInt(val);
        this.cantidadIdentaciones += valor;
    }

    private void cerrarIdent(){
        this.cantidadIdentaciones = 0;
    }

    private void crearPista(String nombre){
        Pista pistaTmp = new Pista();
        pistaTmp.setNombre(nombre);
        this.pistas.add(pistaTmp);
    }

    private void agregarExtencion(String nombreExt){
        this.pistas.get(this.pistas.size()-1).setExtension(nombreExt);
    }

    private void crearDeclaracion(boolean esKeep){
        this.declaracionAct = new Declaracion("declaracion",this.cantidadIdentaciones);
        this.declaracionAct.setEsKeep(esKeep);
        insertarInstruccion(this.declaracionAct);
    }

    private void insertarValsDeclaracion(String tipo,String var1,boolean esArreglo){
        this.declaracionAct.setTipoDecl(tipo);
        this.declaracionAct.insertarVariable(var1);
        this.declaracionAct.setEsArreglo(esArreglo);
    }

    private void insertarVarDecl(String variable){
        this.declaracionAct.insertarVariable(variable);
    }

    private void insExpr(String val,String tipo){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
    }

    private void insExpr2(String val,String tipo){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion2.add(expresion);
        }
    }

    private void crearListaExpr(){
        this.valoresExpresion = new ArrayList<>();
    }

    private void crearDimension(){
        Dimension dimension = new Dimension();   
        dimesiones.push(dimension);
        this.esDimension = true;
    }

    private void insertarListaExprDecl(){        
        this.declaracionAct.setValoresDecl(this.valoresExpresion);
    }

    private void insertarDimensionDecl(){
        this.declaracionAct.insertarDimension(this.dimesiones.peek());
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void insertarDimensionExpr(){
        this.expresionesArreglos.peek().insertarExpresion(this.dimesiones.peek());        
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void cerrarExpresionArreglo(){
        this.expresionesArreglos.pop();
    }

    private void cerrarDimension(){
        if(this.dimesiones.isEmpty()){
            this.esDimension = false;
        }else{
            this.esDimension = true;
        }
    }

    private void crearExpresionArreglo(String tipo,String val){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
        this.expresionesArreglos.push(expresion);
    }    

    private void crearExpresionArreglo2(String tipo,String val){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion2.add(expresion);
        }
        this.expresionesArreglos.push(expresion);
    }

    private void crearPrimDeclDim(){
        this.declDimPadre = new DeclDim();
        this.primerDeclDim = true;
        this.declaracionAct.setDeclaracionDimension(this.declDimPadre);
    }

    private void crearDeclDim(){
        if(this.primerDeclDim == true){
            this.primerDeclDim = false;
        }else{
            DeclDim declDim = new DeclDim();
            declDim.setDeclDimPadre(this.declDimPadre);
            this.declDimPadre.insertarHijoDeclDim(declDim);
            this.declDimPadre = declDim;    
        }            
    }

    private void cerrarDeclDim(){
        this.declDimPadre = this.declDimPadre.getDeclDimPadre();
    }

    private void crearDim(){
        Dimension dimension = new Dimension();
        this.valoresExpresion = new ArrayList<>();
        dimension.setExpresiones(valoresExpresion);
        this.declDimPadre.insertarDimension(dimension);
    }

    private void crearAsignacion(String variable, boolean esArreglo,boolean esPara,boolean esIncremento){
        this.asignacionAct = new Asignacion("asignacion",this.cantidadIdentaciones);        
        this.asignacionAct.setVariable(variable);
        this.valoresExpresion = new ArrayList<>();
        this.asignacionAct.setValoresDecl(this.valoresExpresion);
        this.asignacionAct.setEsArreglo(esArreglo);
        this.asignacionAct.setEsIncremento(esIncremento);
        if(esPara){
            this.paraAct.setAsignacion(this.asignacionAct);            
        }else{
            insertarInstruccion(this.asignacionAct);
        }        
    }

    private void insertarDimensionAsign(){
        this.asignacionAct.insertarDimension(this.dimesiones.peek());
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void crearFuncion(String nombre,boolean esKeep,String tipo){
        this.funcionAct = new Funcion("funcion",this.cantidadIdentaciones);
        this.funcionAct.setNombre(nombre);
        this.funcionAct.setTipo(tipo);
        this.funcionAct.setEsKeep(esKeep);
        insertarInstruccion(this.funcionAct);
    }

    private void insertarParametro(String tipo, String nombre){
        Parametro parametro = new Parametro();
        this.valoresExpresion = new ArrayList<>();
        parametro.setNombre(nombre);
        parametro.setTipo(tipo);
        parametro.setExpresiones(this.valoresExpresion);
        this.funcionAct.insertarParametro(parametro);
    }

    private void insertarParametro2(String tipo, String nombre){
        Parametro parametro = new Parametro();
        this.valoresExpresion2 = new ArrayList<>();
        parametro.setNombre(nombre);
        parametro.setTipo(tipo);
        parametro.setExpresiones(this.valoresExpresion2);
        this.funcionAct.insertarParametro(parametro);
    }

    private void crearSi(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("si",this.cantidadIdentaciones);   
        insertarInstruccion(this.condisionSiAct);
    }

    private void crearSinoSi(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("sinosi",this.cantidadIdentaciones);      
        insertarCondSINO(true);                
    }
    
    private void crearSino(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("sino",this.cantidadIdentaciones);              
        insertarCondSINO(false);            
    }
    
    private void insertarCondSINO(boolean esSinoSi){
        int tamano = this.instruccionesFunciones.size()-1;
        for (int i = tamano; i >= 0; i--) {
            Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
            if (instruccionFun.getTipoInstruccion().equals("si")) {
                if (instruccionFun.getIdentacion() == this.condisionSiAct.getIdentacion()) {
                    CondSi condisionSi = (CondSi) instruccionFun;
                    if (esSinoSi) {
                        condisionSi.insertarCondicionSinoSi(this.condisionSiAct);
                    }else{
                        condisionSi.setCondsino(this.condisionSiAct);
                    }                    
                    insertarInstruccionEnFunciones(this.condisionSiAct);
                    break;
                }else{
                    this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
                }             
            }else{
                this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
            }
        }
    }

    private void crearCondicion(){
        this.condicionAct = new Condicion();
        this.valoresExpresion = new ArrayList<>();
        this.condicionAct.setExpresion1(this.valoresExpresion);
        switch(insCond)
        {
            case "condSi":
                this.condisionSiAct.insertarCondicion(this.condicionAct);
                break;
            case "para":
                this.paraAct.insertarCondicion(this.condicionAct);
                break;
            case "mientras":
                this.mientrasAct.insertarCondicion(this.condicionAct);
                break;
            default:
                
        }                
    }

    private void crearExpr2Cond(){
        this.valoresExpresion = new ArrayList<>();
        this.condicionAct.setExpresion2(this.valoresExpresion);
    }

    private void insOpNulCondicion(String op1,String op2){
        if(op1.equals("true")){
            this.condicionAct.setNuloExpr1(true);
        }else{
            this.condicionAct.setNuloExpr1(false);
        }
        if(op2.equals("true")){
            this.condicionAct.setNuloExpr2(true);
        }else{
            this.condicionAct.setNuloExpr2(false);
        }
    }

    private void insOpCondicion(String operador){
        switch(insCond)
        {
            case "condSi":
                this.condisionSiAct.insertarOperador(operador);
                break;
            case "para":
                this.paraAct.insertarOperador(operador);
                break;
            case "mientras":
                this.mientrasAct.insertarOperador(operador);
                break;
            default:
                
        }
    }

    private void crearPara(){
        this.insCond = "para";
        this.paraAct = new Para("para",this.cantidadIdentaciones);
        insertarInstruccion(this.paraAct);
    }
    
    private void insUltValsPara(String variable,String operador){
        this.paraAct.setVariable(variable);
        this.paraAct.setOperadorVar(operador);
    }

    private void insertarMientras(){
        this.insCond = "mientras";
        if(desdesMientras.empty()){
            this.mientrasAct = new Mientras("mientras",this.cantidadIdentaciones);
            insertarInstruccion(this.mientrasAct);
        }else{
            this.mientrasAct = desdesMientras.peek();
            desdesMientras.pop();
        }
    }

    private void insertarHacer(){             
        Mientras mientras = new Mientras("hacer",this.cantidadIdentaciones);
        desdesMientras.push(mientras);
        insertarInstruccion(mientras);
    }

    private void crearSwitch(){
        this.switchAct = new SwitchC("switch",this.cantidadIdentaciones);        
        this.valoresExpresion = new ArrayList<>();
        this.switchAct.setVariable(this.valoresExpresion);
        insertarInstruccion(this.switchAct);
    }

    private void crearCaso(String tipo){
        CasoC caso = new CasoC("caso",this.cantidadIdentaciones);
        this.valoresExpresion = new ArrayList<>();
        caso.setTipo(tipo);        
        caso.setExpresion(this.valoresExpresion);
        int tamano = this.instruccionesFunciones.size()-1;
        for (int i = tamano; i >= 0; i--) {
            Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
            int identacion = caso.getIdentacion() - 1;
            if (instruccionFun.getIdentacion() == identacion) {
                if(instruccionFun.getTipoInstruccion().equals("switch")){
                    SwitchC instruccionSwitch = (SwitchC) instruccionFun;
                    instruccionSwitch.insertarCaso(caso);                    
                    break;
                }
            }else{
                this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
            }
        }
        insertarInstruccionEnFunciones(caso);
    }

    private void crearIncDecr(String var, String tipo){
        IncrDecr incrementoDecr = new IncrDecr("incrDecr",this.cantidadIdentaciones);
        incrementoDecr.setTipo(tipo);
        incrementoDecr.setVariable(var);
        insertarInstruccion(incrementoDecr);
    }

    private void crearFuncExpresion(String nombre){
        this.funcionAct = new Funcion("funcion",this.cantidadIdentaciones);
        this.funcionAct.setNombre(nombre);
        this.funcionAct.setTipo("");
        this.funcionAct.setEsKeep(false);    
        Expresion expresion = new Expresion();
        expresion.setTipo("funcion");       
        expresion.setFuncion(this.funcionAct); 
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
    }
    
    
    private void insertarInstruccion(Instruccion instruccion){
        if(this.instruccionesFunciones.isEmpty()){
            this.pistas.get(this.pistas.size()-1).insertarInstruccion(instruccion);
            insertarInstruccionEnFunciones(instruccion);
            if (instruccion.getTipoInstruccion().equals("funcion")) {
                this.dentroDeFuncion = true;
            }else{
                this.dentroDeFuncion = false;
            }
        }else{
            int tamano = this.instruccionesFunciones.size()-1;
            for (int i = tamano; i >= 0; i--) {
                Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
                int identacion = instruccion.getIdentacion() - 1;
                if (instruccionFun.getIdentacion() == identacion) {
                    //InsertarInstruccion en funcion
                    String tipoInstruccion = instruccionFun.getTipoInstruccion();
                    if (tipoInstruccion.equals("funcion")) {
                        Funcion funcion = (Funcion) instruccionFun;
                        funcion.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("si")||tipoInstruccion.equals("sino")||tipoInstruccion.equals("sinosi")){
                        CondSi condicionSi = (CondSi) instruccionFun;
                        condicionSi.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("para")){
                        Para paraIns = (Para) instruccionFun;
                        paraIns.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("mientras")){
                        Mientras mientrasIns = (Mientras) instruccionFun;
                        mientrasIns.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("hacer")){
                        Mientras mientrasIns = (Mientras) instruccionFun;
                        mientrasIns.insertarInstruccion(instruccion);
                    }
                    insertarInstruccionEnFunciones(instruccion);
                    break;
                }else{                    
                    if(instruccionFun.getTipoInstruccion().equals("funcion")){
                        this.dentroDeFuncion = false;
                    }
                    this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
                    if(i==0){
                        this.pistas.get(this.pistas.size()-1).insertarInstruccion(instruccion);
                        insertarInstruccionEnFunciones(instruccion);
                    }
                }
            }
        }
    }
    
    private void insertarInstruccionEnFunciones(Instruccion instruccion){
        String tipo = instruccion.getTipoInstruccion();
        String[] funciones = new String[]{"si","sino","sinosi","funcion","para","mientras","hacer","continuar","switch","caso","principal"};
        List<String> list = Arrays.asList(funciones);
        if (list.contains(tipo)) {
            if (tipo.equals("funcion")) {
                if (this.dentroDeFuncion == false) {
                    this.instruccionesFunciones.add(instruccion);
                }
            }else{
                this.instruccionesFunciones.add(instruccion);
            }            
        }
    }
    
    public Lista getLista(){
        return this.listaAct;
    }

    private void creacionLista(){
        this.listaAct = new Lista();
    }

    private void insertarDatoLista(String tipo,String val){
        boolean valIns = false;
        if(val.equals("true")){
            valIns = true;
        }
        switch(tipo){
            case "NOMBRE":
                this.listaAct.setNombre(val.replace("\"", ""));
                break;
            case "RAMDOM":
                this.listaAct.setRandom(valIns);
                break;
            case "CIRCULAR":
                this.listaAct.setCircular(valIns);
                break;
        }
    }    

    private void insertarPistaLista(String valPista){
        this.listaAct.insertarPista(valPista.replace("\"", ""));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCompilar$actions {
  private final ParserCompilar parser;

  /** Constructor */
  CUP$ParserCompilar$actions(ParserCompilar parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCompilar$do_action_part00000000(
    int                        CUP$ParserCompilar$act_num,
    java_cup.runtime.lr_parser CUP$ParserCompilar$parser,
    java.util.Stack            CUP$ParserCompilar$stack,
    int                        CUP$ParserCompilar$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCompilar$result;

      /* select the action based on the action number */
      switch (CUP$ParserCompilar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		RESULT = start_val;
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCompilar$parser.done_parsing();
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
MasIdent(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= IDENT NT$0 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$1",54, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= COMENT NT$1 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$2",55, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= siguiente NT$2 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$3",56, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= decl NT$3 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$4",57, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= asg NT$4 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$5",58, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= funcion NT$5 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$6",59, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= condicional NT$6 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$7",60, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= ciclo1 NT$7 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$8",61, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= ciclo2 NT$8 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$9 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$9",62, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= funciones2 NT$9 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$10 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$10",63, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicio ::= funciones3 NT$10 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$11 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$11",64, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicio ::= cambiar NT$11 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$12 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$12",65, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicio ::= incrDecr NT$12 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inicio ::= listas 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$13 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearPista(nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$13",66, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // siguiente ::= PISTA ID NT$13 ext 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("siguiente",1, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$14 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
agregarExtencion(nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$14",67, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ext ::= EXTIENDE ID NT$14 extp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ext",2, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ext ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ext",2, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$15 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
agregarExtencion(nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$15",68, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // extp ::= COMA ID NT$15 extp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("extp",3, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // extp ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("extp",3, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$16 ::= 
            {
              Object RESULT =null;
crearDeclaracion(true);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$16",69, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // decl ::= KEEP NT$16 declp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$17 ::= 
            {
              Object RESULT =null;
crearDeclaracion(false);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$17",70, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // decl ::= NT$17 declp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$18 ::= 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarValsDeclaracion(String.valueOf(tip),id1,false);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$18",71, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declp ::= VAR tipoD ID NT$18 declp2 asgF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("declp",5, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$19 ::= 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarValsDeclaracion(String.valueOf(tip),id1,true);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$19",72, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$20",73, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
insertarDimensionDecl();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$21",74, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declp ::= VAR tipoD ARREGLO ID NT$19 declp2 BRACKI NT$20 expr1 NT$21 BRACKD arr arrFin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-11)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-11)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-11)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("declp",5, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-12)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoD ::= ENTEROSTR 
            {
              Object RESULT =null;
		RESULT="entero";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoD ::= DOBLESTR 
            {
              Object RESULT =null;
		RESULT="doble";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoD ::= BOOLEANSTR 
            {
              Object RESULT =null;
		RESULT="boolean";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoD ::= CARACTERSTR 
            {
              Object RESULT =null;
		RESULT="caracter";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoD ::= CADENASTR 
            {
              Object RESULT =null;
		RESULT="cadena";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$22 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarVarDecl(id1);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$22",75, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declp2 ::= COMA ID NT$22 declp2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("declp2",6, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declp2 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("declp2",6, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$23 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$23",76, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
insertarDimensionDecl();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$24",77, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arr ::= BRACKI NT$23 expr1 NT$24 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr",17, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arr ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr",17, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$25 ::= 
            {
              Object RESULT =null;
crearListaExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$25",78, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asgF ::= IGUAL NT$25 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		insertarListaExprDecl();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asgF",11, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asgF ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asgF",11, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$26 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"identificador");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$26",79, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr1 ::= ID NT$26 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$27 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
crearExpresionArreglo("arreglo",val);crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$27",80, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$28",81, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
cerrarExpresionArreglo();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$29",82, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr1 ::= ID BRACKI NT$27 expr1 NT$28 BRACKD arr2 NT$29 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$30 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"numero");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$30",83, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr1 ::= NUMERO NT$30 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$31 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"cadena");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$31",84, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr1 ::= CADENA NT$31 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$32 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"caracter");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$32",85, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr1 ::= CARACTER NT$32 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$33 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$33",86, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr1 ::= VERDADERO NT$33 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$34 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$34",87, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr1 ::= FALSO NT$34 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$35 ::= 
            {
              Object RESULT =null;
insExpr("(","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$35",88, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$36 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
insExpr(")","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$36",89, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr1 ::= PARI NT$35 expr1 PARD NT$36 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$37 ::= 
            {
              Object RESULT =null;
insExpr("!","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$37",90, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr1 ::= OPNOT NT$37 expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$38 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$38",91, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$39 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$39",92, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arr2 ::= BRACKI NT$38 expr1 NT$39 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr2",18, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arr2 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr2",18, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$40 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$40",93, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fin1 ::= op NT$40 expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1",10, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fin1 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1",10, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$41 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"identificador");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$41",94, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr2 ::= ID NT$41 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$42 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
crearExpresionArreglo("arreglo",val);crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$42",95, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$43",96, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$44 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
cerrarExpresionArreglo();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$44",97, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr2 ::= ID BRACKI NT$42 expr2 NT$43 BRACKD arr2p NT$44 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$45 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"numero");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$45",98, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr2 ::= NUMERO NT$45 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$46 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"cadena");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$46",99, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr2 ::= CADENA NT$46 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$47 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"caracter");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$47",100, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr2 ::= CARACTER NT$47 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$48 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$48",101, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr2 ::= VERDADERO NT$48 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$49 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$49",102, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr2 ::= FALSO NT$49 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$50 ::= 
            {
              Object RESULT =null;
insExpr("(","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$50",103, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$51 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
insExpr(")","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$51",104, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr2 ::= PARI NT$50 expr2 PARD NT$51 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$52 ::= 
            {
              Object RESULT =null;
insExpr("!","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$52",105, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr2 ::= OPNOT NT$52 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr2 ::= funciones4 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$53 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$53",106, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$54 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$54",107, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // arr2p ::= BRACKI NT$53 expr2 NT$54 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr2p",38, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // arr2p ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr2p",38, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$55 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$55",108, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // fin1p ::= op NT$55 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$56 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$56",109, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // fin1p ::= op3 NT$56 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$57 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$57",110, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // fin1p ::= op4 NT$57 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // fin1p ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // op ::= SUMA 
            {
              Object RESULT =null;
		RESULT = "+";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // op ::= RESTA 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // op ::= MULT 
            {
              Object RESULT =null;
		RESULT = "*";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // op ::= DIVI 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // op ::= OPELV 
            {
              Object RESULT =null;
		RESULT = "^";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // op ::= OPMOD 
            {
              Object RESULT =null;
		RESULT = "%";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$58 ::= 
            {
              Object RESULT =null;
crearPrimDeclDim();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$58",111, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // arrFin ::= IGUAL NT$58 arrFinP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFin",7, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arrFin ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFin",7, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$59 ::= 
            {
              Object RESULT =null;
crearDeclDim();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$59",112, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // arrFinP ::= CURLBRACKI NT$59 arrFinP2 CURLBRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		cerrarDeclDim();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFinP",13, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // arrFinP ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFinP",13, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arrFinP2 ::= arrFinP fin2 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFinP2",14, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$60 ::= 
            {
              Object RESULT =null;
crearDim();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$60",113, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arrFinP2 ::= NT$60 expr1 fin3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arrFinP2",14, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // fin2 ::= COMA arrFinP 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin2",15, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // fin2 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin2",15, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$61 ::= 
            {
              Object RESULT =null;
crearDim();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$61",114, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // fin3 ::= COMA NT$61 expr1 fin3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin3",16, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // fin3 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin3",16, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$62 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,false,false,true);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$62",115, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // asg ::= ID NT$62 OPSUMSIM expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$63 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,false,false,false);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$63",116, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // asg ::= ID NT$63 IGUAL expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$64 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,true,false,false);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$64",117, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$65 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$65",118, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$66 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
insertarDimensionAsign();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$66",119, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // asg ::= ID NT$64 BRACKI NT$65 expr1 NT$66 BRACKD arr3 IGUAL expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$67 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$67",120, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$68 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
insertarDimensionAsign();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$68",121, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // arr3 ::= BRACKI NT$67 expr1 NT$68 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr3",20, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // arr3 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr3",20, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$69 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearFuncion(nom,true,String.valueOf(tp));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$69",122, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // funcion ::= KEEP tipoD ID NT$69 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$70 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearFuncion(nom,false,String.valueOf(tp));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$70",123, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // funcion ::= tipoD ID NT$70 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$71 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearFuncion(nom,false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$71",124, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // funcion ::= ID NT$71 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$72 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParametro(String.valueOf(tp),nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$72",125, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // par ::= tipoD ID NT$72 fin4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$73 ::= 
            {
              Object RESULT =null;
insertarParametro("","");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$73",126, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // par ::= NT$73 expr2 fin4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // par ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // fin4 ::= COMA par 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin4",23, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // fin4 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin4",23, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$74 ::= 
            {
              Object RESULT =null;
crearSi();crearCondicion();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$74",127, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // condicional ::= SI PARI NT$74 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$75 ::= 
            {
              Object RESULT =null;
crearSinoSi();crearCondicion();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$75",128, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // condicional ::= SINOSI PARI NT$75 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // condicional ::= SINO 
            {
              Object RESULT =null;
		crearSino();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$76 ::= 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insOpCondicion(String.valueOf(opI));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$76",129, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$77 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearExpr2Cond();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$77",130, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$78 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
insOpNulCondicion(String.valueOf(op1),String.valueOf(op2));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$78",131, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condicion ::= opNul expr1 op3 NT$76 opNul NT$77 expr1 NT$78 opLog 
            {
              Object RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // condicion ::= opNul expr1 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		insOpNulCondicion(String.valueOf(op1),"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$79 ::= 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insOpCondicion(String.valueOf(opI));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$79",132, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$80 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearExpr2Cond();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$80",133, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$81 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
insOpNulCondicion(String.valueOf(op1),String.valueOf(op2));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$81",134, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // condicion ::= opNul expr1 op4 NT$79 opNul NT$80 expr1 NT$81 opLog 
            {
              Object RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // opNul ::= OPNULO 
            {
              Object RESULT =null;
		RESULT = "true";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("opNul",29, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // opNul ::= 
            {
              Object RESULT =null;
		RESULT = "false";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("opNul",29, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // op3 ::= DOBIGUAL 
            {
              Object RESULT =null;
		RESULT = "==";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // op3 ::= DIFERENC 
            {
              Object RESULT =null;
		RESULT = "!=";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // op3 ::= MAY 
            {
              Object RESULT =null;
		RESULT = ">";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // op3 ::= MEN 
            {
              Object RESULT =null;
		RESULT = "<";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // op3 ::= MAYIG 
            {
              Object RESULT =null;
		RESULT = ">=";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // op3 ::= MENIG 
            {
              Object RESULT =null;
		RESULT = "<=";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$82 ::= 
            {
              Object RESULT =null;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insOpCondicion(String.valueOf(opI));crearCondicion();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$82",135, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // opLog ::= op4 NT$82 condicion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$82
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("opLog",27, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // opLog ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("opLog",27, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // op4 ::= AND 
            {
              Object RESULT =null;
		RESULT = "&&";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // op4 ::= NAND 
            {
              Object RESULT =null;
		RESULT = "!&&";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // op4 ::= OR 
            {
              Object RESULT =null;
		RESULT = "||";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // op4 ::= XOR 
            {
              Object RESULT =null;
		RESULT = "&|";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // op4 ::= NOR 
            {
              Object RESULT =null;
		RESULT = "!||";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$83 ::= 
            {
              Object RESULT =null;
crearPara();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$83",136, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$84 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
crearCondicion();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$84",137, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$85 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int idVleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int idVright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String idV = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int opPleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int opPright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object opP = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insUltValsPara(idV,String.valueOf(opP));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$85",138, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ciclo1 ::= PARA NT$83 PARI tipoPara asg2 PUNTCOMA NT$84 condicion PUNTCOMA ID op2 NT$85 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$85
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int idVleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int idVright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String idV = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int opPleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int opPright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object opP = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ciclo1",30, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-12)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // op2 ::= OPINCR 
            {
              Object RESULT =null;
		RESULT = "++";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op2",31, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // op2 ::= OPDECR 
            {
              Object RESULT =null;
		RESULT = "--";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("op2",31, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$86 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,false,true,true);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$86",139, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // asg2 ::= ID NT$86 OPSUMSIM expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$86
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$87 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,false,true,false);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$87",140, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // asg2 ::= ID NT$87 IGUAL expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$87
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$88 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearAsignacion(val,true,true,false);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$88",141, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NT$89 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$89",142, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NT$90 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
insertarDimensionAsign();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$90",143, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // asg2 ::= ID NT$88 BRACKI NT$89 expr1 NT$90 BRACKD arr3 IGUAL expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$90
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // tipoPara ::= tipoD 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoPara",47, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // tipoPara ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("tipoPara",47, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$91 ::= 
            {
              Object RESULT =null;
insertarMientras();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$91",144, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // NT$92 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
crearCondicion();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$92",145, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ciclo2 ::= MIENTRAS NT$91 PARI NT$92 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$92
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ciclo2",33, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // ciclo2 ::= HACER 
            {
              Object RESULT =null;
		insertarHacer();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ciclo2",33, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // ciclo2 ::= CONTINUAR 
            {
              Object RESULT =null;
		crearFuncion("continuar",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("ciclo2",33, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // NT$93 ::= 
            {
              Object RESULT =null;
crearFuncion("sumarizar",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$93",146, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // funciones2 ::= SUMARIZAR NT$93 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$93
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NT$94 ::= 
            {
              Object RESULT =null;
crearFuncion("longitud",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$94",147, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // funciones2 ::= LONGITUD NT$94 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$94
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NT$95 ::= 
            {
              Object RESULT =null;
crearFuncion("mensaje",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$95",148, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // funciones2 ::= MENSAJE NT$95 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$95
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // NT$96 ::= 
            {
              Object RESULT =null;
crearFuncion("reproducir",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$96",149, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$97 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParametro("","");insExpr(nota,"nota");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$97",150, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // funciones3 ::= REPRODUCIR NT$96 PARI NOTA NT$97 COMA par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$97
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$98 ::= 
            {
              Object RESULT =null;
crearFuncion("esperar",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$98",151, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // funciones3 ::= ESPERAR NT$98 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$98
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$99 ::= 
            {
              Object RESULT =null;
crearFuncion("retorna",false,"");insertarParametro("","");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$99",152, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // funciones3 ::= RETORNA NT$99 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$99
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NT$100 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$100",153, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // funciones3 ::= PRINCIPAL NT$100 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$100
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$101 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",true,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$101",154, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // funciones3 ::= KEEP PRINCIPAL NT$101 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$101
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // NT$102 ::= 
            {
              Object RESULT =null;
crearSwitch();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$102",155, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // cambiar ::= SWITCH NT$102 PARI expr1 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$102
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // NT$103 ::= 
            {
              Object RESULT =null;
crearCaso("normal");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$103",156, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // cambiar ::= CASO NT$103 expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$103
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // cambiar ::= DEFAULT 
            {
              Object RESULT =null;
		crearCaso("default");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // cambiar ::= SALIR 
            {
              Object RESULT =null;
		crearFuncion("salir",false,"");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // incrDecr ::= ID OPINCR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		crearIncDecr(val,"++");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("incrDecr",40, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // incrDecr ::= ID OPDECR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		crearIncDecr(val,"--");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("incrDecr",40, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // NT$104 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
crearFuncExpresion(String.valueOf(nom));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$104",157, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // funciones4 ::= ID NT$104 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$104
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // NT$105 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("reproducir");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$105",158, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // NT$106 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParametro2("","");insExpr2(nota,"nota");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$106",159, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // funciones4 ::= REPRODUCIR NT$105 PARI NOTA NT$106 COMA par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$106
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // NT$107 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("sumarizar");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$107",160, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // funciones4 ::= SUMARIZAR NT$107 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$107
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // NT$108 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("longitud");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$108",161, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // funciones4 ::= LONGITUD NT$108 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$108
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // NT$109 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarParametro2(String.valueOf(tp),nom);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$109",162, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // par2 ::= tipoD ID NT$109 fin5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$109
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // NT$110 ::= 
            {
              Object RESULT =null;
insertarParametro2("","");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$110",163, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // par2 ::= NT$110 expr3 fin5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$110
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // par2 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // fin5 ::= COMA par2 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin5",44, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // fin5 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin5",44, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // NT$111 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"identificador");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$111",164, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr3 ::= ID NT$111 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$111
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // NT$112 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
crearExpresionArreglo2("arreglo",val);crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$112",165, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // NT$113 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$113",166, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // NT$114 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-6)).value;
cerrarExpresionArreglo();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$114",167, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr3 ::= ID BRACKI NT$112 expr3 NT$113 BRACKD arr3p NT$114 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$114
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // NT$115 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"numero");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$115",168, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr3 ::= NUMERO NT$115 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$115
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // NT$116 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"cadena");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$116",169, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr3 ::= CADENA NT$116 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$116
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // NT$117 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"caracter");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$117",170, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr3 ::= CARACTER NT$117 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$117
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // NT$118 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$118",171, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr3 ::= VERDADERO NT$118 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$118
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // NT$119 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(val,"boolean");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$119",172, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr3 ::= FALSO NT$119 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$119
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // NT$120 ::= 
            {
              Object RESULT =null;
insExpr2("(","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$120",173, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // NT$121 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
insExpr2(")","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$121",174, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr3 ::= PARI NT$120 expr3 PARD NT$121 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$121
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // NT$122 ::= 
            {
              Object RESULT =null;
insExpr2("!","op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$122",175, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr3 ::= OPNOT NT$122 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$122
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // NT$123 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$123",176, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // NT$124 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
insertarDimensionExpr();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$124",177, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // arr3p ::= BRACKI NT$123 expr3 NT$124 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$124
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr3p",46, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // arr3p ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("arr3p",46, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // NT$125 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$125",178, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // fin6 ::= op NT$125 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$125
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NT$126 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$126",179, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // fin6 ::= op3 NT$126 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$126
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NT$127 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$127",180, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // fin6 ::= op4 NT$127 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$127
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // fin6 ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // NT$128 ::= 
            {
              Object RESULT =null;
creacionLista();
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$128",181, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // listas ::= LISTA DOSPUNT CURLBRACKI NT$128 datosLista CURLBRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$128
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("listas",48, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // NT$129 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarDatoLista("NOMBRE",val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$129",182, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // datosLista ::= NOMBRE DOSPUNT CADENA NT$129 finlista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$129
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("datosLista",49, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // NT$130 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarDatoLista("RAMDOM",String.valueOf(val));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$130",183, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // datosLista ::= RANDOM DOSPUNT valoresLista NT$130 finlista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$130
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("datosLista",49, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // NT$131 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarDatoLista("CIRCULAR",String.valueOf(val));
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$131",184, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // datosLista ::= CIRCULAR DOSPUNT valoresLista NT$131 finlista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$131
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("datosLista",49, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCompilar$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$ParserCompilar$do_action_part00000001(
    int                        CUP$ParserCompilar$act_num,
    java_cup.runtime.lr_parser CUP$ParserCompilar$parser,
    java.util.Stack            CUP$ParserCompilar$stack,
    int                        CUP$ParserCompilar$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCompilar$result;

      /* select the action based on the action number */
      switch (CUP$ParserCompilar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // datosLista ::= PISTAS DOSPUNT BRACKI pistasLista BRACKD finlista 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("datosLista",49, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // datosLista ::= IDENT datosLista 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("datosLista",49, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // finlista ::= COMA datosLista 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("finlista",50, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // finlista ::= 
            {
              Object RESULT =null;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("finlista",50, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // valoresLista ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
		RESULT = "true";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("valoresLista",51, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // valoresLista ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
		RESULT = "false";
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("valoresLista",51, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // NT$132 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
insertarPistaLista(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("NT$132",185, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // pistasLista ::= ID NT$132 COMA pistasLista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$132
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)).value;

              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("pistasLista",52, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.elementAt(CUP$ParserCompilar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // pistasLista ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserCompilar$stack.peek()).value;
		insertarPistaLista(val);
              CUP$ParserCompilar$result = parser.getSymbolFactory().newSymbol("pistasLista",52, ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCompilar$stack.peek()), RESULT);
            }
          return CUP$ParserCompilar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCompilar$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCompilar$do_action(
    int                        CUP$ParserCompilar$act_num,
    java_cup.runtime.lr_parser CUP$ParserCompilar$parser,
    java.util.Stack            CUP$ParserCompilar$stack,
    int                        CUP$ParserCompilar$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$ParserCompilar$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$ParserCompilar$do_action_part00000000(
                               CUP$ParserCompilar$act_num,
                               CUP$ParserCompilar$parser,
                               CUP$ParserCompilar$stack,
                               CUP$ParserCompilar$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$ParserCompilar$do_action_part00000001(
                               CUP$ParserCompilar$act_num,
                               CUP$ParserCompilar$parser,
                               CUP$ParserCompilar$stack,
                               CUP$ParserCompilar$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
