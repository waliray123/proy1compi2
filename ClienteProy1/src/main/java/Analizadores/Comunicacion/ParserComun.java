
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Comunicacion;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Analizadores.ErrorCom;
import Objetos.Comunicacion.Dato;
import Objetos.Comunicacion.Solicitud;
import Objetos.Comunicacion.Respuesta;
import Objetos.Comunicacion.ValorR;
import ControlBack.Nota;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserComun extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserComun() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserComun(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserComun(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\015\002\000\002\002" +
    "\007\000\002\002\012\000\002\003\017\000\002\003\017" +
    "\000\002\016\002\000\002\003\014\000\002\005\012\000" +
    "\002\017\002\000\002\006\007\000\002\020\002\000\002" +
    "\006\014\000\002\006\006\000\002\021\002\000\002\007" +
    "\014\000\002\022\002\000\002\007\014\000\002\023\002" +
    "\000\002\007\014\000\002\024\002\000\002\007\014\000" +
    "\002\007\007\000\002\025\002\000\002\004\007\000\002" +
    "\026\002\000\002\004\012\000\002\027\002\000\002\004" +
    "\007\000\002\030\002\000\002\004\015\000\002\031\002" +
    "\000\002\010\015\000\002\010\006\000\002\032\002\000" +
    "\002\011\023\000\002\011\006\000\002\033\002\000\002" +
    "\013\015\000\002\013\006\000\002\034\002\000\002\014" +
    "\012\000\002\014\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\004\005\004\001\002\000\006\014\010\025" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\004\154\001\002\000\004\004\011\001" +
    "\002\000\004\005\000\001\002\000\004\005\013\001\002" +
    "\000\004\015\015\001\002\000\004\002\uffff\001\002\000" +
    "\004\004\016\001\002\000\010\010\020\011\021\020\017" +
    "\001\002\000\004\005\054\001\002\000\004\005\043\001" +
    "\002\000\004\005\022\001\002\000\004\007\023\001\002" +
    "\000\004\015\024\001\002\000\004\004\025\001\002\000" +
    "\004\005\027\001\002\000\004\005\037\001\002\000\004" +
    "\016\030\001\002\000\004\004\031\001\002\000\004\031" +
    "\032\001\002\000\004\005\033\001\002\000\004\007\034" +
    "\001\002\000\004\016\035\001\002\000\004\004\036\001" +
    "\002\000\004\005\ufff9\001\002\000\004\007\040\001\002" +
    "\000\004\014\041\001\002\000\004\004\042\001\002\000" +
    "\004\002\ufffc\001\002\000\004\007\044\001\002\000\004" +
    "\015\045\001\002\000\004\004\046\001\002\000\004\005" +
    "\027\001\002\000\004\005\050\001\002\000\004\007\051" +
    "\001\002\000\004\014\052\001\002\000\004\004\053\001" +
    "\002\000\004\002\ufffd\001\002\000\004\007\055\001\002" +
    "\000\004\015\056\001\002\000\004\004\057\001\002\000" +
    "\004\005\ufffb\001\002\000\004\005\061\001\002\000\010" +
    "\007\063\016\065\030\064\001\002\000\004\002\ufffa\001" +
    "\002\000\004\014\152\001\002\000\004\004\076\001\002" +
    "\000\004\004\066\001\002\000\004\031\067\001\002\000" +
    "\004\005\070\001\002\000\004\007\071\001\002\000\004" +
    "\016\072\001\002\000\004\004\073\001\002\000\004\005" +
    "\ufff6\001\002\000\004\005\061\001\002\000\004\002\ufff5" +
    "\001\002\000\004\005\ufff8\001\002\000\004\005\101\001" +
    "\002\000\004\002\ufff7\001\002\000\014\007\105\021\102" +
    "\022\104\026\106\027\103\001\002\000\004\004\142\001" +
    "\002\000\004\004\132\001\002\000\004\004\122\001\002" +
    "\000\004\030\117\001\002\000\004\004\107\001\002\000" +
    "\004\032\110\001\002\000\004\005\111\001\002\000\004" +
    "\007\112\001\002\000\004\026\113\001\002\000\004\004" +
    "\114\001\002\000\004\005\uffef\001\002\000\004\005\101" +
    "\001\002\000\004\002\uffee\001\002\000\004\004\120\001" +
    "\002\000\004\005\061\001\002\000\004\002\uffeb\001\002" +
    "\000\004\032\123\001\002\000\004\005\124\001\002\000" +
    "\004\007\125\001\002\000\004\022\126\001\002\000\004" +
    "\004\127\001\002\000\004\005\ufff3\001\002\000\004\005" +
    "\101\001\002\000\004\002\ufff2\001\002\000\004\031\133" +
    "\001\002\000\004\005\134\001\002\000\004\007\135\001" +
    "\002\000\004\027\136\001\002\000\004\004\137\001\002" +
    "\000\004\005\ufff1\001\002\000\004\005\101\001\002\000" +
    "\004\002\ufff0\001\002\000\004\032\143\001\002\000\004" +
    "\005\144\001\002\000\004\007\145\001\002\000\004\021" +
    "\146\001\002\000\004\004\147\001\002\000\004\005\uffed" +
    "\001\002\000\004\005\101\001\002\000\004\002\uffec\001" +
    "\002\000\004\004\153\001\002\000\004\002\ufff4\001\002" +
    "\000\004\005\156\001\002\000\004\005\303\001\002\000" +
    "\012\010\160\011\162\012\161\013\157\001\002\000\004" +
    "\004\262\001\002\000\004\016\236\001\002\000\004\004" +
    "\215\001\002\000\004\016\163\001\002\000\004\006\164" +
    "\001\002\000\004\031\165\001\002\000\004\004\166\001" +
    "\002\000\004\005\uffe8\001\002\000\004\005\170\001\002" +
    "\000\006\007\173\027\172\001\002\000\004\005\uffe7\001" +
    "\002\000\004\016\176\001\002\000\004\011\174\001\002" +
    "\000\004\004\175\001\002\000\004\005\uffdd\001\002\000" +
    "\004\006\177\001\002\000\004\031\200\001\002\000\004" +
    "\021\201\001\002\000\004\006\202\001\002\000\004\032" +
    "\203\001\002\000\004\024\204\001\002\000\004\006\205" +
    "\001\002\000\004\032\206\001\002\000\004\022\207\001" +
    "\002\000\004\006\210\001\002\000\004\032\211\001\002" +
    "\000\004\004\212\001\002\000\004\005\uffdf\001\002\000" +
    "\004\005\170\001\002\000\004\005\uffde\001\002\000\004" +
    "\005\uffea\001\002\000\004\005\217\001\002\000\006\007" +
    "\221\011\222\001\002\000\004\005\uffe9\001\002\000\004" +
    "\012\234\001\002\000\004\016\223\001\002\000\004\006" +
    "\224\001\002\000\004\031\225\001\002\000\004\021\226" +
    "\001\002\000\004\006\227\001\002\000\004\032\230\001" +
    "\002\000\004\004\231\001\002\000\004\005\uffe2\001\002" +
    "\000\004\005\217\001\002\000\004\005\uffe1\001\002\000" +
    "\004\004\235\001\002\000\004\005\uffe0\001\002\000\004" +
    "\006\237\001\002\000\004\031\240\001\002\000\004\017" +
    "\241\001\002\000\004\006\242\001\002\000\004\031\243" +
    "\001\002\000\004\004\uffe4\001\002\000\004\004\245\001" +
    "\002\000\004\005\246\001\002\000\006\007\250\011\251" +
    "\001\002\000\004\005\uffe3\001\002\000\004\010\260\001" +
    "\002\000\004\016\252\001\002\000\004\006\253\001\002" +
    "\000\004\031\254\001\002\000\004\004\255\001\002\000" +
    "\004\005\uffd9\001\002\000\004\005\246\001\002\000\004" +
    "\005\uffd8\001\002\000\004\004\261\001\002\000\004\005" +
    "\uffd7\001\002\000\004\005\uffe6\001\002\000\004\005\265" +
    "\001\002\000\004\005\uffe5\001\002\000\006\007\266\010" +
    "\267\001\002\000\004\013\301\001\002\000\004\016\270" +
    "\001\002\000\004\006\271\001\002\000\004\031\272\001" +
    "\002\000\004\012\273\001\002\000\004\006\274\001\002" +
    "\000\004\032\275\001\002\000\004\004\276\001\002\000" +
    "\004\005\uffdc\001\002\000\004\005\265\001\002\000\004" +
    "\005\uffdb\001\002\000\004\004\302\001\002\000\004\005" +
    "\uffda\001\002\000\004\007\304\001\002\000\004\025\305" +
    "\001\002\000\004\004\306\001\002\000\004\002\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\011\001\001\000\004\003\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\057\001\001\000" +
    "\004\006\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\073\001\001\000" +
    "\004\006\074\001\001\000\002\001\001\000\004\017\076" +
    "\001\001\000\004\007\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\114\001\001\000\004\007" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\127\001\001\000\004\007\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\137\001\001\000\004\007\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\147" +
    "\001\001\000\004\007\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\166\001\001\000\004\011\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\212\001\001\000\004\011\213" +
    "\001\001\000\002\001\001\000\004\025\215\001\001\000" +
    "\004\010\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\231\001\001\000" +
    "\004\010\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\243\001\001\000\002\001\001\000\004\014\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\255\001\001\000\004\014\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\262\001\001\000\004\013\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\276\001\001\000\004\013\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserComun$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserComun$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserComun$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorCom> erroresCom; 
    private Solicitud solicitudAct;
    private Dato datoAct;
    private Respuesta respuestaAct;

	public ParserComun(LexerComun lex) {
		super(lex);
        this.erroresCom = lex.getErroresCom();
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(new ErrorCom("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(new ErrorCom("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }         
    /*---------Getters & Setters---------*/

    public List<ErrorCom> getErroresCom(){
        return this.erroresCom;
    }

    private void crearSolicitud(){
        this.solicitudAct = new Solicitud();
    }

    private void insertarValsSolicitud(String tipo,String nombre){
        this.solicitudAct.setTipo(tipo);
        this.solicitudAct.setNombre(nombre);
    }

    private void insertarDato(){
        datoAct = new Dato();
        this.solicitudAct.insertarDato(datoAct);
    }

    private void insertarNombreSolicitud(String nombre){
        this.solicitudAct.setNombre(nombre);
    }

    private void insertarEnDato(String valor, String tipo){
        switch(tipo){
            case "CANAL":
                this.datoAct.setCanal(valor);
                break;
            case "NOTA":
                this.datoAct.setNota(valor);
                break;
            case "OCTAVA":
                this.datoAct.setOctava(valor);
                break;
            case "DURACION":
                this.datoAct.setDuracion(valor);
                break;
        }
    }

    public Solicitud getSolicitud(){
        return this.solicitudAct;
    }

    private void crearRespuesta(String tipo,String nombV){
        this.respuestaAct = new Respuesta();        
        this.respuestaAct.setTipo(tipo);
        this.respuestaAct.setNombV(nombV);
    }

    private void insertarValorR(String nombre,String cantidad){
        ValorR valor = new ValorR();
        valor.setNombre(nombre);
        valor.setCantidad(cantidad);
        this.respuestaAct.insertarValor(valor);
    }

    private void insertarNota(String nombre, String octava, String tiempo, String canal){
        //La frecuencia es la octava
        int o = Integer.parseInt(octava);
        int t = Integer.parseInt(tiempo);
        int c = Integer.parseInt(canal);
        Nota nota = new Nota(nombre,o,t,c);

        this.respuestaAct.insertarNota(nota);
    }

    public Respuesta getRespuesta(){
        return this.respuestaAct;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserComun$actions {
  private final ParserComun parser;

  /** Constructor */
  CUP$ParserComun$actions(ParserComun parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserComun$do_action_part00000000(
    int                        CUP$ParserComun$act_num,
    java_cup.runtime.lr_parser CUP$ParserComun$parser,
    java.util.Stack            CUP$ParserComun$stack,
    int                        CUP$ParserComun$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserComun$result;

      /* select the action based on the action number */
      switch (CUP$ParserComun$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
		RESULT = start_val;
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserComun$parser.done_parsing();
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
crearSolicitud();
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= MEN SOLICITUD MAY NT$0 solicitudes 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= MEN RESPUESTA MAY respuestas MEN BARRA RESPUESTA MAY 
            {
              Object RESULT =null;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-7)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // solicitudes ::= MEN TIPO MAY LISTA MEN BARRA TIPO MAY nombres MEN BARRA SOLICITUD MAY 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).value;
		insertarValsSolicitud("LISTA", String.valueOf(nom));
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("solicitudes",1, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-12)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // solicitudes ::= MEN TIPO MAY PISTA MEN BARRA TIPO MAY nombres MEN BARRA SOLICITUD MAY 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).value;
		insertarValsSolicitud("PISTA", String.valueOf(nom));
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("solicitudes",1, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-12)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;
insertarValsSolicitud("PISTANUEVA", "");
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // solicitudes ::= MEN TIPO MAY PISTANUEVA MEN BARRA TIPO MAY NT$1 datosN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("solicitudes",1, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-9)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombres ::= MEN NOMBRE MAY CADENA MEN BARRA NOMBRE MAY 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).value;
		RESULT = cad;
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("nombres",3, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-7)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
insertarDato();
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$2",13, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // datosN ::= MEN DATOS MAY NT$2 datos2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("datosN",4, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).value;
insertarNombreSolicitud(nom);
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$3",14, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // datosN ::= MEN NOMBRE MAY CADENA MEN BARRA NOMBRE MAY NT$3 datosN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("datosN",4, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-9)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // datosN ::= MEN BARRA SOLICITUD MAY 
            {
              Object RESULT =null;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("datosN",4, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).value;
insertarEnDato(val,"CANAL");
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$4",15, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // datos2 ::= MEN CANAL MAY NUMERO MEN BARRA CANAL MAY NT$4 datos2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("datos2",5, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-9)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$5 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).value;
insertarEnDato(val,"NOTA");
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$5",16, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // datos2 ::= MEN NOTA MAY CADENA MEN BARRA NOTA MAY NT$5 datos2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("datos2",5, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-9)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$6 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).value;
insertarEnDato(val,"OCTAVA");
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$6",17, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // datos2 ::= MEN OCTAVA MAY NUMERO MEN BARRA OCTAVA MAY NT$6 datos2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("datos2",5, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-9)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$7 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).value;
insertarEnDato(val,"DURACION");
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$7",18, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // datos2 ::= MEN DURACION MAY NUMERO MEN BARRA DURACION MAY NT$7 datos2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("datos2",5, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-9)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // datos2 ::= MEN BARRA DATOS MAY datosN 
            {
              Object RESULT =null;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("datos2",5, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$8 ::= 
            {
              Object RESULT =null;
crearRespuesta("pistas","");
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$8",19, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // respuestas ::= MEN PISTAS MAY NT$8 pistas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("respuestas",2, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$9 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
crearRespuesta("pista",val);
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$9",20, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // respuestas ::= MEN PISTA NOMBRE IGUAL CADENA MAY NT$9 pista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("respuestas",2, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-7)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$10 ::= 
            {
              Object RESULT =null;
crearRespuesta("listas","");
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$10",21, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // respuestas ::= MEN LISTAS MAY NT$10 listas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("respuestas",2, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$11 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).value;
crearRespuesta("lista",val);
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$11",22, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // respuestas ::= MEN LISTA NOMBRE IGUAL CADENA ALEATORIA IGUAL CADENA NT$11 MAY pistas2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("respuestas",2, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-10)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$12 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).value;
		int cantleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).left;
		int cantright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).right;
		String cant = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
insertarValorR(nom,cant);
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$12",23, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pistas ::= MEN PISTA NOMBRE IGUAL CADENA DURACION IGUAL NUMERO MAY NT$12 pistas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).value;
		int cantleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).left;
		int cantright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).right;
		String cant = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("pistas",6, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-10)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // pistas ::= MEN BARRA PISTAS MAY 
            {
              Object RESULT =null;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("pistas",6, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$13 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-10)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-10)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
insertarNota(n,o,t,c);
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$13",24, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pista ::= MEN NOTA NOMBRE IGUAL CADENA DURACION IGUAL NUMERO FRECUENCIA IGUAL NUMERO CANAL IGUAL NUMERO MAY NT$13 pista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-12)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-12)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-12)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-9)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("pista",7, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-16)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pista ::= MEN BARRA PISTA MAY 
            {
              Object RESULT =null;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("pista",7, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$14 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-4)).value;
		int cantleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).left;
		int cantright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).right;
		String cant = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
insertarValorR(nom,cant);
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$14",25, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listas ::= MEN LISTA NOMBRE IGUAL CADENA PISTAS IGUAL NUMERO MAY NT$14 listas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-6)).value;
		int cantleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).left;
		int cantright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).right;
		String cant = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("listas",9, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-10)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listas ::= MEN BARRA LISTAS MAY 
            {
              Object RESULT =null;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("listas",9, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$15 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
insertarValorR(nom,"0");
              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("NT$15",26, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pistas2 ::= MEN PISTA NOMBRE IGUAL CADENA MAY NT$15 pistas2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)).value;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("pistas2",10, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-7)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pistas2 ::= MEN BARRA LISTA MAY 
            {
              Object RESULT =null;

              CUP$ParserComun$result = parser.getSymbolFactory().newSymbol("pistas2",10, ((java_cup.runtime.Symbol)CUP$ParserComun$stack.elementAt(CUP$ParserComun$top-3)), ((java_cup.runtime.Symbol)CUP$ParserComun$stack.peek()), RESULT);
            }
          return CUP$ParserComun$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserComun$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserComun$do_action(
    int                        CUP$ParserComun$act_num,
    java_cup.runtime.lr_parser CUP$ParserComun$parser,
    java.util.Stack            CUP$ParserComun$stack,
    int                        CUP$ParserComun$top)
    throws java.lang.Exception
    {
              return CUP$ParserComun$do_action_part00000000(
                               CUP$ParserComun$act_num,
                               CUP$ParserComun$parser,
                               CUP$ParserComun$stack,
                               CUP$ParserComun$top);
    }
}

}
